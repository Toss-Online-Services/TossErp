# Autonomous Development Workflow

## Core Principles
- **Complete Problem Resolution**: Never yield control until the problem is fully solved
- **Tool Integration**: Use all available MCP servers and tools effectively
- **Iterative Improvement**: Continuously refine solutions until perfection
- **Context Awareness**: Understand the full scope before implementing
- **Quality Assurance**: Test thoroughly and handle all edge cases

## MCP Server Integration

### File System Operations
- Use filesystem server for file manipulation
- Implement proper file organization
- Handle file permissions correctly
- Use proper file naming conventions
- Implement proper backup strategies

### Version Control
- Use git server for all version control operations
- Implement proper branching strategies
- Use meaningful commit messages
- Handle merge conflicts properly
- Implement proper release workflows

### Research & Information
- Use web-search and brave-search for current information
- Research best practices before implementation
- Validate approaches against current standards
- Gather comprehensive information
- Document research findings

### Database Operations
- Use sqlite and postgres servers for data operations
- Implement proper database design
- Handle database migrations properly
- Implement proper backup strategies
- Monitor database performance

### Infrastructure Management
- Use docker server for container operations
- Use kubernetes server for cluster management
- Implement proper deployment strategies
- Monitor infrastructure health
- Handle scaling and performance

### API Testing & Automation
- Use http server for API testing
- Use puppeteer for web automation
- Implement proper testing strategies
- Handle authentication properly
- Monitor API performance

## Development Workflow

### 1. Problem Analysis
- Understand the complete problem scope
- Research current best practices
- Identify all required components
- Plan the implementation approach
- Consider edge cases and constraints

### 2. Implementation Planning
- Break down complex problems into manageable tasks
- Use Taskmaster for task management
- Plan proper testing strategies
- Consider performance implications
- Plan proper error handling

### 3. Development Execution
- Implement solutions incrementally
- Test each component thoroughly
- Handle errors gracefully
- Implement proper logging
- Follow coding standards

### 4. Quality Assurance
- Run comprehensive tests
- Handle edge cases properly
- Test error scenarios
- Validate performance
- Check accessibility compliance

### 5. Documentation & Deployment
- Document all changes properly
- Update relevant documentation
- Implement proper deployment
- Monitor deployment health
- Plan rollback strategies

## Tool Integration Patterns

### Task Management
- Use Taskmaster for all project planning
- Break down complex features
- Track implementation progress
- Manage dependencies properly
- Plan testing strategies

### Code Quality
- Follow all established coding standards
- Use proper TypeScript patterns
- Implement proper error handling
- Follow Vue 3 and Nuxt 4 best practices
- Maintain proper test coverage

### Testing Strategy
- Implement unit tests for all components
- Use component testing for Vue components
- Implement E2E tests for user workflows
- Test error scenarios thoroughly
- Maintain high test coverage

### Performance Optimization
- Monitor application performance
- Implement proper caching strategies
- Optimize bundle sizes
- Monitor Core Web Vitals
- Implement proper lazy loading

## Success Criteria

### Problem Resolution
- All requirements are implemented
- All edge cases are handled
- All error scenarios are tested
- Performance meets requirements
- Accessibility standards are met

### Code Quality
- Code follows all established standards
- Proper error handling is implemented
- Comprehensive testing is in place
- Documentation is updated
- Code is properly reviewed

### Deployment
- Application deploys successfully
- All environments are configured
- Monitoring is in place
- Rollback procedures are ready
- Performance is monitored

## Best Practices

### Always
- Research before implementing
- Test thoroughly
- Handle errors gracefully
- Document changes
- Follow established patterns

### Never
- Yield control with incomplete solutions
- Skip testing
- Ignore error handling
- Forget documentation
- Violate coding standards

## Continuous Improvement
- Monitor tool effectiveness
- Update workflows based on feedback
- Improve automation where possible
- Enhance testing strategies
- Optimize development processes
description: Comprehensive autonomous development workflow guidelines integrating all MCP servers and tools for complete problem-solving
globs: **/*
alwaysApply: true
---
