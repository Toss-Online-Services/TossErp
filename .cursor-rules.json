{
  "version": 1,
  "rules": [
    {
      "name": "clean-architecture-layering-domain",
      "description": "Ensure Domain layer does not depend on Application, Infrastructure, or Presentation layers.",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*(Application|Infrastructure|Presentation)"
      },
      "files": [
        "**/Domain/**/*.cs"
      ],
      "message": "Domain layer code is referencing an outer layer (Application/Infrastructure/Presentation). In Clean Architecture, Domain should be independent of other layers. Remove direct dependencies on other layers in Domain code.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "Domain Layer Independence",
        "description": "Domain layer should not depend on Application, Infrastructure, or Presentation. This rule flags references to outer layers from domain code.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "clean-architecture-layering-application",
      "description": "Ensure Application layer does not depend on Infrastructure layer (use interfaces or abstractions instead).",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*Infrastructure"
      },
      "files": [
        "**/Application/**/*.cs"
      ],
      "message": "Application layer code is referencing the Infrastructure layer. According to Clean Architecture, the application/business logic should not depend on infrastructure details. Use abstractions or interfaces to invert dependencies.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "Application Layer Independence",
        "description": "Application layer should not directly depend on Infrastructure. This rule flags references to infrastructure from application code.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "clean-architecture-layering-presentation",
      "description": "Ensure Presentation layer (UI/API) does not directly depend on Infrastructure layer.",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*Infrastructure"
      },
      "files": [
        "**/Presentation/**/*.cs",
        "**/UI/**/*.cs",
        "**/Web/**/*.cs",
        "**/API/**/*.cs"
      ],
      "message": "Presentation layer code is referencing the Infrastructure layer directly. In Clean Architecture, UI/controllers should rely on Application layer (use cases) and not on infrastructure implementations. Ensure that infrastructure calls are made via application services or interfaces.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "Presentation Layer Independence",
        "description": "Presentation/UI layer should not depend on Infrastructure. This rule flags direct infrastructure references in presentation code.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "ddd-patterns-usage",
      "description": "Validate Domain-Driven Design patterns are properly applied (Aggregates, Entities, Value Objects, Domain Events).",
      "pattern": {
        "type": "regex",
        "value": "\\b(class|record|struct)\\s+\\w+"
      },
      "files": [
        "**/Domain/**/*.cs"
      ],
      "message": "Review this domain model for proper DDD patterns. Ensure that Entities have identity and encapsulated behavior, Aggregates enforce invariants and consistency, Value Objects are immutable and validated, and Domain Events are used to capture significant changes. The domain code should reflect these DDD concepts appropriately.",
      "severity": "info",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "DDD Patterns Enforcement",
        "description": "Encourages verifying that Aggregates, Entities, Value Objects, and Domain Events are used correctly in the domain model.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "bounded-context-separation-inventory",
      "description": "Ensure Inventory module remains decoupled and does not directly reference other bounded contexts (CRM, Orders, Logistics).",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*(CRM|Orders|Logistics)"
      },
      "files": [
        "**/Inventory/**/Domain/**/*.cs",
        "**/Inventory/**/Application/**/*.cs"
      ],
      "message": "Inventory module code is referencing another bounded context (CRM/Orders/Logistics) directly. Modules should communicate via defined interfaces or messaging, not direct code references. This cross-module dependency may violate modularity.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "Inventory Context Isolation",
        "description": "Inventory code shouldn't directly depend on CRM, Orders, or Logistics context code. This rule flags such cross-context references in the Inventory module.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "bounded-context-separation-crm",
      "description": "Ensure CRM module remains decoupled and does not directly reference other bounded contexts (Inventory, Orders, Logistics).",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*(Inventory|Orders|Logistics)"
      },
      "files": [
        "**/CRM/**/Domain/**/*.cs",
        "**/CRM/**/Application/**/*.cs"
      ],
      "message": "CRM module code is referencing another bounded context (Inventory/Orders/Logistics) directly. Each bounded context should be independent; use integration events or APIs instead of direct dependencies across modules.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "CRM Context Isolation",
        "description": "CRM code shouldn't directly depend on Inventory, Orders, or Logistics context code. This rule flags such cross-context references in the CRM module.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "bounded-context-separation-orders",
      "description": "Ensure Orders module remains decoupled and does not directly reference other bounded contexts (Inventory, CRM, Logistics).",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*(Inventory|CRM|Logistics)"
      },
      "files": [
        "**/Orders/**/Domain/**/*.cs",
        "**/Orders/**/Application/**/*.cs"
      ],
      "message": "Orders module code is referencing another bounded context (Inventory/CRM/Logistics) directly. Bounded contexts should be independent; cross-context calls should go through well-defined contracts or messaging, not direct references.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "Orders Context Isolation",
        "description": "Orders code shouldn't directly depend on Inventory, CRM, or Logistics context code. This rule flags such cross-context references in the Orders module.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "bounded-context-separation-logistics",
      "description": "Ensure Logistics module remains decoupled and does not directly reference other bounded contexts (Inventory, CRM, Orders).",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*(Inventory|CRM|Orders)"
      },
      "files": [
        "**/Logistics/**/Domain/**/*.cs",
        "**/Logistics/**/Application/**/*.cs"
      ],
      "message": "Logistics module code is referencing another bounded context (Inventory/CRM/Orders) directly. Maintain separation between modules; use published interfaces or events for cross-context interactions instead of direct references.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "Logistics Context Isolation",
        "description": "Logistics code shouldn't directly depend on Inventory, CRM, or Orders context code. This rule flags such cross-context references in the Logistics module.",
        "category": "Architecture",
        "recommended": true
      }
    },
    {
      "name": "ai-copilot-domain-separation",
      "description": "Ensure AI Copilot/Semantic Kernel orchestration logic is kept out of core domain logic.",
      "pattern": {
        "type": "regex",
        "value": "using\\s+.*SemanticKernel"
      },
      "files": [
        "**/Domain/**/*.cs",
        "**/Application/**/*.cs"
      ],
      "message": "Found reference to AI/Copilot (Semantic Kernel) in core logic. AI orchestration concerns should be separated from domain and application business logic (e.g., handled in a dedicated service or layer). Ensure that domain logic remains purely business-oriented.",
      "severity": "warning",
      "autofix": false,
      "requires_manual_review": true,
      "tags": [
        "architecture",
        "code-review"
      ],
      "documentation": {
        "title": "AI Orchestration Separation",
        "description": "AI Copilot integration should not pollute domain or application logic. This rule flags references to Semantic Kernel (or similar AI) in core layers.",
        "category": "Architecture",
        "recommended": true
      }
    }
  ]
}
