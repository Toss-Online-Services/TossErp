// <auto-generated />
using System;
using System.Collections.Generic;
using Crm.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crm.Infrastructure.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20250826054641_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crm")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crm.Domain.Entities.CustomerInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CustomerInteraction_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_CustomerInteraction_CreatedBy");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_CustomerInteraction_CustomerId");

                    b.HasIndex("FollowUpDate")
                        .HasDatabaseName("IX_CustomerInteraction_FollowUpDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_CustomerInteraction_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_CustomerInteraction_Type");

                    b.ToTable("CustomerInteractions", "crm");
                });

            modelBuilder.Entity("Crm.Domain.Entities.LoyaltyTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RelatedOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_LoyaltyTransaction_CreatedAt");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_LoyaltyTransaction_CustomerId");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_LoyaltyTransaction_ExpiryDate");

                    b.HasIndex("RelatedOrderId")
                        .HasDatabaseName("IX_LoyaltyTransaction_RelatedOrderId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_LoyaltyTransaction_Type");

                    b.ToTable("LoyaltyTransactions", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Aggregates.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Source")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Aggregates.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("CompanySize")
                        .HasColumnType("integer");

                    b.Property<int>("ContactAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ConvertedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConvertedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ConvertedCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConvertedOpportunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastContactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("NextFollowUp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("QualifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo")
                        .HasDatabaseName("IX_Lead_AssignedTo");

                    b.HasIndex("CampaignId")
                        .HasDatabaseName("IX_Lead_CampaignId");

                    b.HasIndex("ConvertedAt")
                        .HasDatabaseName("IX_Lead_ConvertedAt");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Lead_CreatedAt");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Lead_IsDeleted");

                    b.HasIndex("LastContactedAt")
                        .HasDatabaseName("IX_Lead_LastContactedAt");

                    b.HasIndex("QualifiedAt")
                        .HasDatabaseName("IX_Lead_QualifiedAt");

                    b.HasIndex("Source")
                        .HasDatabaseName("IX_Lead_Source");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Lead_Status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Lead_TenantId");

                    b.HasIndex("TenantId", "AssignedTo")
                        .HasDatabaseName("IX_Lead_Tenant_AssignedTo");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_Lead_Tenant_Status");

                    b.ToTable("Leads", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Aggregates.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualCloseDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("ActualValueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ActualValueCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("CampaignName")
                        .HasColumnType("text");

                    b.Property<string>("CloseReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompetitorName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ContactAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal>("EstimatedValueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EstimatedValueCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime>("ExpectedCloseDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("LossReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("NextFollowUp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Probability")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("SalesTeam")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("StageProgressDays")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("WinReason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActualCloseDate")
                        .HasDatabaseName("IX_Opportunity_ActualCloseDate");

                    b.HasIndex("AssignedTo")
                        .HasDatabaseName("IX_Opportunity_AssignedTo");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Opportunity_CreatedAt");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Opportunity_CustomerId");

                    b.HasIndex("ExpectedCloseDate")
                        .HasDatabaseName("IX_Opportunity_ExpectedCloseDate");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Opportunity_IsDeleted");

                    b.HasIndex("LastActivityDate")
                        .HasDatabaseName("IX_Opportunity_LastActivityDate");

                    b.HasIndex("LeadId")
                        .HasDatabaseName("IX_Opportunity_LeadId");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Opportunity_Priority");

                    b.HasIndex("Source")
                        .HasDatabaseName("IX_Opportunity_Source");

                    b.HasIndex("Stage")
                        .HasDatabaseName("IX_Opportunity_Stage");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Opportunity_TenantId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Opportunity_Type");

                    b.HasIndex("CustomerId", "Stage")
                        .HasDatabaseName("IX_Opportunity_Customer_Stage");

                    b.HasIndex("TenantId", "AssignedTo")
                        .HasDatabaseName("IX_Opportunity_Tenant_AssignedTo");

                    b.HasIndex("TenantId", "Stage")
                        .HasDatabaseName("IX_Opportunity_Tenant_Stage");

                    b.ToTable("Opportunities", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("NextAction")
                        .HasColumnType("text");

                    b.Property<string>("Outcome")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Activity", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Attachments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CommunicatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Communication", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContactType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastContactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contact", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Document", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Note", "crm");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Aggregates.Lead", b =>
                {
                    b.OwnsOne("TossErp.CRM.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("AddressCountry");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("AddressPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("AddressState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("AddressStreet");

                            b1.HasKey("LeadId");

                            b1.ToTable("Leads", "crm");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.OwnsOne("TossErp.CRM.Domain.ValueObjects.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Email");

                            b1.HasKey("LeadId");

                            b1.ToTable("Leads", "crm");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.OwnsOne("TossErp.CRM.Domain.ValueObjects.LeadScore", "Score", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Score");

                            b1.HasKey("LeadId");

                            b1.ToTable("Leads", "crm");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.OwnsOne("TossErp.CRM.Domain.ValueObjects.Money", "EstimatedValue", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("EstimatedValueAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("EstimatedValueCurrency");

                            b1.HasKey("LeadId");

                            b1.ToTable("Leads", "crm");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.OwnsOne("TossErp.CRM.Domain.ValueObjects.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<Guid>("LeadId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("LeadId");

                            b1.ToTable("Leads", "crm");

                            b1.WithOwner()
                                .HasForeignKey("LeadId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("EstimatedValue");

                    b.Navigation("Phone");

                    b.Navigation("Score")
                        .IsRequired();
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Activity", b =>
                {
                    b.HasOne("TossErp.CRM.Domain.Aggregates.Customer", null)
                        .WithMany("Activities")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Communication", b =>
                {
                    b.HasOne("TossErp.CRM.Domain.Aggregates.Customer", null)
                        .WithMany("Communications")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Contact", b =>
                {
                    b.HasOne("TossErp.CRM.Domain.Aggregates.Customer", null)
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Document", b =>
                {
                    b.HasOne("TossErp.CRM.Domain.Aggregates.Customer", null)
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Entities.Note", b =>
                {
                    b.HasOne("TossErp.CRM.Domain.Aggregates.Customer", null)
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TossErp.CRM.Domain.Aggregates.Customer", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Communications");

                    b.Navigation("Contacts");

                    b.Navigation("Documents");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
