// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product/Item management
model Product {
  id            String   @id @default(cuid())
  tenantId      String   @map("tenant_id")
  
  // Basic product information
  sku           String   @unique @map("sku")
  name          String
  description   String?
  category      String?
  subcategory   String?
  brand         String?
  manufacturer  String?
  model         String?
  
  // Product classification
  type          ProductType  @default(FINISHED_GOODS)
  status        ProductStatus @default(ACTIVE)
  
  // Pricing and costing
  unitPrice     Decimal? @map("unit_price") @db.Decimal(15,2)
  costPrice     Decimal? @map("cost_price") @db.Decimal(15,2)
  currency      String   @default("ZAR")
  
  // Physical properties
  weight        Decimal? @db.Decimal(10,3)
  dimensions    String?  // JSON string for length, width, height
  
  // Units of measure
  baseUnit      String   @map("base_unit") @default("EACH")
  alternateUnits Json?   @map("alternate_units") // Array of conversion factors
  
  // Stock management
  trackInventory Boolean @map("track_inventory") @default(true)
  stockLocations StockLocation[]
  stockMovements StockMovement[]
  
  // Relationships
  suppliers     ProductSupplier[]
  purchaseOrderItems PurchaseOrderItem[]
  stockAdjustments StockAdjustment[]
  
  // Rural enterprise specific
  isSharedResource Boolean @map("is_shared_resource") @default(false) // For community sharing
  shareableQuantity Decimal? @map("shareable_quantity") @db.Decimal(15,3)
  groupBuyingEligible Boolean @map("group_buying_eligible") @default(false)
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String   @map("created_by")

  @@map("products")
  @@index([tenantId])
  @@index([sku])
  @@index([type])
  @@index([category])
}

// Stock locations (warehouses, stores, etc.)
model StockLocation {
  id            String   @id @default(cuid())
  tenantId      String   @map("tenant_id")
  
  name          String
  code          String   @unique
  description   String?
  type          LocationType @default(WAREHOUSE)
  
  // Address information
  address       String?
  city          String?
  province      String?
  postalCode    String?  @map("postal_code")
  country       String   @default("South Africa")
  
  // Geographic coordinates for rural areas
  latitude      Decimal? @db.Decimal(10,8)
  longitude     Decimal? @db.Decimal(11,8)
  
  // Location settings
  isActive      Boolean  @default(true) @map("is_active")
  allowNegativeStock Boolean @default(false) @map("allow_negative_stock")
  
  // Stock items at this location
  stockItems    StockItem[]
  stockMovements StockMovement[]
  
  // Rural specific
  isSharedFacility Boolean @default(false) @map("is_shared_facility")
  managedBy     String?  @map("managed_by") // Who manages shared facility
  accessHours   String?  @map("access_hours") // When accessible
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String   @map("created_by")

  @@map("stock_locations")
  @@index([tenantId])
  @@index([type])
}

// Current stock quantities at each location
model StockItem {
  id            String   @id @default(cuid())
  
  productId     String   @map("product_id")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  locationId    String   @map("location_id")
  location      StockLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  
  // Stock quantities
  quantityOnHand    Decimal @default(0) @map("quantity_on_hand") @db.Decimal(15,3)
  quantityReserved  Decimal @default(0) @map("quantity_reserved") @db.Decimal(15,3)
  quantityAvailable Decimal @default(0) @map("quantity_available") @db.Decimal(15,3)
  
  // Reorder management
  reorderPoint     Decimal? @map("reorder_point") @db.Decimal(15,3)
  reorderQuantity  Decimal? @map("reorder_quantity") @db.Decimal(15,3)
  maxStock         Decimal? @map("max_stock") @db.Decimal(15,3)
  minStock         Decimal? @map("min_stock") @db.Decimal(15,3)
  
  // Cost tracking
  averageCost      Decimal? @map("average_cost") @db.Decimal(15,2)
  lastCost         Decimal? @map("last_cost") @db.Decimal(15,2)
  
  // Last stock count
  lastCountDate    DateTime? @map("last_count_date")
  lastCountQuantity Decimal? @map("last_count_quantity") @db.Decimal(15,3)
  
  // Metadata
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("stock_items")
  @@unique([productId, locationId])
  @@index([productId])
  @@index([locationId])
}

// All stock movements (in, out, transfers, adjustments)
model StockMovement {
  id            String   @id @default(cuid())
  tenantId      String   @map("tenant_id")
  
  productId     String   @map("product_id")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  locationId    String   @map("location_id")
  location      StockLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  
  // Movement details
  type          MovementType
  quantity      Decimal  @db.Decimal(15,3)
  unit          String   @default("EACH")
  
  // Cost information
  unitCost      Decimal? @map("unit_cost") @db.Decimal(15,2)
  totalCost     Decimal? @map("total_cost") @db.Decimal(15,2)
  
  // Reference information
  referenceType ReferenceType? @map("reference_type")
  referenceId   String?  @map("reference_id") // ID of PO, sale, transfer, etc.
  batchNumber   String?  @map("batch_number")
  serialNumber  String?  @map("serial_number")
  expiryDate    DateTime? @map("expiry_date")
  
  // Transfer specific (for transfers between locations)
  toLocationId  String?  @map("to_location_id")
  
  // Reason and notes
  reason        String?
  notes         String?
  
  // Metadata
  movementDate  DateTime @default(now()) @map("movement_date")
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     String   @map("created_by")

  @@map("stock_movements")
  @@index([tenantId])
  @@index([productId])
  @@index([locationId])
  @@index([type])
  @@index([movementDate])
  @@index([referenceType, referenceId])
}

// Manual stock adjustments
model StockAdjustment {
  id            String   @id @default(cuid())
  tenantId      String   @map("tenant_id")
  
  adjustmentNumber String @unique @map("adjustment_number")
  
  productId     String   @map("product_id")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  locationId    String   @map("location_id")
  
  // Adjustment details
  type          AdjustmentType
  reason        AdjustmentReason
  
  // Quantities
  quantityBefore Decimal @map("quantity_before") @db.Decimal(15,3)
  quantityAfter  Decimal @map("quantity_after") @db.Decimal(15,3)
  adjustmentQty  Decimal @map("adjustment_quantity") @db.Decimal(15,3)
  
  // Cost impact
  unitCost      Decimal? @map("unit_cost") @db.Decimal(15,2)
  totalCostImpact Decimal? @map("total_cost_impact") @db.Decimal(15,2)
  
  // Approval workflow
  status        AdjustmentStatus @default(PENDING)
  approvedBy    String?  @map("approved_by")
  approvedAt    DateTime? @map("approved_at")
  
  notes         String?
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     String   @map("created_by")

  @@map("stock_adjustments")
  @@index([tenantId])
  @@index([productId])
  @@index([status])
  @@index([adjustmentNumber])
}

// Product suppliers
model ProductSupplier {
  id            String   @id @default(cuid())
  tenantId      String   @map("tenant_id")
  
  productId     String   @map("product_id")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  supplierName  String   @map("supplier_name")
  supplierCode  String?  @map("supplier_code")
  supplierSku   String?  @map("supplier_sku")
  
  // Pricing
  unitCost      Decimal? @map("unit_cost") @db.Decimal(15,2)
  currency      String   @default("ZAR")
  
  // Lead times
  leadTimeDays  Int?     @map("lead_time_days")
  minOrderQty   Decimal? @map("min_order_quantity") @db.Decimal(15,3)
  
  // Status
  isPreferred   Boolean  @default(false) @map("is_preferred")
  isActive      Boolean  @default(true) @map("is_active")
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("product_suppliers")
  @@index([tenantId])
  @@index([productId])
  @@index([supplierCode])
}

// Purchase orders
model PurchaseOrder {
  id            String   @id @default(cuid())
  tenantId      String   @map("tenant_id")
  
  orderNumber   String   @unique @map("order_number")
  status        POStatus @default(DRAFT)
  
  // Supplier information
  supplierName  String   @map("supplier_name")
  supplierCode  String?  @map("supplier_code")
  supplierEmail String?  @map("supplier_email")
  supplierPhone String?  @map("supplier_phone")
  
  // Dates
  orderDate     DateTime @default(now()) @map("order_date")
  expectedDate  DateTime? @map("expected_date")
  receivedDate  DateTime? @map("received_date")
  
  // Financial
  subtotal      Decimal  @default(0) @map("subtotal") @db.Decimal(15,2)
  taxAmount     Decimal  @default(0) @map("tax_amount") @db.Decimal(15,2)
  total         Decimal  @default(0) @map("total") @db.Decimal(15,2)
  currency      String   @default("ZAR")
  
  // Delivery
  deliveryLocationId String? @map("delivery_location_id")
  
  // Items
  items         PurchaseOrderItem[]
  
  // Approval
  approvedBy    String?  @map("approved_by")
  approvedAt    DateTime? @map("approved_at")
  
  notes         String?
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String   @map("created_by")

  @@map("purchase_orders")
  @@index([tenantId])
  @@index([status])
  @@index([orderNumber])
  @@index([supplierCode])
}

// Purchase order line items
model PurchaseOrderItem {
  id            String   @id @default(cuid())
  
  purchaseOrderId String @map("purchase_order_id")
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  productId     String   @map("product_id")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Quantities
  quantityOrdered Decimal @map("quantity_ordered") @db.Decimal(15,3)
  quantityReceived Decimal @default(0) @map("quantity_received") @db.Decimal(15,3)
  unit          String   @default("EACH")
  
  // Pricing
  unitCost      Decimal  @map("unit_cost") @db.Decimal(15,2)
  totalCost     Decimal  @map("total_cost") @db.Decimal(15,2)
  
  // Status
  status        POItemStatus @default(PENDING)
  
  notes         String?

  @@map("purchase_order_items")
  @@index([purchaseOrderId])
  @@index([productId])
  @@index([status])
}

// Enums
enum ProductType {
  RAW_MATERIAL
  COMPONENT
  FINISHED_GOODS
  SERVICE
  DIGITAL
  CONSUMABLE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  DRAFT
}

enum LocationType {
  WAREHOUSE
  STORE
  DISTRIBUTION_CENTER
  SUPPLIER
  CUSTOMER
  SHARED_FACILITY // Rural community shared facility
}

enum MovementType {
  RECEIPT        // Receiving stock
  ISSUE          // Issuing/selling stock
  TRANSFER_OUT   // Transfer to another location
  TRANSFER_IN    // Transfer from another location
  ADJUSTMENT     // Manual adjustment
  PRODUCTION     // Manufacturing/assembly
  CONSUMPTION    // Used in production
  RETURN         // Return from customer
  DAMAGED        // Marked as damaged
  EXPIRED        // Marked as expired
}

enum ReferenceType {
  PURCHASE_ORDER
  SALES_ORDER
  TRANSFER
  ADJUSTMENT
  PRODUCTION
  CUSTOMER_RETURN
  SUPPLIER_RETURN
}

enum AdjustmentType {
  INCREASE
  DECREASE
}

enum AdjustmentReason {
  PHYSICAL_COUNT
  DAMAGED_GOODS
  EXPIRED_GOODS
  THEFT_LOSS
  FOUND_STOCK
  SYSTEM_ERROR
  OTHER
}

enum AdjustmentStatus {
  PENDING
  APPROVED
  REJECTED
  APPLIED
}

enum POStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
  CLOSED
}

enum POItemStatus {
  PENDING
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}
