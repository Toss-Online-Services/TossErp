// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String      @id @default(uuid())
  name        String
  type        TenantType  @default(OTHER)
  settings    Json        @default("{}")
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  users       User[]
  
  @@map("tenants")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  firstName     String
  lastName      String
  password      String
  role          UserRole  @default(EMPLOYEE)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  phoneVerified Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Profile information
  profile       UserProfile?
  
  // Authentication tokens
  refreshTokens RefreshToken[]
  
  // Password reset
  passwordResets PasswordReset[]
  
  // Email verification
  emailVerifications EmailVerification[]
  
  // Login sessions
  loginSessions LoginSession[]
  
  @@map("users")
}

model UserProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Contact information
  phone         String?
  mobile        String?
  
  // Address
  street        String?
  city          String?
  province      String?
  postalCode    String?
  country       String    @default("South Africa")
  
  // Personal information
  dateOfBirth   DateTime?
  gender        Gender?
  language      String    @default("en")
  timezone      String    @default("Africa/Johannesburg")
  
  // Profile image
  avatar        String?
  
  // Preferences
  preferences   Json      @default("{}")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("user_profiles")
}

model RefreshToken {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  isRevoked   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("refresh_tokens")
}

model PasswordReset {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  
  @@map("password_resets")
}

model EmailVerification {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  
  @@map("email_verifications")
}

model LoginSession {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String    @unique
  ipAddress   String?
  userAgent   String?
  loginAt     DateTime  @default(now())
  logoutAt    DateTime?
  isActive    Boolean   @default(true)
  
  @@map("login_sessions")
}

model Permission {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  userRoles UserRole[]
  
  @@map("roles")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?
  tenantId    String?
  action      String
  resource    String
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  
  @@map("audit_logs")
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  MANAGER
  EMPLOYEE
  CUSTOMER
  VENDOR
}

enum TenantType {
  RETAIL_TRADE
  FOOD_HOSPITALITY
  PERSONAL_SERVICES
  TRADES_TECHNICAL
  AGRICULTURE
  MANUFACTURING
  TRANSPORTATION
  CONSTRUCTION
  TECHNOLOGY
  HEALTHCARE
  EDUCATION
  CREATIVE_ARTS
  PROFESSIONAL_SERVICES
  FINANCIAL_SERVICES
  ENERGY_UTILITIES
  WASTE_RECYCLING
  ENTERTAINMENT_EVENTS
  SECURITY_SERVICES
  CLEANING_MAINTENANCE
  COMMUNITY_SERVICES
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}
