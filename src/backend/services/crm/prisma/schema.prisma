// CRM Service Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Customer Model
model Customer {
  id           String   @id @default(cuid())
  tenantId     String
  customerCode String   @unique
  
  // Basic Information
  type         CustomerType
  name         String
  displayName  String?
  email        String?
  phone        String?
  website      String?
  
  // Address Information
  addresses    Address[]
  
  // Business Information
  industry     String?
  employeeCount Int?
  annualRevenue Float?
  
  // CRM Specific
  source       String?
  status       CustomerStatus @default(ACTIVE)
  tags         CustomerTag[]
  
  // Relationships
  contacts     Contact[]
  opportunities Opportunity[]
  activities   Activity[]
  documents    Document[]
  notes        Note[]
  
  // System Fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  lastActivity DateTime?
  
  // Metadata
  customFields Json?
  settings     Json?
  
  @@map("customers")
  @@index([tenantId])
  @@index([customerCode])
  @@index([email])
  @@index([status])
}

// Contact Model
model Contact {
  id          String   @id @default(cuid())
  tenantId    String
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Personal Information
  firstName   String
  lastName    String
  fullName    String
  email       String?
  phone       String?
  mobile      String?
  position    String?
  department  String?
  
  // Contact Preferences
  isPrimary   Boolean  @default(false)
  preferredContact ContactMethod @default(EMAIL)
  
  // Social Media
  linkedin    String?
  twitter     String?
  
  // System Fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  isActive    Boolean  @default(true)
  
  // Relationships
  activities  Activity[]
  notes       Note[]
  
  // Metadata
  customFields Json?
  
  @@map("contacts")
  @@index([tenantId])
  @@index([customerId])
  @@index([email])
}

// Opportunity Model
model Opportunity {
  id           String   @id @default(cuid())
  tenantId     String
  customerId   String
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Basic Information
  name         String
  description  String?
  amount       Float?
  currency     String   @default("ZAR")
  
  // Sales Process
  stage        String
  probability  Int      @default(0) // 0-100
  source       String?
  
  // Timeline
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  
  // Status
  status       OpportunityStatus @default(OPEN)
  lostReason   String?
  
  // Ownership
  ownerId      String
  teamId       String?
  
  // Relationships
  activities   Activity[]
  documents    Document[]
  notes        Note[]
  products     OpportunityProduct[]
  
  // System Fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  
  // Metadata
  customFields Json?
  
  @@map("opportunities")
  @@index([tenantId])
  @@index([customerId])
  @@index([ownerId])
  @@index([status])
  @@index([stage])
}

// Activity Model (Calls, Meetings, Emails, Tasks)
model Activity {
  id           String   @id @default(cuid())
  tenantId     String
  
  // Basic Information
  type         ActivityType
  subject      String
  description  String?
  
  // Relationships
  customerId   String?
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contactId    String?
  contact      Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  opportunityId String?
  opportunity  Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  // Scheduling
  startTime    DateTime?
  endTime      DateTime?
  allDay       Boolean  @default(false)
  
  // Status
  status       ActivityStatus @default(PLANNED)
  priority     Priority @default(MEDIUM)
  
  // Ownership
  ownerId      String
  attendees    String[] // JSON array of user IDs
  
  // System Fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  completedAt  DateTime?
  
  // Metadata
  customFields Json?
  
  @@map("activities")
  @@index([tenantId])
  @@index([customerId])
  @@index([contactId])
  @@index([opportunityId])
  @@index([ownerId])
  @@index([type])
  @@index([status])
}

// Address Model
model Address {
  id          String   @id @default(cuid())
  tenantId    String
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Address Information
  type        AddressType
  line1       String
  line2       String?
  city        String
  state       String?
  postalCode  String
  country     String   @default("ZA")
  
  // Flags
  isPrimary   Boolean  @default(false)
  isShipping  Boolean  @default(false)
  isBilling   Boolean  @default(false)
  
  // System Fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("addresses")
  @@index([tenantId])
  @@index([customerId])
}

// Document Model
model Document {
  id           String   @id @default(cuid())
  tenantId     String
  
  // File Information
  name         String
  description  String?
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  
  // Relationships
  customerId   String?
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  opportunityId String?
  opportunity  Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  // Metadata
  tags         String[]
  category     String?
  
  // System Fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  
  @@map("documents")
  @@index([tenantId])
  @@index([customerId])
  @@index([opportunityId])
}

// Note Model
model Note {
  id           String   @id @default(cuid())
  tenantId     String
  
  // Content
  title        String?
  content      String
  
  // Relationships
  customerId   String?
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contactId    String?
  contact      Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  opportunityId String?
  opportunity  Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  // System Fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  isPrivate    Boolean  @default(false)
  
  @@map("notes")
  @@index([tenantId])
  @@index([customerId])
  @@index([contactId])
  @@index([opportunityId])
}

// Customer Tag Model
model CustomerTag {
  id         String   @id @default(cuid())
  tenantId   String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Tag Information
  name       String
  color      String?
  
  // System Fields
  createdAt  DateTime @default(now())
  createdBy  String
  
  @@map("customer_tags")
  @@unique([customerId, name])
  @@index([tenantId])
}

// Opportunity Product Model
model OpportunityProduct {
  id           String      @id @default(cuid())
  tenantId     String
  opportunityId String
  opportunity  Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  // Product Information
  productId    String?
  productName  String
  description  String?
  
  // Pricing
  quantity     Float       @default(1)
  unitPrice    Float
  discount     Float       @default(0)
  total        Float
  
  // System Fields
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@map("opportunity_products")
  @@index([tenantId])
  @@index([opportunityId])
}

// Enums
enum CustomerType {
  INDIVIDUAL
  COMPANY
  PARTNERSHIP
  NGO
  GOVERNMENT
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  LEAD
  BLACKLISTED
}

enum ContactMethod {
  EMAIL
  PHONE
  SMS
  WHATSAPP
  IN_PERSON
}

enum ActivityType {
  CALL
  MEETING
  EMAIL
  TASK
  NOTE
  APPOINTMENT
  DEMO
  PROPOSAL
  FOLLOW_UP
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum OpportunityStatus {
  OPEN
  WON
  LOST
  CLOSED
}

enum AddressType {
  BUSINESS
  SHIPPING
  BILLING
  OTHER
}
