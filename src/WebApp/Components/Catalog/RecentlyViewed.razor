@using Catalog.Domain.DTOs
@using Catalog.Domain.Services
@inject IRecentlyViewedService RecentlyViewedService
@inject NavigationManager NavigationManager

<div class="recently-viewed">
    <h3>Recently Viewed</h3>
    @if (RecentlyViewedItems?.Any() == true)
    {
        <div class="items-grid">
            @foreach (var item in RecentlyViewedItems)
            {
                <div class="item-card" @onclick="() => NavigateToItem(item.Id)">
                    <img src="@item.PictureUri" alt="@item.Name" />
                    <div class="item-info">
                        <h4>@item.Name</h4>
                        <p class="price">@item.Price.ToString("C")</p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="empty-message">No recently viewed items</p>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    private IEnumerable<CatalogItemDto>? RecentlyViewedItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadRecentlyViewed();
        }
    }

    private async Task LoadRecentlyViewed()
    {
        RecentlyViewedItems = await RecentlyViewedService.GetRecentlyViewedAsync(UserId);
    }

    private void NavigateToItem(int itemId)
    {
        NavigationManager.NavigateTo($"/catalog/item/{itemId}");
    }
} 