@using Catalog.Domain.DTOs
@using Catalog.Domain.Services
@inject IRecommendationService RecommendationService
@inject NavigationManager NavigationManager

<div class="related-items-section">
    <div class="related-items">
        <h3>Related Items</h3>
        @if (RelatedItems?.Any() == true)
        {
            <div class="items-grid">
                @foreach (var item in RelatedItems)
                {
                    <div class="item-card" @onclick="() => NavigateToItem(item.Id)">
                        <div class="item-image">
                            <img src="@item.PictureUri" alt="@item.Name" />
                            @if (item.AvailableStock <= 0)
                            {
                                <div class="out-of-stock-badge">Out of Stock</div>
                            }
                        </div>
                        <div class="item-details">
                            <h4>@item.Name</h4>
                            <div class="price">@item.Price.ToString("C")</div>
                            <div class="rating">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= item.Rating ? "filled" : "")">★</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="frequently-bought">
        <h3>Frequently Bought Together</h3>
        @if (FrequentlyBoughtItems?.Any() == true)
        {
            <div class="items-grid">
                @foreach (var item in FrequentlyBoughtItems)
                {
                    <div class="item-card" @onclick="() => NavigateToItem(item.Id)">
                        <div class="item-image">
                            <img src="@item.PictureUri" alt="@item.Name" />
                            @if (item.AvailableStock <= 0)
                            {
                                <div class="out-of-stock-badge">Out of Stock</div>
                            }
                        </div>
                        <div class="item-details">
                            <h4>@item.Name</h4>
                            <div class="price">@item.Price.ToString("C")</div>
                            <div class="rating">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= item.Rating ? "filled" : "")">★</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int CatalogItemId { get; set; }

    private IEnumerable<CatalogItemDto>? RelatedItems { get; set; }
    private IEnumerable<CatalogItemDto>? FrequentlyBoughtItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadRelatedItems();
        await LoadFrequentlyBoughtItems();
    }

    private async Task LoadRelatedItems()
    {
        RelatedItems = await RecommendationService.GetRelatedItemsAsync(CatalogItemId);
    }

    private async Task LoadFrequentlyBoughtItems()
    {
        FrequentlyBoughtItems = await RecommendationService.GetFrequentlyBoughtTogetherAsync(CatalogItemId);
    }

    private void NavigateToItem(int itemId)
    {
        NavigationManager.NavigateTo($"/catalog/item/{itemId}");
    }
} 