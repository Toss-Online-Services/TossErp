@using Catalog.Domain.DTOs
@using Catalog.Domain.Services
@inject IProductComparisonService ComparisonService
@inject NavigationManager NavigationManager

<div class="comparison-container">
    <div class="comparison-header">
        <h3>Compare Products</h3>
        <button class="clear-comparison" @onclick="ClearComparison">Clear All</button>
    </div>

    @if (ComparisonItems?.Any() == true)
    {
        <div class="comparison-table">
            <div class="comparison-row header">
                <div class="cell">Product</div>
                <div class="cell">Price</div>
                <div class="cell">Brand</div>
                <div class="cell">Type</div>
                <div class="cell">Stock</div>
                <div class="cell">Rating</div>
                <div class="cell">Actions</div>
            </div>

            @foreach (var item in ComparisonItems)
            {
                <div class="comparison-row">
                    <div class="cell product-cell">
                        <img src="@item.PictureUri" alt="@item.Name" />
                        <h4>@item.Name</h4>
                    </div>
                    <div class="cell">@item.Price.ToString("C")</div>
                    <div class="cell">@item.CatalogBrand?.Name</div>
                    <div class="cell">@item.CatalogType?.Name</div>
                    <div class="cell">
                        <span class="stock-status @(item.AvailableStock > 0 ? "in-stock" : "out-of-stock")">
                            @(item.AvailableStock > 0 ? "In Stock" : "Out of Stock")
                        </span>
                    </div>
                    <div class="cell">
                        <div class="rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="star @(i <= item.Rating ? "filled" : "")">â˜…</span>
                            }
                        </div>
                    </div>
                    <div class="cell">
                        <button class="view-button" @onclick="() => NavigateToItem(item.Id)">View</button>
                        <button class="remove-button" @onclick="() => RemoveFromComparison(item.Id)">Remove</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-comparison">
            <p>No products to compare</p>
            <button @onclick="ContinueShopping">Continue Shopping</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    private IEnumerable<CatalogItemDto>? ComparisonItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadComparison();
        }
    }

    private async Task LoadComparison()
    {
        ComparisonItems = await ComparisonService.GetComparisonItemsAsync(UserId);
    }

    private async Task RemoveFromComparison(int itemId)
    {
        await ComparisonService.RemoveFromComparisonAsync(UserId, itemId);
        await LoadComparison();
    }

    private async Task ClearComparison()
    {
        await ComparisonService.ClearComparisonAsync(UserId);
        await LoadComparison();
    }

    private void NavigateToItem(int itemId)
    {
        NavigationManager.NavigateTo($"/catalog/item/{itemId}");
    }

    private void ContinueShopping()
    {
        NavigationManager.NavigateTo("/catalog");
    }
} 