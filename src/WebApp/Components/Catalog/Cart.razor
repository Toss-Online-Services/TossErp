@using Catalog.Domain.DTOs
@using Catalog.Domain.Services
@inject ICartService CartService
@inject NavigationManager NavigationManager

<div class="cart-container">
    <div class="cart-header">
        <h2>Shopping Cart</h2>
        <span class="item-count">@ItemCount items</span>
    </div>

    @if (CartItems?.Any() == true)
    {
        <div class="cart-items">
            @foreach (var item in CartItems)
            {
                <div class="cart-item">
                    <img src="@item.CatalogItem?.PictureUri" alt="@item.CatalogItem?.Name" />
                    <div class="item-details">
                        <h3>@item.CatalogItem?.Name</h3>
                        <p class="price">@item.UnitPrice @item.Currency</p>
                        <div class="quantity-controls">
                            <button @onclick="() => UpdateQuantity(item.Id, item.Quantity - 1)" 
                                    disabled="@(item.Quantity <= 1)">-</button>
                            <span>@item.Quantity</span>
                            <button @onclick="() => UpdateQuantity(item.Id, item.Quantity + 1)"
                                    disabled="@(item.Quantity >= item.CatalogItem?.AvailableStock)">+</button>
                        </div>
                    </div>
                    <div class="item-total">
                        <p>@((item.UnitPrice * item.Quantity).ToString("C"))</p>
                        <button class="remove-button" @onclick="() => RemoveItem(item.Id)">Remove</button>
                    </div>
                </div>
            }
        </div>

        <div class="cart-summary">
            <div class="subtotal">
                <span>Subtotal:</span>
                <span>@CartTotal.ToString("C")</span>
            </div>
            <div class="actions">
                <button class="clear-cart" @onclick="ClearCart">Clear Cart</button>
                <button class="checkout" @onclick="ProceedToCheckout">Proceed to Checkout</button>
            </div>
        </div>
    }
    else
    {
        <div class="empty-cart">
            <p>Your cart is empty</p>
            <button @onclick="ContinueShopping">Continue Shopping</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    private IEnumerable<CartItemDto>? CartItems { get; set; }
    private decimal CartTotal { get; set; }
    private int ItemCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadCart();
        }
    }

    private async Task LoadCart()
    {
        CartItems = await CartService.GetCartItemsAsync(UserId);
        CartTotal = await CartService.GetCartTotalAsync(UserId);
        ItemCount = await CartService.GetCartItemCountAsync(UserId);
    }

    private async Task UpdateQuantity(int cartItemId, int newQuantity)
    {
        if (newQuantity < 1) return;

        await CartService.UpdateCartItemQuantityAsync(UserId, cartItemId, newQuantity);
        await LoadCart();
    }

    private async Task RemoveItem(int cartItemId)
    {
        await CartService.RemoveFromCartAsync(UserId, cartItemId);
        await LoadCart();
    }

    private async Task ClearCart()
    {
        await CartService.ClearCartAsync(UserId);
        await LoadCart();
    }

    private void ProceedToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private void ContinueShopping()
    {
        NavigationManager.NavigateTo("/catalog");
    }
} 