@page "/suppliers"
@using TossErp.Shared.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Suppliers Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Suppliers Management</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog">
            Add New Supplier
        </MudButton>
    </MudPaper>

    <MudTable Items="@suppliers" Dense="true" Hover="true" Loading="@loading" 
               Filter="new Func<SupplierDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Suppliers</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" 
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Contact Person</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Contact Person">@context.ContactPerson</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" Size="Size.Small">
                    @(context.IsActive ? "Active" : "Inactive")
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                              Color="Color.Primary" 
                              OnClick="@(() => OpenEditDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                              Color="Color.Error" 
                              OnClick="@(() => DeleteSupplier(context.Id))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="dialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(editingSupplier?.Id == 0 ? "Add Supplier" : "Edit Supplier")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField @bind-Value="editingSupplier.Name" 
                         Label="Supplier Name" 
                         Required="true" 
                         RequiredError="Supplier name is required!" />
            <MudTextField @bind-Value="editingSupplier.ContactPerson" 
                         Label="Contact Person" 
                         Required="true" 
                         RequiredError="Contact person is required!" />
            <MudTextField @bind-Value="editingSupplier.Email" 
                         Label="Email" 
                         Required="true" 
                         RequiredError="Email is required!" />
            <MudTextField @bind-Value="editingSupplier.Phone" 
                         Label="Phone Number" />
            <MudTextField @bind-Value="editingSupplier.Address" 
                         Label="Address" 
                         Lines="3" />
            <MudTextField @bind-Value="editingSupplier.Website" 
                         Label="Website" />
            <MudCheckBox T="bool" @bind-Checked="editingSupplier.IsActive" 
                        Label="Active Supplier" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveSupplier">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<SupplierDto> suppliers = new();
    private bool loading = true;
    private string searchString = "";
    
    private bool dialogVisible = false;
    private SupplierDto editingSupplier = new();
    private MudForm form;
    private bool success;
    
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliers();
    }

    private async Task LoadSuppliers()
    {
        try
        {
            loading = true;
            // For now, using mock data - replace with actual API call
            suppliers = new List<SupplierDto>
            {
                new() { Id = 1, Name = "Tech Solutions Inc.", ContactPerson = "John Smith", Email = "john@techsolutions.com", Phone = "+1-555-0123", Address = "123 Tech Street, Silicon Valley, CA", Website = "https://www.techsolutions.com", IsActive = true },
                new() { Id = 2, Name = "Global Electronics", ContactPerson = "Sarah Johnson", Email = "sarah@globalelec.com", Phone = "+1-555-0456", Address = "456 Electronics Ave, New York, NY", Website = "https://www.globalelec.com", IsActive = true },
                new() { Id = 3, Name = "Fashion Forward Ltd.", ContactPerson = "Mike Davis", Email = "mike@fashionforward.com", Phone = "+1-555-0789", Address = "789 Fashion Blvd, Los Angeles, CA", Website = "https://www.fashionforward.com", IsActive = true },
                new() { Id = 4, Name = "Home & Garden Supply", ContactPerson = "Lisa Wilson", Email = "lisa@homegarden.com", Phone = "+1-555-0321", Address = "321 Garden Road, Chicago, IL", Website = "https://www.homegarden.com", IsActive = false },
                new() { Id = 5, Name = "Sports Equipment Co.", ContactPerson = "David Brown", Email = "david@sportsequipment.com", Phone = "+1-555-0654", Address = "654 Sports Way, Miami, FL", Website = "https://www.sportsequipment.com", IsActive = true },
                new() { Id = 6, Name = "Office Supplies Plus", ContactPerson = "Jennifer Lee", Email = "jennifer@officesupplies.com", Phone = "+1-555-0987", Address = "987 Office Drive, Seattle, WA", Website = "https://www.officesupplies.com", IsActive = true }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading suppliers: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private bool FilterFunc(SupplierDto supplier)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        return supplier.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               supplier.ContactPerson.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               supplier.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               supplier.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void OpenCreateDialog()
    {
        editingSupplier = new SupplierDto { Id = 0, IsActive = true };
        dialogVisible = true;
    }

    private void OpenEditDialog(SupplierDto supplier)
    {
        editingSupplier = new SupplierDto
        {
            Id = supplier.Id,
            Name = supplier.Name,
            ContactPerson = supplier.ContactPerson,
            Email = supplier.Email,
            Phone = supplier.Phone,
            Address = supplier.Address,
            Website = supplier.Website,
            IsActive = supplier.IsActive
        };
        dialogVisible = true;
    }

    private async Task SaveSupplier()
    {
        try
        {
            if (editingSupplier.Id == 0)
            {
                // Create new supplier
                editingSupplier.Id = suppliers.Max(s => s.Id) + 1;
                suppliers.Add(editingSupplier);
                Snackbar.Add("Supplier added successfully", Severity.Success);
            }
            else
            {
                // Update existing supplier
                var existingSupplier = suppliers.FirstOrDefault(s => s.Id == editingSupplier.Id);
                if (existingSupplier != null)
                {
                    existingSupplier.Name = editingSupplier.Name;
                    existingSupplier.ContactPerson = editingSupplier.ContactPerson;
                    existingSupplier.Email = editingSupplier.Email;
                    existingSupplier.Phone = editingSupplier.Phone;
                    existingSupplier.Address = editingSupplier.Address;
                    existingSupplier.Website = editingSupplier.Website;
                    existingSupplier.IsActive = editingSupplier.IsActive;
                }
                Snackbar.Add("Supplier updated successfully", Severity.Success);
            }
            
            dialogVisible = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving supplier: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteSupplier(int supplierId)
    {
        try
        {
            var supplier = suppliers.FirstOrDefault(s => s.Id == supplierId);
            if (supplier != null)
            {
                suppliers.Remove(supplier);
                Snackbar.Add("Supplier deleted successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting supplier: {ex.Message}", Severity.Error);
        }
    }

    private void CancelDialog()
    {
        dialogVisible = false;
    }
} 