@page "/register"
@using TossErp.WebApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Register - TossErp</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Class="text-center">Create Account</MudText>
                <MudText Typo="Typo.body2" Class="text-center mt-2">Join TossErp and start managing your business</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                
                <MudTextField @bind-Value="registerModel.FullName"
                             Label="Full Name"
                             Required="true"
                             RequiredError="Full name is required"
                             Variant="Variant.Outlined"
                             Class="mb-4" />
                
                <MudTextField @bind-Value="registerModel.Username"
                             Label="Username"
                             Required="true"
                             RequiredError="Username is required"
                             Variant="Variant.Outlined"
                             Class="mb-4" />
                
                <MudTextField @bind-Value="registerModel.Email"
                             Label="Email"
                             Required="true"
                             RequiredError="Email is required"
                             Variant="Variant.Outlined"
                             InputType="InputType.Email"
                             Class="mb-4" />
                
                <MudTextField @bind-Value="registerModel.Password"
                             Label="Password"
                             Required="true"
                             RequiredError="Password is required"
                             Variant="Variant.Outlined"
                             InputType="InputType.Password"
                             Class="mb-4" />
                
                <MudTextField @bind-Value="registerModel.ConfirmPassword"
                             Label="Confirm Password"
                             Required="true"
                             RequiredError="Please confirm your password"
                             Variant="Variant.Outlined"
                             InputType="InputType.Password"
                             Class="mb-4" />
                
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           Disabled="@isLoading"
                           Class="mt-4">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Creating account...</span>
                    }
                    else
                    {
                        <span>Create Account</span>
                    }
                </MudButton>
            </EditForm>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">
                    @errorMessage
                </MudAlert>
            }
        </MudCardContent>
        
        <MudCardActions Class="justify-center">
            <MudText Typo="Typo.body2">
                Already have an account? 
                <MudLink Href="/login" Color="Color.Primary">Login here</MudLink>
            </MudText>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var success = await AuthService.RegisterAsync(
                registerModel.Username, 
                registerModel.Email, 
                registerModel.Password, 
                registerModel.FullName);
            
            if (success)
            {
                Snackbar.Add("Account created successfully! Please login.", Severity.Success);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to create account. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        public string FullName { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
} 