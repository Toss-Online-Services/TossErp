@page "/stock"
@using TossErp.Shared.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Stock Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Stock Overview Cards -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Color="Color.Primary" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Total Items</MudText>
                <MudText Typo="Typo.h5">@totalItems</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">+@newItems this month</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingDown" Color="Color.Error" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Low Stock Items</MudText>
                <MudText Typo="Typo.h5">@lowStockItems</MudText>
                <MudText Typo="Typo.caption" Color="Color.Error">@lowStockItems need immediate attention</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Color="Color.Info" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.Pending" Color="Color.Info" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Pending Orders</MudText>
                <MudText Typo="Typo.h5">@pendingOrders</MudText>
                <MudText Typo="Typo.caption">Expected within @expectedDays days</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Stock Value</MudText>
                <MudText Typo="Typo.h5">R @totalValue.ToString("N2")</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">+@growthPercent% from last month</MudText>
            </MudPaper>
        </MudItem>

        <!-- Stock Management Table -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Stock Management</MudText>
                    <div class="d-flex gap-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.Add"
                                 OnClick="@(() => OpenStockDialog())">
                            Add Stock
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.FileDownload">
                            Export
                        </MudButton>
                    </div>
                </div>

                <MudTable Items="@stockItems" Dense="false" Hover="true" Bordered="false" Striped="true"
                          Filter="new Func<StockItemDto,bool>(FilterFunc)" @bind-SelectedItem="_selectedItem">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search by item name or SKU"
                                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                    IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>SKU</MudTh>
                        <MudTh>Item Name</MudTh>
                        <MudTh>Category</MudTh>
                        <MudTh>In Stock</MudTh>
                        <MudTh>Min Level</MudTh>
                        <MudTh>Unit Price</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="SKU">@($"{context.Category.Substring(0, Math.Min(3, context.Category.Length)).ToUpper()}-{context.Id}")</MudTd>
                        <MudTd DataLabel="Item Name">@context.ItemName</MudTd>
                        <MudTd DataLabel="Category">@context.Category</MudTd>
                        <MudTd DataLabel="In Stock">
                            <MudText Color="@(context.CurrentStock <= context.MinStockLevel ? Color.Error : Color.Default)">
                                @context.CurrentStock
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Min Level">@context.MinStockLevel</MudTd>
                        <MudTd DataLabel="Unit Price">R @context.UnitPrice.ToString("N2")</MudTd>
                        <MudTd DataLabel="Status">
                            @{
                                var status = context.CurrentStock == 0 ? "Out of Stock" : 
                                           context.CurrentStock <= context.MinStockLevel ? "Low Stock" : "In Stock";
                                var statusColor = status switch
                                {
                                    "Out of Stock" => Color.Error,
                                    "Low Stock" => Color.Warning,
                                    _ => Color.Success
                                };
                            }
                            <MudChip T="string" Color="@statusColor" Size="Size.Small">
                                @status
                            </MudChip>
                        </MudTd>
                        <MudTd>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem Icon="@Icons.Material.Filled.Edit" 
                                           OnClick="@(() => OpenStockDialog(context))">
                                    Edit
                                </MudMenuItem>
                                <MudMenuItem Icon="@Icons.Material.Filled.History"
                                           OnClick="@(() => ViewHistory(context))">
                                    View History
                                </MudMenuItem>
                                <MudMenuItem Icon="@Icons.Material.Filled.QrCode"
                                           OnClick="@(() => ViewHistory(context))">
                                    Generate Label
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Stock Movement Chart -->
        <MudItem xs="12" md="8">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Stock Movement Trends</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@stockTrendSeries" 
                         XAxisLabels="@stockTrendLabels" Width="100%" Height="300px"/>
            </MudPaper>
        </MudItem>

        <!-- Low Stock Alerts -->
        <MudItem xs="12" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Low Stock Alerts</MudText>
                <MudList Dense="true" T="string">
                    @foreach (var alert in lowStockAlerts)
                    {
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText>@alert.ItemName</MudText>
                                    <MudText Typo="Typo.caption">
                                        Current: @alert.CurrentStock | Minimum: @alert.MinLevel
                                    </MudText>
                                </div>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                         Size="Size.Small"
                                         OnClick="@(() => CreatePurchaseOrder(alert))">
                                    Order Now
                                </MudButton>
                            </div>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>




@code {
    private List<StockItemDto> stockItems = new();
    private List<string> categories = new();
    private string _searchString = "";
    private string? selectedCategory = string.Empty;
    private StockItemDto _selectedItem = new();
    
    // Remove unused fields: adjustmentDialogVisible, adjustmentReason, form, success

    // Summary statistics
    private int totalItems => stockItems.Count;
    private int lowStockItems => stockItems.Count(s => s.CurrentStock > 0 && s.CurrentStock <= s.MinStockLevel);
    private int outOfStockItems => stockItems.Count(s => s.CurrentStock == 0);
    private decimal totalValue => stockItems.Sum(s => s.CurrentStock * s.UnitPrice);
    private int newItems => stockItems.Count(s => s.CurrentStock > s.MinStockLevel);
    private int pendingOrders => 8; // Assuming a default value
    private int expectedDays => 7; // Assuming a default value
    private decimal growthPercent => 15; // Assuming a default value

    private List<StockItemDto> _stockItems = new();
    private List<ChartSeries> stockTrendSeries = new();
    private string[] stockTrendLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    private List<LowStockAlertDto> lowStockAlerts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStockData();
    }

    private async Task LoadStockData()
    {
        await Task.Delay(100);
        try
        {
            // For now, using mock data - replace with actual API call
            stockItems = new List<StockItemDto>
            {
                new() { Id = 1, ItemName = "iPhone 15 Pro", Category = "Electronics", CurrentStock = 25, MinStockLevel = 10, UnitPrice = 999.99m },
                new() { Id = 2, ItemName = "Samsung Galaxy S24", Category = "Electronics", CurrentStock = 15, MinStockLevel = 8, UnitPrice = 899.99m },
                new() { Id = 3, ItemName = "Nike Air Max", Category = "Footwear", CurrentStock = 8, MinStockLevel = 15, UnitPrice = 129.99m },
                new() { Id = 4, ItemName = "Adidas Ultraboost", Category = "Footwear", CurrentStock = 0, MinStockLevel = 12, UnitPrice = 179.99m },
                new() { Id = 5, ItemName = "MacBook Pro 16", Category = "Electronics", CurrentStock = 5, MinStockLevel = 5, UnitPrice = 2499.99m },
                new() { Id = 6, ItemName = "Dell XPS 13", Category = "Electronics", CurrentStock = 12, MinStockLevel = 8, UnitPrice = 1299.99m },
                new() { Id = 7, ItemName = "Sony WH-1000XM5", Category = "Electronics", CurrentStock = 20, MinStockLevel = 10, UnitPrice = 349.99m },
                new() { Id = 8, ItemName = "KitchenAid Mixer", Category = "Home & Garden", CurrentStock = 3, MinStockLevel = 5, UnitPrice = 399.99m }
            };
            
            categories = stockItems.Select(s => s.Category).Distinct().ToList();
            _stockItems = stockItems.Select(s => new StockItemDto
            {
                Id = s.Id,
                ItemName = s.ItemName,
                Category = s.Category,
                CurrentStock = s.CurrentStock,
                MinStockLevel = s.MinStockLevel,
                UnitPrice = s.UnitPrice
            }).ToList();
            stockTrendSeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Stock Level", Data = new double[] { 100, 95, 85, 92, 88, 95, 91, 85, 87, 89, 92, 95 } }
            };
            lowStockAlerts = new List<LowStockAlertDto>
            {
                new() { Id = 1, Sku = "ELE-001", ItemName = "Samsung Galaxy S21", CurrentStock = 5, MinLevel = 10, AlertDate = DateTime.Now.AddDays(-2) },
                new() { Id = 2, Sku = "BEV-001", ItemName = "Coca-Cola 2L", CurrentStock = 8, MinLevel = 50, AlertDate = DateTime.Now.AddDays(-1) },
                new() { Id = 3, Sku = "APP-001", ItemName = "Nespresso Machine", CurrentStock = 0, MinLevel = 5, AlertDate = DateTime.Now }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading stock data: {ex.Message}", Severity.Error);
        }
    }

    private bool FilterFunc(StockItemDto item)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            if (!item.ItemName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return false;
        }
        
        if (!string.IsNullOrEmpty(selectedCategory) && item.Category != selectedCategory)
            return false;
        
        return true;
    }

    private void OpenStockDialog(StockItemDto? item = null)
    {
        _selectedItem = item ?? new();
        // TODO: Open stock dialog
        Snackbar.Add("Stock dialog feature coming soon", Severity.Info);
    }

    private async Task SaveStockAdjustment()
    {
        await Task.Delay(100);
        try
        {
            Snackbar.Add("Stock adjustment saved successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving stock adjustment: {ex.Message}", Severity.Error);
        }
    }

    private void ViewHistory(StockItemDto item)
    {
        // TODO: Implement stock history view
        Snackbar.Add("Stock history feature coming soon", Severity.Info);
    }

    private void ExportStockReport()
    {
        // TODO: Implement export functionality
        Snackbar.Add("Export feature coming soon", Severity.Info);
    }

    private void CreatePurchaseOrder(LowStockAlertDto alert)
    {
        // In a real application, this would create a purchase order
        Snackbar.Add($"Purchase order created for {alert.ItemName}", Severity.Success);
    }
}

