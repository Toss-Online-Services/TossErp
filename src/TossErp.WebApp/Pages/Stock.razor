@page "/stock"
@using TossErp.Application.DTOs
@using TossErp.Application.Services
@inject IProductService ProductService
@inject ISnackbar Snackbar

<PageTitle>TOSS ERP III - Stock Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <!-- Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
            <MudText Typo="Typo.h4">Stock Management</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchTerm" 
                         Label="Search Products..." 
                         Variant="Variant.Outlined" 
                         Adornment="Adornment.Start" 
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         Class="flex-grow-1" />
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="@(() => _showAdjustDialog = true)"
                      StartIcon="@Icons.Material.Filled.Add">
                Stock Adjustment
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Stock Summary Cards -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Success" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.Inventory" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_totalProducts</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Products</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Warning" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.Warning" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_lowStockItems</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Low Stock Items</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Error" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.Block" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_outOfStockItems</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Out of Stock</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Info" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_totalValue.ToString("C")</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Stock Value</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Stock Data Grid -->
    <MudPaper Class="pa-4" Elevation="1">
        <MudDataGrid T="ProductDto" Items="@_filteredProducts" 
                     Dense="true" Hover="true" Striped="true"
                     Filterable="true" SortMode="SortMode.Multiple"
                     Loading="@_isLoading"
                     FixedHeader="true"
                     Height="600px">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Product Name" />
                <PropertyColumn Property="x => x.SKU" Title="SKU" />
                <PropertyColumn Property="x => x.Category" Title="Category" />
                <PropertyColumn Property="x => x.StockQuantity" Title="Current Stock" />
                <PropertyColumn Property="x => x.MinimumStockLevel" Title="Reorder Level" />
                <PropertyColumn Property="x => x.Price" Title="Unit Price" Format="C" />
                <TemplateColumn Title="Stock Value" Context="item">
                    <MudText Typo="Typo.body2">@((item.StockQuantity * item.Price).ToString("C"))</MudText>
                </TemplateColumn>
                <TemplateColumn Title="Status" Context="item">
                    <MudChip Color="@GetStockStatusColor(item)" Size="Size.Small">
                        @GetStockStatusText(item)
                    </MudChip>
                </TemplateColumn>
                <TemplateColumn Title="Actions" Context="item">
                    <MudStack Row="true" Spacing="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                     Size="Size.Small" 
                                     Color="Color.Success"
                                     OnClick="@(() => AdjustStock(item, true))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                     Size="Size.Small" 
                                     Color="Color.Warning"
                                     OnClick="@(() => AdjustStock(item, false))" />
                        <MudIconButton Icon="@Icons.Material.Filled.History" 
                                     Size="Size.Small" 
                                     Color="Color.Info"
                                     OnClick="@(() => ViewStockHistory(item))" />
                    </MudStack>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

<!-- Stock Adjustment Dialog -->
<MudDialog @bind-IsVisible="_showAdjustDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Stock Adjustment</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="_isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="ProductDto" @bind-Value="_selectedProduct" 
                              Label="Select Product" 
                              Required="true"
                              Variant="Variant.Outlined">
                        @foreach (var product in _products)
                        {
                            <MudSelectItem Value="@product">@product.Name (@product.SKU)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="StockAdjustmentType" @bind-Value="_adjustmentType" 
                              Label="Adjustment Type" 
                              Required="true"
                              Variant="Variant.Outlined">
                        <MudSelectItem Value="@StockAdjustmentType.Add">Add Stock</MudSelectItem>
                        <MudSelectItem Value="@StockAdjustmentType.Remove">Remove Stock</MudSelectItem>
                        <MudSelectItem Value="@StockAdjustmentType.Set">Set Stock Level</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField T="int" @bind-Value="_adjustmentQuantity" 
                                    Label="Quantity" 
                                    Required="true"
                                    Variant="Variant.Outlined"
                                    Min="0" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_adjustmentReason" 
                                 Label="Reason" 
                                 Required="true"
                                 Variant="Variant.Outlined" />
                </MudItem>
                @if (_selectedProduct != null)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info">
                            Current Stock: @_selectedProduct.StockQuantity | 
                            Reorder Level: @_selectedProduct.MinimumStockLevel
                        </MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showAdjustDialog = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="@ProcessStockAdjustment"
                  Disabled="@(!_isValid || _selectedProduct == null)">
            Process Adjustment
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- Stock History Dialog -->
<MudDialog @bind-IsVisible="_showHistoryDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Stock History - @_selectedProduct?.Name</MudText>
    </TitleContent>
    <DialogContent>
        @if (_selectedProduct != null)
        {
            <MudDataGrid T="StockHistoryDto" Items="@_stockHistory" 
                         Dense="true" Hover="true" Striped="true"
                         Filterable="true" SortMode="SortMode.Multiple">
                <Columns>
                    <PropertyColumn Property="x => x.Date" Title="Date" Format="MMM dd, yyyy HH:mm" />
                    <PropertyColumn Property="x => x.Type" Title="Type" />
                    <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
                    <PropertyColumn Property="x => x.PreviousStock" Title="Previous Stock" />
                    <PropertyColumn Property="x => x.NewStock" Title="New Stock" />
                    <PropertyColumn Property="x => x.Reason" Title="Reason" />
                    <PropertyColumn Property="x => x.User" Title="User" />
                </Columns>
            </MudDataGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showHistoryDialog = false)">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string _searchTerm = string.Empty;
    private List<ProductDto> _products = new();
    private List<ProductDto> _filteredProducts = new();
    private List<StockHistoryDto> _stockHistory = new();
    private bool _isLoading = false;
    private bool _showAdjustDialog = false;
    private bool _showHistoryDialog = false;
    private bool _isValid = false;
    private MudForm _form = new();
    private ProductDto? _selectedProduct;
    private StockAdjustmentType _adjustmentType = StockAdjustmentType.Add;
    private int _adjustmentQuantity = 0;
    private string _adjustmentReason = string.Empty;

    private int _totalProducts => _products.Count;
    private int _lowStockItems => _products.Count(p => p.StockQuantity > 0 && p.StockQuantity <= p.MinimumStockLevel);
    private int _outOfStockItems => _products.Count(p => p.StockQuantity <= 0);
    private decimal _totalValue => _products.Sum(p => p.StockQuantity * p.Price);

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    protected override void OnParametersSet()
    {
        FilterProducts();
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        try
        {
            _products = (await ProductService.GetAllAsync()).ToList();
            FilterProducts();
        }
        catch (Exception)
        {
            Snackbar.Add("Error loading products", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredProducts = _products;
        }
        else
        {
            _filteredProducts = _products.Where(p => 
                p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.SKU.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Category.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void AdjustStock(ProductDto product, bool isAdd)
    {
        _selectedProduct = product;
        _adjustmentType = isAdd ? StockAdjustmentType.Add : StockAdjustmentType.Remove;
        _adjustmentQuantity = 0;
        _adjustmentReason = string.Empty;
        _showAdjustDialog = true;
    }

    private async Task ProcessStockAdjustment()
    {
        if (!_isValid || _selectedProduct == null) return;

        try
        {
            var adjustment = new StockAdjustmentDto
            {
                ProductId = _selectedProduct.Id,
                Type = _adjustmentType,
                Quantity = _adjustmentQuantity,
                Reason = _adjustmentReason
            };

            await ProductService.UpdateStockAsync(_selectedProduct.Id, _adjustmentQuantity, _adjustmentType.ToString(), _adjustmentReason);
            Snackbar.Add("Stock adjusted successfully", Severity.Success);
            _showAdjustDialog = false;
            await LoadProducts();
        }
        catch (Exception)
        {
            Snackbar.Add("Error adjusting stock", Severity.Error);
        }
    }

    private async Task ViewStockHistory(ProductDto product)
    {
        _selectedProduct = product;
        try
        {
            // TODO: Implement stock history loading
            _stockHistory = new List<StockHistoryDto>(); // Placeholder
            _showHistoryDialog = true;
        }
        catch (Exception)
        {
            Snackbar.Add("Error loading stock history", Severity.Error);
        }
    }

    private Color GetStockStatusColor(ProductDto product)
    {
        if (product.StockQuantity <= 0) return Color.Error;
        if (product.StockQuantity <= product.MinimumStockLevel) return Color.Warning;
        return Color.Success;
    }

    private string GetStockStatusText(ProductDto product)
    {
        if (product.StockQuantity <= 0) return "Out of Stock";
        if (product.StockQuantity <= product.MinimumStockLevel) return "Low Stock";
        return "In Stock";
    }

    private enum StockAdjustmentType
    {
        Add,
        Remove,
        Set
    }
}

