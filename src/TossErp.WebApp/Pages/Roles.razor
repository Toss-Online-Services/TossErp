@page "/roles"
@using TossErp.Shared.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

#pragma warning disable CS8602

<PageTitle>Roles Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Roles Management</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => OpenRoleDialog())">
            Create New Role
        </MudButton>
    </MudPaper>

    <MudTable Items="@roles" Dense="true" Hover="true" Loading="@loading" 
               Filter="new Func<RoleDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Roles</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" 
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Permissions</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
#pragma warning disable CS8602
            @if (context == null)
            {
                <MudTd colspan="4"></MudTd>
            }
            else
            {
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Permissions">
                    <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="ma-1">
                        @context.Permissions.Count permissions
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => OpenRoleDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                  Color="Color.Error" 
                                  OnClick="@(() => DeleteRole(context.Id))" />
                </MudTd>
            }
#pragma warning restore CS8602
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private List<RoleDto> roles = new();
    private bool loading = true;
    private string searchString = "";
    
    private List<string> availablePermissions = new()
    {
        "Users.View", "Users.Create", "Users.Edit", "Users.Delete",
        "Roles.View", "Roles.Create", "Roles.Edit", "Roles.Delete",
        "Items.View", "Items.Create", "Items.Edit", "Items.Delete",
        "Inventory.View", "Inventory.Create", "Inventory.Edit", "Inventory.Delete",
        "POS.View", "POS.Create", "POS.Edit", "POS.Delete",
        "Reports.View", "Reports.Create", "Reports.Edit", "Reports.Delete",
        "Settings.View", "Settings.Create", "Settings.Edit", "Settings.Delete"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        try
        {
            loading = true;
            // Simulate API call delay
            await Task.Delay(100);
            
            // For now, using mock data - replace with actual API call
            roles = new List<RoleDto>
            {
                new() { Id = 1, Name = "Administrator", Description = "Full system access", Permissions = availablePermissions },
                new() { Id = 2, Name = "Manager", Description = "Management access", Permissions = new List<string> { "Users.View", "Items.View", "Inventory.View", "POS.View", "Reports.View" } },
                new() { Id = 3, Name = "Cashier", Description = "POS access only", Permissions = new List<string> { "POS.View", "POS.Create" } },
                new() { Id = 4, Name = "Inventory Clerk", Description = "Inventory management", Permissions = new List<string> { "Items.View", "Items.Edit", "Inventory.View", "Inventory.Edit" } }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading roles: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private bool FilterFunc(RoleDto role)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        return role.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               role.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenRoleDialog(RoleDto? role = null)
    {
        await Task.Delay(100);
        var parameters = new DialogParameters
        {
            ["Role"] = role != null ? new RoleDto
            {
                Id = role.Id,
                Name = role.Name,
                Description = role.Description,
                Permissions = new List<string>(role.Permissions)
            } : new RoleDto { Id = 0, Permissions = new List<string>() },
            ["AvailablePermissions"] = availablePermissions
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<RoleDialog>(role == null ? "Create Role" : "Edit Role", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is RoleDto updatedRole)
        {
            if (updatedRole.Id == 0)
            {
                updatedRole.Id = roles.Any() ? roles.Max(r => r.Id) + 1 : 1;
                roles.Add(updatedRole);
                Snackbar.Add("Role created successfully", Severity.Success);
            }
            else
            {
                var existingRole = roles.FirstOrDefault(r => r.Id == updatedRole.Id);
                if (existingRole == null)
                {
                    Snackbar.Add("Role not found for update", Severity.Error);
                    return;
                }
                existingRole!.Name = updatedRole.Name;
                existingRole!.Description = updatedRole.Description;
                existingRole!.Permissions = updatedRole.Permissions;
                Snackbar.Add("Role updated successfully", Severity.Success);
            }
        }
    }

    private async Task DeleteRole(int roleId)
    {
        await Task.Delay(100);
        try
        {
            var role = roles.FirstOrDefault(r => r.Id == roleId);
            if (role == null)
            {
                Snackbar.Add("Role not found for deletion", Severity.Error);
                return;
            }
            roles.Remove(role!);
            Snackbar.Add("Role deleted successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting role: {ex.Message}", Severity.Error);
        }
    }
}
