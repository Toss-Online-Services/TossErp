@page "/pos"
@using TossErp.Application.DTOs
@using TossErp.Application.Services
@inject IProductService ProductService
@inject ISaleService SaleService
@inject ISnackbar Snackbar

<PageTitle>TOSS ERP III - Point of Sale</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-4">
    <MudGrid>
        <!-- Product Selection Area -->
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3" Class="mb-4">
                    <MudText Typo="Typo.h5">Point of Sale</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchTerm" 
                                 Label="Search Products..." 
                                 Variant="Variant.Outlined" 
                                 Adornment="Adornment.Start" 
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 OnKeyPress="@HandleSearchKeyPress"
                                 Class="flex-grow-1" />
                </MudStack>

                <!-- Product Grid -->
                <MudGrid>
                    @foreach (var product in _filteredProducts)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Elevation="2" Class="ma-2" Style="cursor: pointer;" OnClick="@(() => AddToCart(product))">
                                <MudCardContent>
                                    <MudStack AlignItems="AlignItems.Center" Spacing="2">
                                        <MudAvatar Size="Size.Large" Color="Color.Primary">
                                            <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" />
                                        </MudAvatar>
                                        <MudText Typo="Typo.h6" Class="text-center">@product.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center">
                                            @product.Description
                                        </MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                            @product.Price.ToString("C")
                                        </MudText>
                                        <MudChip T="object" Color="@(product.StockQuantity > 0 ? Color.Success : Color.Error)" Size="Size.Small">
                                            @(product.StockQuantity > 0 ? $"In Stock: {product.StockQuantity}" : "Out of Stock")
                                        </MudChip>
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>

                @if (!_filteredProducts.Any())
                {
                    <MudPaper Class="pa-8 text-center" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">No products found</MudText>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>

        <!-- Shopping Cart -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 100%;">
                <MudText Typo="Typo.h5" Class="mb-4">Shopping Cart</MudText>

                @if (!_cartItems.Any())
                {
                    <MudPaper Class="pa-8 text-center" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">Cart is empty</MudText>
                    </MudPaper>
                }
                else
                {
                    <!-- Cart Items -->
                    <MudList T="object" Dense="true" Class="mb-4" Style="max-height: 400px; overflow-y: auto;">
                        @foreach (var item in _cartItems)
                        {
                            <MudListItem T="object">
                                <MudCard Elevation="1" Class="mb-2">
                                    <MudCardContent>
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudStack Class="flex-grow-1">
                                                <MudText Typo="Typo.body2">@item.Product.Name</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    @item.Product.Price.ToString("C") each
                                                </MudText>
                                            </MudStack>
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                                             Size="Size.Small" 
                                                             OnClick="@(() => DecreaseQuantity(item))" />
                                                <MudText Typo="Typo.body1" Class="mx-2">@item.Quantity</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                             Size="Size.Small" 
                                                             OnClick="@(() => IncreaseQuantity(item))" />
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                             Size="Size.Small" 
                                                             Color="Color.Error"
                                                             OnClick="@(() => RemoveFromCart(item))" />
                                            </MudStack>
                                        </MudStack>
                                    </MudCardContent>
                                </MudCard>
                            </MudListItem>
                        }
                    </MudList>

                    <!-- Cart Summary -->
                    <MudDivider Class="mb-4" />
                    <MudStack Spacing="2" Class="mb-4">
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body1">Subtotal:</MudText>
                            <MudText Typo="Typo.body1">@_subtotal.ToString("C")</MudText>
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body1">Tax (15%):</MudText>
                            <MudText Typo="Typo.body1">@_tax.ToString("C")</MudText>
                        </MudStack>
                        <MudDivider />
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h6">Total:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Primary">@_total.ToString("C")</MudText>
                        </MudStack>
                    </MudStack>

                    <!-- Payment Options -->
                    <MudStack Spacing="2" Class="mb-4">
                        <MudText Typo="Typo.subtitle2">Payment Method:</MudText>
                        <MudRadioGroup T="PaymentMethod" @bind-SelectedOption="_selectedPaymentMethod">
                            <MudRadio T="PaymentMethod" Option="@PaymentMethod.Cash" Color="Color.Primary">Cash</MudRadio>
                            <MudRadio T="PaymentMethod" Option="@PaymentMethod.Card" Color="Color.Primary">Card</MudRadio>
                            <MudRadio T="PaymentMethod" Option="@PaymentMethod.MobileMoney" Color="Color.Primary">Mobile Money</MudRadio>
                        </MudRadioGroup>
                    </MudStack>

                    <!-- Action Buttons -->
                    <MudStack Spacing="2">
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  FullWidth="true"
                                  OnClick="@ProcessSale"
                                  Disabled="@(!_cartItems.Any())">
                            <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-2" />
                            Complete Sale
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Secondary" 
                                  FullWidth="true"
                                  OnClick="@ClearCart">
                            <MudIcon Icon="@Icons.Material.Filled.Clear" Class="mr-2" />
                            Clear Cart
                        </MudButton>
                    </MudStack>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string _searchTerm = string.Empty;
    private List<ProductDto> _products = new();
    private List<ProductDto> _filteredProducts = new();
    private List<CartItem> _cartItems = new();
    private PaymentMethod _selectedPaymentMethod = PaymentMethod.Cash;

    private decimal _subtotal => _cartItems.Sum(item => item.Product.Price * item.Quantity);
    private decimal _tax => _subtotal * 0.15m;
    private decimal _total => _subtotal + _tax;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            _products = await ProductService.GetAllProductsAsync();
            _filteredProducts = _products;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading products", Severity.Error);
        }
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterProducts();
        }
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredProducts = _products;
        }
        else
        {
            _filteredProducts = _products.Where(p => 
                p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void AddToCart(ProductDto product)
    {
        if (product.StockQuantity <= 0)
        {
            Snackbar.Add("Product is out of stock", Severity.Warning);
            return;
        }

        var existingItem = _cartItems.FirstOrDefault(item => item.Product.Id == product.Id);
        if (existingItem != null)
        {
            if (existingItem.Quantity < product.StockQuantity)
            {
                existingItem.Quantity++;
            }
            else
            {
                Snackbar.Add("Cannot add more items - stock limit reached", Severity.Warning);
            }
        }
        else
        {
            _cartItems.Add(new CartItem { Product = product, Quantity = 1 });
        }
    }

    private void IncreaseQuantity(CartItem item)
    {
        if (item.Quantity < item.Product.StockQuantity)
        {
            item.Quantity++;
        }
        else
        {
            Snackbar.Add("Cannot add more items - stock limit reached", Severity.Warning);
        }
    }

    private void DecreaseQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
        }
        else
        {
            RemoveFromCart(item);
        }
    }

    private void RemoveFromCart(CartItem item)
    {
        _cartItems.Remove(item);
    }

    private void ClearCart()
    {
        _cartItems.Clear();
    }

    private async Task ProcessSale()
    {
        if (!_cartItems.Any())
        {
            Snackbar.Add("Cart is empty", Severity.Warning);
            return;
        }

        try
        {
            var saleDto = new CreateSaleDto
            {
                Items = _cartItems.Select(item => new SaleItemDto
                {
                    ProductId = item.Product.Id,
                    Quantity = item.Quantity,
                    UnitPrice = item.Product.Price
                }).ToList(),
                PaymentMethod = _selectedPaymentMethod,
                Total = _total
            };

            var result = await SaleService.CreateSaleAsync(saleDto);
            
            if (result != null)
            {
                Snackbar.Add($"Sale completed successfully! Sale #: {result.Id}", Severity.Success);
                ClearCart();
                await LoadProducts(); // Refresh stock levels
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error processing sale", Severity.Error);
        }
    }

    private class CartItem
    {
        public ProductDto Product { get; set; } = new();
        public int Quantity { get; set; }
    }

    private enum PaymentMethod
    {
        Cash,
        Card,
        MobileMoney
    }
} 