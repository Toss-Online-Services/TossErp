<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto">
            <MudGrid>
                <!-- Order Statistics -->
                <MudItem xs="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" Size="Size.Large" />
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                        </div>
                        <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Total Orders</MudText>
                        <MudText Typo="Typo.h5">@_orderStats.TotalOrders</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Success">
                            +@_orderStats.OrdersThisMonth this month
                        </MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Large" />
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                        </div>
                        <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Total Spent</MudText>
                        <MudText Typo="Typo.h5">R @_orderStats.TotalSpent.ToString("N2")</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Success">
                            R @_orderStats.SpentThisMonth.ToString("N2") this month
                        </MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudIcon Icon="@Icons.Material.Filled.LocalOffer" Color="Color.Warning" Size="Size.Large" />
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                        </div>
                        <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Average Order</MudText>
                        <MudText Typo="Typo.h5">R @_orderStats.AverageOrder.ToString("N2")</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Success">
                            +5% from last month
                        </MudText>
                    </MudPaper>
                </MudItem>

                <!-- Order History -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Order History</MudText>
                    <MudTable Items="@_orderHistory" Dense="true" Hover="true" Bordered="false" Striped="true"
                             Filter="new Func<Order,bool>(FilterFunc)"
                             @bind-SelectedItem="_selectedOrder">
                        <ToolBarContent>
                            <MudTextField @bind-Value="_searchString" Placeholder="Search by order number or status"
                                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                        IconSize="Size.Medium" Class="mt-0" />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Order #</MudTh>
                            <MudTh>Date</MudTh>
                            <MudTh>Items</MudTh>
                            <MudTh>Total</MudTh>
                            <MudTh>Payment</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Order">@context.OrderNumber</MudTd>
                            <MudTd DataLabel="Date">@context.Date.ToString("dd MMM yyyy HH:mm")</MudTd>
                            <MudTd DataLabel="Items">@context.ItemCount items</MudTd>
                            <MudTd DataLabel="Total">R @context.Total.ToString("N2")</MudTd>
                            <MudTd DataLabel="Payment">
                                <MudChip T="string" Color="@context.PaymentMethodColor" Size="Size.Small">
                                    @context.PaymentMethod
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip T="string" Color="@context.StatusColor" Size="Size.Small">
                                    @context.Status
                                </MudChip>
                            </MudTd>
                            <MudTd>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem Icon="@Icons.Material.Filled.Receipt"
                                               OnClick="@(() => ViewOrderDetails(context))">
                                        View Details
                                    </MudMenuItem>
                                    <MudMenuItem Icon="@Icons.Material.Filled.LocalPrintshop"
                                               OnClick="@(() => PrintInvoice(context))">
                                        Print Invoice
                                    </MudMenuItem>
                                    @if (context.Status == "Completed")
                                    {
                                        <MudMenuItem Icon="@Icons.Material.Filled.AssignmentReturn"
                                                   OnClick="@(() => ProcessReturn(context))">
                                            Process Return
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudItem>

                <!-- Order Trends -->
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Order Trends</MudText>
                        <MudChart ChartType="ChartType.Line" ChartSeries="@_orderTrendSeries" 
                                 XAxisLabels="@_monthLabels" Width="100%" Height="300px"/>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                  StartIcon="@Icons.Material.Filled.FileDownload"
                  OnClick="ExportHistory">
            Export History
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string CustomerId { get; set; }
    
    private string _searchString = "";
    private Order _selectedOrder;
    
    private class OrderStats
    {
        public int TotalOrders { get; set; }
        public int OrdersThisMonth { get; set; }
        public decimal TotalSpent { get; set; }
        public decimal SpentThisMonth { get; set; }
        public decimal AverageOrder { get; set; }
    }
    
    private class Order
    {
        public string OrderNumber { get; set; }
        public DateTime Date { get; set; }
        public int ItemCount { get; set; }
        public decimal Total { get; set; }
        public string PaymentMethod { get; set; }
        public string Status { get; set; }
        
        public Color PaymentMethodColor => PaymentMethod switch
        {
            "Cash" => Color.Success,
            "Card" => Color.Primary,
            "EFT" => Color.Info,
            _ => Color.Default
        };
        
        public Color StatusColor => Status switch
        {
            "Completed" => Color.Success,
            "Pending" => Color.Warning,
            "Cancelled" => Color.Error,
            "Refunded" => Color.Info,
            _ => Color.Default
        };
    }
    
    private OrderStats _orderStats = new()
    {
        TotalOrders = 45,
        OrdersThisMonth = 3,
        TotalSpent = 125000.00m,
        SpentThisMonth = 7500.00m,
        AverageOrder = 2777.78m
    };
    
    private List<Order> _orderHistory = new()
    {
        new() { OrderNumber = "ORD-001", Date = DateTime.Now.AddDays(-2), ItemCount = 3, 
                Total = 18499.97m, PaymentMethod = "Card", Status = "Completed" },
        new() { OrderNumber = "ORD-002", Date = DateTime.Now.AddDays(-5), ItemCount = 1, 
                Total = 2499.99m, PaymentMethod = "Cash", Status = "Completed" },
        new() { OrderNumber = "ORD-003", Date = DateTime.Now.AddDays(-10), ItemCount = 2, 
                Total = 7999.98m, PaymentMethod = "EFT", Status = "Pending" },
        new() { OrderNumber = "ORD-004", Date = DateTime.Now.AddDays(-15), ItemCount = 1, 
                Total = 3999.99m, PaymentMethod = "Card", Status = "Cancelled" },
        new() { OrderNumber = "ORD-005", Date = DateTime.Now.AddDays(-20), ItemCount = 4, 
                Total = 12499.96m, PaymentMethod = "Cash", Status = "Refunded" }
    };
    
    private List<ChartSeries> _orderTrendSeries = new()
    {
        new ChartSeries 
        { 
            Name = "Order Value", 
            Data = new double[] { 15000, 18000, 12000, 22000, 19000, 25000, 17000, 21000, 23000, 20000, 24000, 26000 }
        }
    };
    
    private string[] _monthLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    
    private bool FilterFunc(Order order)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return order.OrderNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               order.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    private async Task ViewOrderDetails(Order order)
    {
        var dialog = await DialogService.ShowAsync<InvoiceDialog>("Order Details",
            new DialogParameters { ["InvoiceNumber"] = order.OrderNumber });
        await dialog.Result;
    }
    
    private async Task PrintInvoice(Order order)
    {
        // In a real application, this would print the invoice
        Snackbar.Add($"Invoice {order.OrderNumber} sent to printer!", Severity.Success);
    }
    
    private async Task ProcessReturn(Order order)
    {
        var dialog = await DialogService.ShowAsync<ReturnDialog>("Process Return",
            new DialogParameters { ["InvoiceNumber"] = order.OrderNumber });
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            order.Status = "Refunded";
            Snackbar.Add("Return processed successfully", Severity.Success);
        }
    }
    
    private async Task ExportHistory()
    {
        // In a real application, this would generate and download an order history report
        Snackbar.Add("Order history exported successfully!", Severity.Success);
    }
} 