@page "/group-purchases"
@using TossErp.Application.DTOs
@* @inject IGroupPurchaseService GroupPurchaseService *@
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>TOSS ERP III - Group Purchases</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <!-- Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
            <MudText Typo="Typo.h4">Group Purchases</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="@(() => _showCreateDialog = true)"
                      StartIcon="@Icons.Material.Filled.Add">
                Create New Group
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Active Groups -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-3">Active Group Purchases</MudText>
        <MudGrid>
            @foreach (var group in _activeGroups)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Elevation="2" Class="ma-2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@group.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@group.Description</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudChip Color="@GetStatusColor(group.Status)" Size="Size.Small">
                                    @group.Status
                                </MudChip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="2">
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.body2">Target Amount:</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Primary">@group.TargetAmount.ToString("C")</MudText>
                                </MudStack>
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.body2">Current Amount:</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Success">@group.CurrentAmount.ToString("C")</MudText>
                                </MudStack>
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.body2">Members:</MudText>
                                    <MudText Typo="Typo.body2">@group.MemberCount</MudText>
                                </MudStack>
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.body2">End Date:</MudText>
                                    <MudText Typo="Typo.body2">@group.EndDate.ToString("MMM dd, yyyy")</MudText>
                                </MudStack>
                                
                                <!-- Progress Bar -->
                                <MudProgressLinear Value="@GetProgressPercentage(group)" Color="Color.Primary" Class="mt-2" />
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @GetProgressPercentage(group)% Complete
                                </MudText>
                            </MudStack>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" 
                                      Color="Color.Primary" 
                                      OnClick="@(() => ViewGroupDetails(group))">
                                View Details
                            </MudButton>
                            @if (group.Status == GroupPurchaseStatus.Active)
                            {
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Secondary" 
                                          OnClick="@(() => JoinGroup(group))">
                                    Join Group
                                </MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        
        @if (!_activeGroups.Any())
        {
            <MudPaper Class="pa-8 text-center" Elevation="0">
                <MudIcon Icon="@Icons.Material.Filled.GroupWork" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">No active group purchases</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Create a new group to get started</MudText>
            </MudPaper>
        }
    </MudPaper>

    <!-- Completed Groups -->
    <MudPaper Class="pa-4" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-3">Completed Group Purchases</MudText>
        <MudDataGrid T="GroupPurchaseDto" Items="@_completedGroups" 
                     Dense="true" Hover="true" Striped="true"
                     Filterable="true" SortMode="SortMode.Multiple">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Group Name" />
                <PropertyColumn Property="x => x.TargetAmount" Title="Target Amount" Format="C" />
                <PropertyColumn Property="x => x.CurrentAmount" Title="Final Amount" Format="C" />
                <PropertyColumn Property="x => x.MemberCount" Title="Members" />
                <PropertyColumn Property="x => x.EndDate" Title="Completed Date" Format="MMM dd, yyyy" />
                <TemplateColumn Title="Status">
                    <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                        @context.Status
                    </MudChip>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary" 
                              Size="Size.Small"
                              OnClick="@(() => ViewGroupDetails(context))">
                        View Details
                    </MudButton>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

<!-- Create Group Dialog -->
<MudDialog @bind-IsVisible="_showCreateDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Create New Group Purchase</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="_isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_newGroup.Name" 
                                 Label="Group Name" 
                                 Required="true"
                                 Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_newGroup.Description" 
                                 Label="Description" 
                                 Lines="3"
                                 Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="_newGroup.TargetAmount" 
                                    Label="Target Amount" 
                                    Required="true"
                                    Variant="Variant.Outlined"
                                    Min="0"
                                    Step="0.01" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="_newGroup.EndDate" 
                                  Label="End Date" 
                                  Required="true"
                                  Variant="Variant.Outlined"
                                  MinDate="@DateTime.Today" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_newGroup.ProductDetails" 
                                 Label="Product Details" 
                                 Lines="2"
                                 Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showCreateDialog = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="@CreateGroup"
                  Disabled="@(!_isValid)">
            Create Group
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- Group Details Dialog -->
<MudDialog @bind-IsVisible="_showDetailsDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Group Details - @_selectedGroup?.Name</MudText>
    </TitleContent>
    <DialogContent>
        @if (_selectedGroup != null)
        {
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.subtitle1">Group Information</MudText>
                        <MudStack Spacing="2">
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Description:</MudText>
                                <MudText Typo="Typo.body2">@_selectedGroup.Description</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Target Amount:</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Primary">@_selectedGroup.TargetAmount.ToString("C")</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Current Amount:</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Success">@_selectedGroup.CurrentAmount.ToString("C")</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Members:</MudText>
                                <MudText Typo="Typo.body2">@_selectedGroup.MemberCount</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">End Date:</MudText>
                                <MudText Typo="Typo.body2">@_selectedGroup.EndDate.ToString("MMM dd, yyyy")</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.subtitle1">Progress</MudText>
                        <MudProgressCircular Value="@GetProgressPercentage(_selectedGroup)" 
                                           Color="Color.Primary" 
                                           Size="Size.Large" />
                        <MudText Typo="Typo.h6" Class="text-center">
                            @GetProgressPercentage(_selectedGroup)% Complete
                        </MudText>
                    </MudStack>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showDetailsDialog = false)">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<GroupPurchaseDto> _activeGroups = new();
    private List<GroupPurchaseDto> _completedGroups = new();
    private bool _showCreateDialog = false;
    private bool _showDetailsDialog = false;
    private bool _isValid = false;
    private MudForm _form = new();
    private CreateGroupPurchaseDto _newGroup = new();
    private GroupPurchaseDto? _selectedGroup;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        try
        {
            var allGroups = await GroupPurchaseService.GetAllGroupsAsync();
            _activeGroups = allGroups.Where(g => g.Status == GroupPurchaseStatus.Active).ToList();
            _completedGroups = allGroups.Where(g => g.Status == GroupPurchaseStatus.Completed || g.Status == GroupPurchaseStatus.Cancelled).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading groups", Severity.Error);
        }
    }

    private async Task CreateGroup()
    {
        if (!_isValid) return;

        try
        {
            await GroupPurchaseService.CreateGroupAsync(_newGroup);
            Snackbar.Add("Group created successfully", Severity.Success);
            _showCreateDialog = false;
            _newGroup = new CreateGroupPurchaseDto();
            await LoadGroups();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error creating group", Severity.Error);
        }
    }

    private void ViewGroupDetails(GroupPurchaseDto group)
    {
        _selectedGroup = group;
        _showDetailsDialog = true;
    }

    private async Task JoinGroup(GroupPurchaseDto group)
    {
        try
        {
            // TODO: Implement join group logic
            Snackbar.Add("Joined group successfully", Severity.Success);
            await LoadGroups();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error joining group", Severity.Error);
        }
    }

    private Color GetStatusColor(GroupPurchaseStatus status)
    {
        return status switch
        {
            GroupPurchaseStatus.Active => Color.Primary,
            GroupPurchaseStatus.Completed => Color.Success,
            GroupPurchaseStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }

    private double GetProgressPercentage(GroupPurchaseDto group)
    {
        if (group.TargetAmount <= 0) return 0;
        return Math.Min((double)(group.CurrentAmount / group.TargetAmount * 100), 100);
    }
} 