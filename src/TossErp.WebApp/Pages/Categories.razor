@page "/categories"
@using TossErp.Shared.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

#pragma warning disable CS8602

<PageTitle>Categories Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Categories Management</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => OpenCategoryDialog())">
            Create New Category
        </MudButton>
    </MudPaper>

    <MudTable Items="@categories" Dense="true" Hover="true" Loading="@loading" 
               Filter="new Func<CategoryDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Categories</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" 
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Parent Category</MudTh>
            <MudTh>Item Count</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
#pragma warning disable CS8602
            @if (context == null!)
            {
                <MudTd colspan="5"></MudTd>
            }
            else
            {
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Parent Category">@(context.ParentCategoryName ?? "None")</MudTd>
                <MudTd DataLabel="Item Count">
                    <MudChip T="string" Color="Color.Info" Size="Size.Small">@context.ItemCount</MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => OpenCategoryDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                  Color="Color.Error" 
                                  OnClick="@(() => DeleteCategory(context.Id))" />
                </MudTd>
            }
#pragma warning restore CS8602
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private List<CategoryDto> categories = new();
    private bool loading = true;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            loading = true;
            // Simulate API call delay
            await Task.Delay(100);
            
            // For now, using mock data - replace with actual API call
            categories = new List<CategoryDto>
            {
                new() { Id = 1, Name = "Electronics", Description = "Electronic devices and accessories", ParentCategoryId = null!, ItemCount = 25 },
                new() { Id = 2, Name = "Computers", Description = "Desktop and laptop computers", ParentCategoryId = 1, ParentCategoryName = "Electronics", ItemCount = 12 },
                new() { Id = 3, Name = "Mobile Phones", Description = "Smartphones and mobile accessories", ParentCategoryId = 1, ParentCategoryName = "Electronics", ItemCount = 8 },
                new() { Id = 4, Name = "Clothing", Description = "Apparel and fashion items", ParentCategoryId = null!, ItemCount = 45 },
                new() { Id = 5, Name = "Men's Clothing", Description = "Men's apparel", ParentCategoryId = 4, ParentCategoryName = "Clothing", ItemCount = 20 },
                new() { Id = 6, Name = "Women's Clothing", Description = "Women's apparel", ParentCategoryId = 4, ParentCategoryName = "Clothing", ItemCount = 25 },
                new() { Id = 7, Name = "Home & Garden", Description = "Home improvement and garden supplies", ParentCategoryId = null!, ItemCount = 30 },
                new() { Id = 8, Name = "Kitchen", Description = "Kitchen appliances and utensils", ParentCategoryId = 7, ParentCategoryName = "Home & Garden", ItemCount = 15 }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private bool FilterFunc(CategoryDto category)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        return category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               category.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenCategoryDialog(CategoryDto? category = null!)
    {
        var parameters = new DialogParameters
        {
            ["Category"] = category != null! ? new CategoryDto
            {
                Id = category.Id,
                Name = category.Name,
                Description = category.Description,
                ParentCategoryId = category.ParentCategoryId
            } : new CategoryDto { Id = 0 },
            ["AvailableCategories"] = categories.Where(c => c.Id != category?.Id).ToList()
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<CategoryDialog>(category == null! ? "Create Category" : "Edit Category", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is CategoryDto updatedCategory)
        {
            if (updatedCategory.Id == 0)
            {
                updatedCategory.Id = categories.Any() ? categories.Max(c => c.Id) + 1 : 1;
                updatedCategory.ItemCount = 0;
                if (updatedCategory.ParentCategoryId.HasValue)
                {
                    var parent = categories.FirstOrDefault(c => c.Id == updatedCategory.ParentCategoryId.Value);
                    updatedCategory.ParentCategoryName = parent?.Name;
                }
                categories.Add(updatedCategory);
                Snackbar.Add("Category created successfully", Severity.Success);
            }
            else
            {
                var existingCategory = categories.FirstOrDefault(c => c.Id == updatedCategory.Id);
                if (existingCategory == null!)
                {
                    Snackbar.Add("Category not found for update", Severity.Error);
                    return;
                }
                existingCategory.Name = updatedCategory.Name;
                existingCategory.Description = updatedCategory.Description;
                existingCategory.ParentCategoryId = updatedCategory.ParentCategoryId;
                if (updatedCategory.ParentCategoryId.HasValue)
                {
                    var parent = categories.FirstOrDefault(c => c.Id == updatedCategory.ParentCategoryId.Value);
                    existingCategory.ParentCategoryName = parent?.Name;
                }
                else
                {
                    existingCategory.ParentCategoryName = null!;
                }
                Snackbar.Add("Category updated successfully", Severity.Success);
            }
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        await Task.Delay(100);
        try
        {
            var category = categories.FirstOrDefault(c => c.Id == categoryId);
            if (category == null!)
            {
                Snackbar.Add("Category not found for deletion", Severity.Error);
                return;
            }
            // Check if category has items
            if (category.ItemCount > 0)
            {
                Snackbar.Add("Cannot delete category with items", Severity.Warning);
                return;
            }
            // Check if category has subcategories
            var hasSubcategories = categories.Any(c => c.ParentCategoryId == categoryId);
            if (hasSubcategories)
            {
                Snackbar.Add("Cannot delete category with subcategories", Severity.Warning);
                return;
            }
            categories.Remove(category);
            Snackbar.Add("Category deleted successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting category: {ex.Message}", Severity.Error);
        }
    }
} 
