@page "/categories"
@using TossErp.Shared.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Categories Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Categories Management</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog">
            Create New Category
        </MudButton>
    </MudPaper>

    <MudTable Items="@categories" Dense="true" Hover="true" Loading="@loading" 
               Filter="new Func<CategoryDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Categories</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" 
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Parent Category</MudTh>
            <MudTh>Item Count</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Parent Category">@(context.ParentCategoryName ?? "None")</MudTd>
            <MudTd DataLabel="Item Count">
                <MudChip T="string" Color="Color.Info" Size="Size.Small">@context.ItemCount</MudChip>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                              Color="Color.Primary" 
                              OnClick="@(() => OpenEditDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                              Color="Color.Error" 
                              OnClick="@(() => DeleteCategory(context.Id))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="dialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(editingCategory?.Id == 0 ? "Create Category" : "Edit Category")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField @bind-Value="editingCategory.Name" 
                         Label="Category Name" 
                         Required="true" 
                         RequiredError="Category name is required!" />
            <MudTextField @bind-Value="editingCategory.Description" 
                         Label="Description" 
                         Lines="3" />
            <MudSelect T="int?" @bind-Value="editingCategory.ParentCategoryId" 
                      Label="Parent Category" 
                      HelperText="Select parent category (optional)">
                <MudSelectItem Value="@((int?)null)">None</MudSelectItem>
                @foreach (var category in categories.Where(c => c.Id != editingCategory.Id))
                {
                    <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveCategory">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<CategoryDto> categories = new();
    private bool loading = true;
    private string searchString = "";
    
    private bool dialogVisible = false;
    private CategoryDto editingCategory = new();
    private MudForm form;
    private bool success;
    
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            loading = true;
            // For now, using mock data - replace with actual API call
            categories = new List<CategoryDto>
            {
                new() { Id = 1, Name = "Electronics", Description = "Electronic devices and accessories", ParentCategoryId = null, ItemCount = 25 },
                new() { Id = 2, Name = "Computers", Description = "Desktop and laptop computers", ParentCategoryId = 1, ParentCategoryName = "Electronics", ItemCount = 12 },
                new() { Id = 3, Name = "Mobile Phones", Description = "Smartphones and mobile accessories", ParentCategoryId = 1, ParentCategoryName = "Electronics", ItemCount = 8 },
                new() { Id = 4, Name = "Clothing", Description = "Apparel and fashion items", ParentCategoryId = null, ItemCount = 45 },
                new() { Id = 5, Name = "Men's Clothing", Description = "Men's apparel", ParentCategoryId = 4, ParentCategoryName = "Clothing", ItemCount = 20 },
                new() { Id = 6, Name = "Women's Clothing", Description = "Women's apparel", ParentCategoryId = 4, ParentCategoryName = "Clothing", ItemCount = 25 },
                new() { Id = 7, Name = "Home & Garden", Description = "Home improvement and garden supplies", ParentCategoryId = null, ItemCount = 30 },
                new() { Id = 8, Name = "Kitchen", Description = "Kitchen appliances and utensils", ParentCategoryId = 7, ParentCategoryName = "Home & Garden", ItemCount = 15 }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private bool FilterFunc(CategoryDto category)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        return category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               category.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void OpenCreateDialog()
    {
        editingCategory = new CategoryDto { Id = 0 };
        dialogVisible = true;
    }

    private void OpenEditDialog(CategoryDto category)
    {
        editingCategory = new CategoryDto
        {
            Id = category.Id,
            Name = category.Name,
            Description = category.Description,
            ParentCategoryId = category.ParentCategoryId
        };
        dialogVisible = true;
    }

    private async Task SaveCategory()
    {
        try
        {
            if (editingCategory.Id == 0)
            {
                // Create new category
                editingCategory.Id = categories.Max(c => c.Id) + 1;
                editingCategory.ItemCount = 0;
                if (editingCategory.ParentCategoryId.HasValue)
                {
                    var parent = categories.FirstOrDefault(c => c.Id == editingCategory.ParentCategoryId.Value);
                    editingCategory.ParentCategoryName = parent?.Name;
                }
                categories.Add(editingCategory);
                Snackbar.Add("Category created successfully", Severity.Success);
            }
            else
            {
                // Update existing category
                var existingCategory = categories.FirstOrDefault(c => c.Id == editingCategory.Id);
                if (existingCategory != null)
                {
                    existingCategory.Name = editingCategory.Name;
                    existingCategory.Description = editingCategory.Description;
                    existingCategory.ParentCategoryId = editingCategory.ParentCategoryId;
                    if (editingCategory.ParentCategoryId.HasValue)
                    {
                        var parent = categories.FirstOrDefault(c => c.Id == editingCategory.ParentCategoryId.Value);
                        existingCategory.ParentCategoryName = parent?.Name;
                    }
                    else
                    {
                        existingCategory.ParentCategoryName = null;
                    }
                }
                Snackbar.Add("Category updated successfully", Severity.Success);
            }
            
            dialogVisible = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving category: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            var category = categories.FirstOrDefault(c => c.Id == categoryId);
            if (category != null)
            {
                // Check if category has items
                if (category.ItemCount > 0)
                {
                    Snackbar.Add("Cannot delete category with items", Severity.Warning);
                    return;
                }
                
                // Check if category has subcategories
                var hasSubcategories = categories.Any(c => c.ParentCategoryId == categoryId);
                if (hasSubcategories)
                {
                    Snackbar.Add("Cannot delete category with subcategories", Severity.Warning);
                    return;
                }
                
                categories.Remove(category);
                Snackbar.Add("Category deleted successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting category: {ex.Message}", Severity.Error);
        }
    }

    private void CancelDialog()
    {
        dialogVisible = false;
    }
} 