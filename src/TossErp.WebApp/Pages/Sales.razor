@page "/sales"
@using TossErp.Application.DTOs
@* @inject ISaleService SaleService *@
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>TOSS ERP III - Sales History</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <!-- Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
            <MudText Typo="Typo.h4">Sales History</MudText>
            <MudSpacer />
            <MudDateRangePicker @bind-DateRange="_dateRange" 
                               Label="Filter by Date Range" 
                               Variant="Variant.Outlined" />
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="@ExportSales"
                      StartIcon="@Icons.Material.Filled.Download">
                Export
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Sales Summary Cards -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Success" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_totalSales.ToString("C")</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Sales</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Info" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_totalOrders</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Orders</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Warning" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.Average" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_averageOrderValue.ToString("C")</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Average Order</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Tertiary" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.People" />
                    </MudAvatar>
                    <MudStack Class="flex-grow-1">
                        <MudText Typo="Typo.h6">@_uniqueCustomers</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Unique Customers</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Sales Data Grid -->
    <MudPaper Class="pa-4" Elevation="1">
        <MudDataGrid T="SaleDto" Items="@_sales" 
                     Dense="true" Hover="true" Striped="true"
                     Filterable="true" SortMode="SortMode.Multiple"
                     Loading="@_isLoading"
                     FixedHeader="true"
                     Height="600px">
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Sale #" />
                <PropertyColumn Property="x => x.CreatedAt" Title="Date" Format="MMM dd, yyyy HH:mm" />
                <PropertyColumn Property="x => x.Total" Title="Total" Format="C" />
                <PropertyColumn Property="x => x.PaymentMethod" Title="Payment Method" />
                <PropertyColumn Property="x => x.ItemCount" Title="Items" />
                <TemplateColumn Title="Status">
                    <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                        @context.Status
                    </MudChip>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <MudStack Row="true" Spacing="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Receipt" 
                                     Size="Size.Small" 
                                     Color="Color.Primary"
                                     OnClick="@(() => ViewSaleDetails(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Print" 
                                     Size="Size.Small" 
                                     Color="Color.Secondary"
                                     OnClick="@(() => PrintReceipt(context))" />
                    </MudStack>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

<!-- Sale Details Dialog -->
<MudDialog @bind-IsVisible="_showDetailsDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Sale Details - #@_selectedSale?.Id</MudText>
    </TitleContent>
    <DialogContent>
        @if (_selectedSale != null)
        {
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.subtitle1">Sale Information</MudText>
                        <MudStack Spacing="2">
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Sale ID:</MudText>
                                <MudText Typo="Typo.body1">#@_selectedSale.Id</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Date:</MudText>
                                <MudText Typo="Typo.body1">@_selectedSale.CreatedAt.ToString("MMM dd, yyyy HH:mm")</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Payment Method:</MudText>
                                <MudText Typo="Typo.body1">@_selectedSale.PaymentMethod</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Status:</MudText>
                                <MudChip Color="@GetStatusColor(_selectedSale.Status)" Size="Size.Small">
                                    @_selectedSale.Status
                                </MudChip>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.subtitle1">Items</MudText>
                        <MudList Dense="true">
                            @foreach (var item in _selectedSale.Items)
                            {
                                <MudListItem>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudStack Class="flex-grow-1">
                                            <MudText Typo="Typo.body2">@item.ProductName</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @item.Quantity x @item.UnitPrice.ToString("C")
                                            </MudText>
                                        </MudStack>
                                        <MudText Typo="Typo.body2" Color="Color.Primary">
                                            @((item.Quantity * item.UnitPrice).ToString("C"))
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                        
                        <MudDivider />
                        
                        <MudStack Spacing="2">
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body1">Subtotal:</MudText>
                                <MudText Typo="Typo.body1">@_selectedSale.Subtotal.ToString("C")</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body1">Tax:</MudText>
                                <MudText Typo="Typo.body1">@_selectedSale.Tax.ToString("C")</MudText>
                            </MudStack>
                            <MudDivider />
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.h6">Total:</MudText>
                                <MudText Typo="Typo.h6" Color="Color.Primary">@_selectedSale.Total.ToString("C")</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showDetailsDialog = false)">Close</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="@(() => PrintReceipt(_selectedSale))">
            Print Receipt
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<SaleDto> _sales = new();
    private bool _isLoading = false;
    private bool _showDetailsDialog = false;
    private SaleDto? _selectedSale;
    private DateRange _dateRange = new(DateTime.Today.AddDays(-30), DateTime.Today);

    private decimal _totalSales => _sales.Sum(s => s.Total);
    private int _totalOrders => _sales.Count;
    private decimal _averageOrderValue => _totalOrders > 0 ? _totalSales / _totalOrders : 0;
    private int _uniqueCustomers => _sales.Select(s => s.CustomerId).Distinct().Count();

    protected override async Task OnInitializedAsync()
    {
        await LoadSales();
    }

    private async Task LoadSales()
    {
        _isLoading = true;
        try
        {
            _sales = await SaleService.GetAllSalesAsync();
            // TODO: Apply date range filter when implemented in service
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading sales", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ViewSaleDetails(SaleDto sale)
    {
        _selectedSale = sale;
        _showDetailsDialog = true;
    }

    private async Task PrintReceipt(SaleDto? sale)
    {
        if (sale == null) return;

        try
        {
            // TODO: Implement receipt printing logic
            Snackbar.Add("Receipt printed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error printing receipt", Severity.Error);
        }
    }

    private async Task ExportSales()
    {
        try
        {
            // TODO: Implement export logic
            Snackbar.Add("Sales exported successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error exporting sales", Severity.Error);
        }
    }

    private Color GetStatusColor(SaleStatus status)
    {
        return status switch
        {
            SaleStatus.Completed => Color.Success,
            SaleStatus.Pending => Color.Warning,
            SaleStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }
} 
