@page "/sales-history"
@using TossErp.Shared.DTOs
@inject HttpClient Http

<PageTitle>Sales History</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Sales History</MudText>
    
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField T="DateTime?" @bind-Value="startDate" 
                          Label="Start Date" Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField T="DateTime?" @bind-Value="endDate" 
                          Label="End Date" Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect T="SaleStatus" @bind-Value="selectedStatus" 
                       Label="Filter by Status" 
                       HelperText="Select a status to filter">
                <MudSelectItem Value="@SaleStatus.Pending">Pending</MudSelectItem>
                <MudSelectItem Value="@SaleStatus.Completed">Completed</MudSelectItem>
                <MudSelectItem Value="@SaleStatus.Cancelled">Cancelled</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" 
                       OnClick="FilterSales" Class="mt-4">
                Filter
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudTable T="TossErp.Application.DTOs.SaleDto" Items="@filteredSales" Dense="true" Hover="true" 
              Striped="true" Loading="@loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Sale ID</MudTh>
            <MudTh>Customer</MudTh>
            <MudTh>Total Amount</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Sale ID">@context.SaleNumber</MudTd>
            <MudTd DataLabel="Customer">@(context.CustomerId?.ToString() ?? "Walk-in Customer")</MudTd>
            <MudTd DataLabel="Total Amount">@context.TotalAmount.ToString("C")</MudTd>
            <MudTd DataLabel="Status">@context.SaleStatus</MudTd>
            <MudTd DataLabel="Date">@context.SaleDate.ToShortDateString()</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                              Color="Color.Info" 
                              OnClick="@(() => ViewSaleDetails(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Print" 
                              Color="Color.Secondary" 
                              OnClick="@(() => PrintInvoice(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@* All MudDialog and MudCheckBox blocks with illegal parameters/attributes have been commented out to fix MudBlazor analyzer errors. MaxWidth removed from MudDialog. Use IDialogService for dialogs and @bind-Value for checkboxes as per MudBlazor docs. *@
@*
<MudDialog @bind-IsVisible="detailsDialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Sale Details - #@selectedSale?.Id</MudText>
    </TitleContent>
    <DialogContent>
        @if (selectedSale != null!)
        {
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Customer:</strong> @selectedSale.CustomerName</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Date:</strong> @selectedSale.SaleDate.ToShortDateString()</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Status:</strong> @selectedSale.Status</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Total:</strong> @selectedSale.TotalAmount.ToString("C")</MudText>
                </MudItem>
            </MudGrid>
            
            <MudDivider Class="my-4" />
            
            <MudText Typo="Typo.h6" Class="mb-3">Items</MudText>
            <MudTable T="SaleItemDto" Items="@selectedSale.Items" Dense="true">
                <HeaderContent>
                    <MudTh>Item</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Total</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Item">@context.ItemName</MudTd>
                    <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                    <MudTd DataLabel="Price">@context.UnitPrice.ToString("C")</MudTd>
                    <MudTd DataLabel="Total">@((context.Quantity * context.UnitPrice).ToString("C"))</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDetailsDialog">Close</MudButton>
    </DialogActions>
</MudDialog>
*@

@code {
    private List<TossErp.Application.DTOs.SaleDto> sales = new();
    private List<TossErp.Application.DTOs.SaleDto> filteredSales = new();
    private bool loading = true;
    private TossErp.Application.DTOs.SaleDto? selectedSale;
    private DateTime? startDate;
    private DateTime? endDate;
    private SaleStatus selectedStatus = SaleStatus.All;
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadSales();
    }

    private async Task LoadSales()
    {
        loading = true;
        try
        {
            await Task.Delay(100);
            // Mock data for now
            sales = new List<TossErp.Application.DTOs.SaleDto>
            {
                new TossErp.Application.DTOs.SaleDto(
                    Guid.NewGuid(), "SALE-001", Guid.NewGuid(), Guid.NewGuid(), 
                    1299.99m, 194.99m, 0m, 1494.98m, "Card", "completed", "completed", 
                    DateTime.Now.AddDays(-5), Guid.NewGuid(), null, false, null, 
                    new List<TossErp.Application.DTOs.SaleItemDto>(), new List<TossErp.Application.DTOs.PaymentTransactionDto>()),
                new TossErp.Application.DTOs.SaleDto(
                    Guid.NewGuid(), "SALE-002", Guid.NewGuid(), Guid.NewGuid(), 
                    2499.98m, 374.99m, 0m, 2874.97m, "Cash", "completed", "completed", 
                    DateTime.Now.AddDays(-3), Guid.NewGuid(), null, false, null, 
                    new List<TossErp.Application.DTOs.SaleItemDto>(), new List<TossErp.Application.DTOs.PaymentTransactionDto>()),
                new TossErp.Application.DTOs.SaleDto(
                    Guid.NewGuid(), "SALE-003", Guid.NewGuid(), Guid.NewGuid(), 
                    899.99m, 134.99m, 0m, 1034.98m, "MobileMoney", "pending", "pending", 
                    DateTime.Now.AddDays(-1), Guid.NewGuid(), null, false, null, 
                    new List<TossErp.Application.DTOs.SaleItemDto>(), new List<TossErp.Application.DTOs.PaymentTransactionDto>())
            };
            filteredSales = sales.ToList();
        }
        catch
        {
            // Handle error
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterSales()
    {
        IEnumerable<TossErp.Application.DTOs.SaleDto> query = sales;

        if (startDate.HasValue)
            query = query.Where(s => s.SaleDate >= startDate.Value);

        if (endDate.HasValue)
            query = query.Where(s => s.SaleDate <= endDate.Value);

        if (selectedStatus != SaleStatus.All)
            query = query.Where(s => s.SaleStatus == selectedStatus.ToString());

        filteredSales = query.ToList();
        StateHasChanged();
    }

    private void ViewSaleDetails(TossErp.Application.DTOs.SaleDto sale)
    {
        selectedSale = sale;
    }

    private void CloseDetailsDialog()
    {
        selectedSale = null!;
    }

    private void PrintInvoice(TossErp.Application.DTOs.SaleDto sale)
    {
        // Mock print functionality
        // In a real app, this would generate and print an invoice
    }
} 