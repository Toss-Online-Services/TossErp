@page "/login"
@using TossErp.WebApp.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Login - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Class="pa-8" Elevation="3">
        <div class="text-center mb-6">
            <MudText Typo="Typo.h4" Class="mb-2">TOSS ERP</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">Sign in to your account</MudText>
        </div>

        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudTextField @bind-Value="loginRequest.UserName"
                          Label="Username"
                          Required="true"
                          RequiredError="Username is required"
                          Variant="Variant.Outlined"
                          Class="mb-4" />

            <MudTextField @bind-Value="loginRequest.Password"
                          Label="Password"
                          Required="true"
                          RequiredError="Password is required"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Class="mb-6" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
            }

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       @onclick="HandleLogin"
                       Disabled="@isLoading"
                       StartIcon="@(isLoading ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Login)">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                }
                Sign In
            </MudButton>

            <div class="text-center mt-4">
                <MudText Typo="Typo.body2">
                    Demo Credentials:
                </MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    admin / admin123 | manager / manager123 | cashier1 / cashier123
                </MudText>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form = default!;
    private bool isValid;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private LoginRequest loginRequest = new();

    private async Task HandleLogin()
    {
        if (!isValid) return;

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var json = JsonSerializer.Serialize(loginRequest);
            var content = new StringContent(json);
            content.Headers.ContentType = new global::System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            var response = await Http.PostAsync("https://localhost:5001/api/auth/login", content);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<LoginResponse>(responseContent);
                if (result?.Token != null!)
                {
                    await LocalStorage.SetItemAsync("authToken", result.Token);
                    await LocalStorage.SetItemAsync("user", result.User);
                    
                    // Set default authorization header for future requests
                    Http.DefaultRequestHeaders.Authorization = new global::System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);
                    
                    Navigation.NavigateTo("/dashboard");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var error = JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                errorMessage = error?.Message ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
        public UserDto User { get; set; } = new();
    }

    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
} 