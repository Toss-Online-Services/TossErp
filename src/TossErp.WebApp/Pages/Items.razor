@page "/items"
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>TOSS ERP - Items Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Items Management</MudText>
    
    <!-- Toolbar -->
    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="searchString" 
                             Label="Search Items" 
                             Variant="Variant.Outlined" 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             IconSize="Size.Medium" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudSelect @bind-Value="selectedItemType" 
                           Label="Item Type" 
                           Variant="Variant.Outlined">
                    <MudSelectItem Value="@((ItemType?)null)">All Types</MudSelectItem>
                    <MudSelectItem Value="@ItemType.Product">Product</MudSelectItem>
                    <MudSelectItem Value="@ItemType.Service">Service</MudSelectItem>
                    <MudSelectItem Value="@ItemType.RawMaterial">Raw Material</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="4" Class="d-flex justify-end">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenCreateDialog">
                    Add Item
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <!-- Items Table -->
    <MudPaper>
        <MudTable Items="@FilteredItems" 
                   Dense="true" 
                   Hover="true" 
                   Bordered="true" 
                   Striped="true"
                   Loading="@loading"
                   Filter="new Func<ItemDto,bool>(FilterFunc)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Items</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" 
                             Placeholder="Search" 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Item Code</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Stock</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Item Code">@context.ItemCode</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Type">
                    <MudChip Color="Color.Info" Size="Size.Small">@context.ItemType</MudChip>
                </MudTd>
                <MudTd DataLabel="Price">$@context.SellingPrice.ToString("F2")</MudTd>
                <MudTd DataLabel="Stock">
                    @if (context.IsStockable)
                    {
                        <MudText>@(context.MinimumStockLevel?.ToString() ?? "N/A")</MudText>
                    }
                    else
                    {
                        <MudText Color="Color.Secondary">N/A</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip Color="@(context.IsActive ? Color.Success : Color.Error)" 
                             Size="Size.Small">
                        @(context.IsActive ? "Active" : "Inactive")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                   Color="Color.Primary" 
                                   Size="Size.Small"
                                   OnClick="@(() => OpenEditDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                   Color="Color.Info" 
                                   Size="Size.Small"
                                   OnClick="@(() => OpenViewDialog(context))" />
                    <MudIconButton Icon="@(context.IsActive ? Icons.Material.Filled.Block : Icons.Material.Filled.CheckCircle)" 
                                   Color="@(context.IsActive ? Color.Warning : Color.Success)" 
                                   Size="Size.Small"
                                   OnClick="@(() => ToggleItemStatus(context))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

<!-- Create/Edit Dialog -->
<MudDialog @bind-IsVisible="dialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(editingItem == null ? "Create Item" : "Edit Item")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="itemForm.ItemCode" 
                                 Label="Item Code" 
                                 Required="true" 
                                 RequiredError="Item code is required!"
                                 Disabled="@(editingItem != null)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="itemForm.Name" 
                                 Label="Name" 
                                 Required="true" 
                                 RequiredError="Name is required!" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="itemForm.Description" 
                                 Label="Description" 
                                 Lines="3" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="itemForm.Barcode" 
                                 Label="Barcode" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="itemForm.SKU" 
                                 Label="SKU" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="itemForm.ItemType" 
                               Label="Item Type" 
                               Required="true"
                               RequiredError="Item type is required!">
                        <MudSelectItem Value="@ItemType.Product">Product</MudSelectItem>
                        <MudSelectItem Value="@ItemType.Service">Service</MudSelectItem>
                        <MudSelectItem Value="@ItemType.RawMaterial">Raw Material</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="itemForm.UnitOfMeasure" 
                                 Label="Unit of Measure" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="itemForm.StandardCost" 
                                     Label="Standard Cost" 
                                     Required="true"
                                     RequiredError="Standard cost is required!"
                                     Min="0"
                                     Format="F2" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="itemForm.SellingPrice" 
                                     Label="Selling Price" 
                                     Required="true"
                                     RequiredError="Selling price is required!"
                                     Min="0"
                                     Format="F2" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudCheckBox @bind-Checked="itemForm.IsStockable" 
                                 Label="Is Stockable" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="itemForm.MinimumStockLevel" 
                                     Label="Minimum Stock Level"
                                     Min="0"
                                     Format="F2" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="itemForm.MaximumStockLevel" 
                                     Label="Maximum Stock Level"
                                     Min="0"
                                     Format="F2" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="itemForm.ReorderPoint" 
                                     Label="Reorder Point"
                                     Min="0"
                                     Format="F2" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="itemForm.ReorderQuantity" 
                                     Label="Reorder Quantity"
                                     Min="0"
                                     Format="F2" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="!success">Submit</MudButton>
    </DialogActions>
</MudDialog>

<!-- View Dialog -->
<MudDialog @bind-IsVisible="viewDialogVisible" Options="viewDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Item Details</MudText>
    </TitleContent>
    <DialogContent>
        @if (viewingItem != null)
        {
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Item Code:</strong> @viewingItem.ItemCode</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Name:</strong> @viewingItem.Name</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudText><strong>Description:</strong> @(viewingItem.Description ?? "N/A")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Type:</strong> @viewingItem.ItemType</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Status:</strong> @(viewingItem.IsActive ? "Active" : "Inactive")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Standard Cost:</strong> $@viewingItem.StandardCost.ToString("F2")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Selling Price:</strong> $@viewingItem.SellingPrice.ToString("F2")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Unit of Measure:</strong> @(viewingItem.UnitOfMeasure ?? "N/A")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText><strong>Stockable:</strong> @(viewingItem.IsStockable ? "Yes" : "No")</MudText>
                </MudItem>
                @if (viewingItem.IsStockable)
                {
                    <MudItem xs="12" sm="6">
                        <MudText><strong>Minimum Stock:</strong> @(viewingItem.MinimumStockLevel?.ToString() ?? "N/A")</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><strong>Maximum Stock:</strong> @(viewingItem.MaximumStockLevel?.ToString() ?? "N/A")</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><strong>Reorder Point:</strong> @(viewingItem.ReorderPoint?.ToString() ?? "N/A")</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><strong>Reorder Quantity:</strong> @(viewingItem.ReorderQuantity?.ToString() ?? "N/A")</MudText>
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudText><strong>Created:</strong> @viewingItem.CreatedAt.ToString("g")</MudText>
                </MudItem>
                @if (viewingItem.LastModifiedAt.HasValue)
                {
                    <MudItem xs="12">
                        <MudText><strong>Last Modified:</strong> @viewingItem.LastModifiedAt.Value.ToString("g")</MudText>
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseViewDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<ItemDto> items = new();
    private List<ItemDto> FilteredItems => items.Where(i => 
        (string.IsNullOrEmpty(searchString) || 
         i.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
         i.ItemCode.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
         (i.Barcode?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
         (i.SKU?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)) &&
        (!selectedItemType.HasValue || i.ItemType == selectedItemType.Value)).ToList();
    
    private string searchString = "";
    private ItemType? selectedItemType = null;
    private bool loading = true;
    private bool dialogVisible = false;
    private bool viewDialogVisible = false;
    private bool success;
    private ItemDto? editingItem = null;
    private ItemDto? viewingItem = null;
    private MudForm form;
    
    private CreateItemDto itemForm = new();
    
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    private DialogOptions viewDialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            loading = true;
            // TODO: Replace with actual API call
            // items = await Http.GetFromJsonAsync<List<ItemDto>>("api/items");
            
            // Mock data for demonstration
            items = new List<ItemDto>
            {
                new() { Id = Guid.NewGuid(), ItemCode = "LAP001", Name = "Laptop Dell XPS 13", ItemType = ItemType.Product, IsActive = true, IsStockable = true, StandardCost = 800, SellingPrice = 1200, MinimumStockLevel = 5, MaximumStockLevel = 50, ReorderPoint = 10, ReorderQuantity = 20 },
                new() { Id = Guid.NewGuid(), ItemCode = "MOUSE001", Name = "Wireless Mouse", ItemType = ItemType.Product, IsActive = true, IsStockable = true, StandardCost = 15, SellingPrice = 25, MinimumStockLevel = 20, MaximumStockLevel = 200, ReorderPoint = 30, ReorderQuantity = 50 },
                new() { Id = Guid.NewGuid(), ItemCode = "SVC001", Name = "Computer Repair Service", ItemType = ItemType.Service, IsActive = true, IsStockable = false, StandardCost = 0, SellingPrice = 75 }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void OpenCreateDialog()
    {
        editingItem = null;
        itemForm = new CreateItemDto();
        dialogVisible = true;
    }

    private void OpenEditDialog(ItemDto item)
    {
        editingItem = item;
        itemForm = new CreateItemDto
        {
            ItemCode = item.ItemCode,
            Name = item.Name,
            Description = item.Description,
            Barcode = item.Barcode,
            SKU = item.SKU,
            ItemType = item.ItemType,
            IsStockable = item.IsStockable,
            StandardCost = item.StandardCost,
            SellingPrice = item.SellingPrice,
            UnitOfMeasure = item.UnitOfMeasure,
            MinimumStockLevel = item.MinimumStockLevel,
            MaximumStockLevel = item.MaximumStockLevel,
            ReorderPoint = item.ReorderPoint,
            ReorderQuantity = item.ReorderQuantity
        };
        dialogVisible = true;
    }

    private void OpenViewDialog(ItemDto item)
    {
        viewingItem = item;
        viewDialogVisible = true;
    }

    private async Task Submit()
    {
        try
        {
            if (editingItem == null)
            {
                // TODO: Create item API call
                // await Http.PostAsJsonAsync("api/items", itemForm);
                Snackbar.Add("Item created successfully!", Severity.Success);
            }
            else
            {
                // TODO: Update item API call
                // await Http.PutAsJsonAsync($"api/items/{editingItem.Id}", itemForm);
                Snackbar.Add("Item updated successfully!", Severity.Success);
            }
            
            dialogVisible = false;
            await LoadItems();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving item: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel()
    {
        dialogVisible = false;
    }

    private void CloseViewDialog()
    {
        viewDialogVisible = false;
        viewingItem = null;
    }

    private async Task ToggleItemStatus(ItemDto item)
    {
        try
        {
            if (item.IsActive)
            {
                // TODO: Deactivate item API call
                // await Http.DeleteAsync($"api/items/{item.Id}");
                Snackbar.Add("Item deactivated successfully!", Severity.Success);
            }
            else
            {
                // TODO: Activate item API call
                // await Http.PostAsync($"api/items/{item.Id}/activate", null);
                Snackbar.Add("Item activated successfully!", Severity.Success);
            }
            
            await LoadItems();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating item status: {ex.Message}", Severity.Error);
        }
    }

    private bool FilterFunc(ItemDto item)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               item.ItemCode.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               (item.Barcode?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (item.SKU?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    }
} 