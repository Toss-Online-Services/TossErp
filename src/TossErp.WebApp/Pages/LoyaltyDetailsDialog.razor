@using System.Globalization

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto">
            <MudGrid>
                <!-- Loyalty Status -->
                <MudItem xs="12">
                    <MudPaper Elevation="0" Class="pa-4 mud-background-gray rounded-lg">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h6">@_loyaltyDetails.CustomerName</MudText>
                                <MudText Typo="Typo.caption">Member since @_loyaltyDetails.MemberSince.ToString("MMMM yyyy")</MudText>
                            </div>
                            <MudChip Color="@_loyaltyDetails.TierColor" Size="Size.Large">
                                @_loyaltyDetails.Tier
                            </MudChip>
                        </div>
                    </MudPaper>
                </MudItem>

                <!-- Points Summary -->
                <MudItem xs="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudIcon Icon="@Icons.Material.Filled.Stars" Color="Color.Warning" Size="Size.Large" />
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                        </div>
                        <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Available Points</MudText>
                        <MudText Typo="Typo.h5">@_loyaltyDetails.AvailablePoints</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Success">
                            +@_loyaltyDetails.PointsEarnedThisMonth this month
                        </MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudIcon Icon="@Icons.Material.Filled.LocalOffer" Color="Color.Error" Size="Size.Large" />
                            <MudIcon Icon="@Icons.Material.Filled.TrendingDown" Color="Color.Error" />
                        </div>
                        <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Points Used</MudText>
                        <MudText Typo="Typo.h5">@_loyaltyDetails.PointsUsed</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Error">
                            -@_loyaltyDetails.PointsUsedThisMonth this month
                        </MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Primary" Size="Size.Large" />
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                        </div>
                        <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Next Tier Progress</MudText>
                        <MudText Typo="Typo.h5">@_loyaltyDetails.PointsToNextTier</MudText>
                        <MudText Typo="Typo.caption">points needed for @_loyaltyDetails.NextTier</MudText>
                    </MudPaper>
                </MudItem>

                <!-- Points History -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Points History</MudText>
                    <MudTable Items="@_pointsHistory" Dense="true" Hover="true" Bordered="false">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh>Description</MudTh>
                            <MudTh>Points</MudTh>
                            <MudTh>Balance</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date">
                                @context.Date.ToString("dd MMM yyyy")
                            </MudTd>
                            <MudTd DataLabel="Description">@context.Description</MudTd>
                            <MudTd DataLabel="Points">
                                <MudText Color="@(context.Points > 0 ? Color.Success : Color.Error)">
                                    @(context.Points > 0 ? "+" : "")@context.Points
                                </MudText>
                            </MudTd>
                            <MudTd DataLabel="Balance">@context.Balance</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>

                <!-- Available Rewards -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Available Rewards</MudText>
                    <MudGrid>
                        @foreach (var reward in _availableRewards)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudPaper Elevation="2" Class="pa-4">
                                    <div class="d-flex flex-column h-100">
                                        <div class="d-flex justify-space-between mb-4">
                                            <MudIcon Icon="@reward.Icon" Color="@reward.Color" Size="Size.Large" />
                                            <MudText Typo="Typo.caption">@reward.Points points</MudText>
                                        </div>
                                        <MudText Typo="Typo.subtitle1">@reward.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="flex-grow-1">@reward.Description</MudText>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                 FullWidth="true" Class="mt-4"
                                                 Disabled="@(_loyaltyDetails.AvailablePoints < reward.Points)"
                                                 OnClick="@(() => RedeemReward(reward))">
                                            Redeem
                                        </MudButton>
                                    </div>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>

                <!-- Tier Benefits -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Your Benefits</MudText>
                    <MudList Dense="true">
                        @foreach (var benefit in _tierBenefits)
                        {
                            <MudListItem Icon="@benefit.Icon">
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <MudText>@benefit.Name</MudText>
                                        <MudText Typo="Typo.caption">@benefit.Description</MudText>
                                    </div>
                                    @if (benefit.IsActive)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Check" 
                                                Color="Color.Success" />
                                    }
                                </div>
                            </MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                  StartIcon="@Icons.Material.Filled.FileDownload"
                  OnClick="DownloadStatement">
            Download Statement
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string CustomerId { get; set; }
    
    private class LoyaltyDetails
    {
        public string CustomerName { get; set; }
        public DateTime MemberSince { get; set; }
        public string Tier { get; set; }
        public int AvailablePoints { get; set; }
        public int PointsEarnedThisMonth { get; set; }
        public int PointsUsed { get; set; }
        public int PointsUsedThisMonth { get; set; }
        public int PointsToNextTier { get; set; }
        public string NextTier { get; set; }
        
        public Color TierColor => Tier switch
        {
            "Diamond" => Color.Secondary,
            "Platinum" => Color.Primary,
            "Gold" => Color.Warning,
            "Silver" => Color.Dark,
            _ => Color.Default
        };
    }
    
    private class PointsTransaction
    {
        public DateTime Date { get; set; }
        public string Description { get; set; }
        public int Points { get; set; }
        public int Balance { get; set; }
    }
    
    private class Reward
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public int Points { get; set; }
        public string Icon { get; set; }
        public Color Color { get; set; }
    }
    
    private class TierBenefit
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Icon { get; set; }
        public bool IsActive { get; set; }
    }
    
    private LoyaltyDetails _loyaltyDetails = new()
    {
        CustomerName = "John Smith",
        MemberSince = DateTime.Now.AddYears(-2),
        Tier = "Gold",
        AvailablePoints = 2500,
        PointsEarnedThisMonth = 450,
        PointsUsed = 1500,
        PointsUsedThisMonth = 200,
        PointsToNextTier = 5000,
        NextTier = "Platinum"
    };
    
    private List<PointsTransaction> _pointsHistory = new()
    {
        new() { Date = DateTime.Now.AddDays(-2), Description = "Purchase at Store", Points = 250, Balance = 2500 },
        new() { Date = DateTime.Now.AddDays(-5), Description = "Redeem Reward", Points = -200, Balance = 2250 },
        new() { Date = DateTime.Now.AddDays(-10), Description = "Online Purchase", Points = 150, Balance = 2450 },
        new() { Date = DateTime.Now.AddDays(-15), Description = "Birthday Bonus", Points = 500, Balance = 2300 },
        new() { Date = DateTime.Now.AddDays(-20), Description = "Purchase at Store", Points = 300, Balance = 1800 }
    };
    
    private List<Reward> _availableRewards = new()
    {
        new() { Name = "R100 Voucher", Description = "Get R100 off your next purchase",
                Points = 1000, Icon = Icons.Material.Filled.LocalOffer, Color = Color.Primary },
        new() { Name = "Free Delivery", Description = "Free delivery on your next order",
                Points = 500, Icon = Icons.Material.Filled.LocalShipping, Color = Color.Secondary },
        new() { Name = "VIP Shopping", Description = "Exclusive after-hours shopping experience",
                Points = 5000, Icon = Icons.Material.Filled.Star, Color = Color.Warning }
    };
    
    private List<TierBenefit> _tierBenefits = new()
    {
        new() { Name = "Birthday Bonus", Description = "Double points on your birthday",
                Icon = Icons.Material.Filled.Cake, IsActive = true },
        new() { Name = "Priority Service", Description = "Priority customer service",
                Icon = Icons.Material.Filled.Support, IsActive = true },
        new() { Name = "Early Access", Description = "Early access to sales",
                Icon = Icons.Material.Filled.Schedule, IsActive = true },
        new() { Name = "Free Returns", Description = "Free returns on all purchases",
                Icon = Icons.Material.Filled.AssignmentReturn, IsActive = false },
        new() { Name = "VIP Events", Description = "Exclusive VIP event invitations",
                Icon = Icons.Material.Filled.Event, IsActive = false }
    };
    
    private void Cancel() => MudDialog.Cancel();
    
    private async Task RedeemReward(Reward reward)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to redeem {reward.Name} for {reward.Points} points?",
            ["ButtonText"] = "Redeem",
            ["Color"] = Color.Primary
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Redemption", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _loyaltyDetails.AvailablePoints -= reward.Points;
            _pointsHistory.Insert(0, new PointsTransaction
            {
                Date = DateTime.Now,
                Description = $"Redeem {reward.Name}",
                Points = -reward.Points,
                Balance = _loyaltyDetails.AvailablePoints
            });
            
            Snackbar.Add($"{reward.Name} redeemed successfully!", Severity.Success);
        }
    }
    
    private async Task DownloadStatement()
    {
        // In a real application, this would generate and download a loyalty statement
        Snackbar.Add("Loyalty statement downloaded successfully!", Severity.Success);
    }
} 