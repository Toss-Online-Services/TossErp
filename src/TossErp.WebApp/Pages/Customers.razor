@page "/customers"
@using TossErp.Shared.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Customers Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Customers Management</MudText>
    
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 text-center">
                <MudText Typo="Typo.h4" Color="Color.Primary">@totalCustomers</MudText>
                <MudText Typo="Typo.body2">Total Customers</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 text-center">
                <MudText Typo="Typo.h4" Color="Color.Success">@activeCustomers</MudText>
                <MudText Typo="Typo.body2">Active Customers</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 text-center">
                <MudText Typo="Typo.h4" Color="Color.Info">@newCustomersThisMonth</MudText>
                <MudText Typo="Typo.body2">New This Month</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 text-center">
                <MudText Typo="Typo.h4" Color="Color.Warning">@averageCustomerValue.ToString("C")</MudText>
                <MudText Typo="Typo.body2">Avg. Customer Value</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-4 mt-4">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => OpenCustomerDialog())">
            Add New Customer
        </MudButton>
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Secondary" 
                   StartIcon="@Icons.Material.Filled.Download"
                   Class="ml-2"
                   OnClick="@(() => ExportCustomersReport())">
            Export Report
        </MudButton>
    </MudPaper>

    <MudTable T="CustomerDto" Items="@customers" Dense="true" Hover="true" Loading="@loading" 
               Filter="new Func<CustomerDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Customers</MudText>
            <MudSpacer />
            <MudSelect T="CustomerStatus" @bind-Value="selectedStatus" 
                      Label="Filter by Status" 
                      HelperText="Select a status to filter">
                <MudSelectItem Value="@CustomerStatus.Active">Active</MudSelectItem>
                <MudSelectItem Value="@CustomerStatus.Inactive">Inactive</MudSelectItem>
            </MudSelect>
            <MudTextField @bind-Value="searchString" Placeholder="Search" 
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone</MudTh>
            <MudTh>Total Orders</MudTh>
            <MudTh>Total Spent</MudTh>
            <MudTh>Last Order</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd DataLabel="Total Orders">@context.TotalOrders</MudTd>
            <MudTd DataLabel="Total Spent">@context.TotalSpent.ToString("C")</MudTd>
            <MudTd DataLabel="Last Order">@(context.LastOrderDate?.ToString("MM/dd/yyyy") ?? "Never")</MudTd>
            <MudTd DataLabel="Status">
                @if (context.IsActive)
                {
                    <MudChip T="string" Color="Color.Success" Size="Size.Small">Active</MudChip>
                }
                else
                {
                    <MudChip T="string" Color="Color.Error" Size="Size.Small">Inactive</MudChip>
                }
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                              Color="Color.Primary" 
                              OnClick="@(() => OpenCustomerDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.History" 
                              Color="Color.Info" 
                              OnClick="@(() => ViewCustomerHistory(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                              Color="Color.Error" 
                              OnClick="@(() => DeleteCustomer(context.Id))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private List<CustomerDto> customers = new();
    private bool loading = true;
    private string searchString = "";
    private CustomerStatus selectedStatus = CustomerStatus.All;

    // Summary statistics
    private int totalCustomers => customers.Count;
    private int activeCustomers => customers.Count(c => c.IsActive);
    private int newCustomersThisMonth => customers.Count(c => c.CreatedDate?.Month == DateTime.Now.Month);
    private decimal averageCustomerValue => totalCustomers > 0 ? customers.Sum(c => c.TotalSpent) / totalCustomers : 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            loading = true;
            // Simulate API call delay
            await Task.Delay(100);
            
            // For now, using mock data - replace with actual API call
            customers = new List<CustomerDto>
            {
                new() { 
                    Id = 1, 
                    Name = "John Doe", 
                    Email = "john.doe@email.com", 
                    Phone = "+1-555-0123", 
                    Address = "123 Main St, New York, NY", 
                    Company = "Tech Corp", 
                    TotalOrders = 15, 
                    TotalSpent = 2499.99m, 
                    LastOrderDate = DateTime.Now.AddDays(-5), 
                    CreatedDate = DateTime.Now.AddMonths(-3), 
                    IsActive = true 
                },
                new() { 
                    Id = 2, 
                    Name = "Jane Smith", 
                    Email = "jane.smith@email.com", 
                    Phone = "+1-555-0456", 
                    Address = "456 Oak Ave, Los Angeles, CA", 
                    Company = "Design Studio", 
                    TotalOrders = 8, 
                    TotalSpent = 1299.99m, 
                    LastOrderDate = DateTime.Now.AddDays(-12), 
                    CreatedDate = DateTime.Now.AddMonths(-2), 
                    IsActive = true 
                },
                new() { 
                    Id = 3, 
                    Name = "Mike Johnson", 
                    Email = "mike.johnson@email.com", 
                    Phone = "+1-555-0789", 
                    Address = "789 Pine Rd, Chicago, IL", 
                    Company = "Marketing Inc", 
                    TotalOrders = 3, 
                    TotalSpent = 599.99m, 
                    LastOrderDate = DateTime.Now.AddDays(-30), 
                    CreatedDate = DateTime.Now.AddMonths(-1), 
                    IsActive = false 
                },
                new() { 
                    Id = 4, 
                    Name = "Sarah Wilson", 
                    Email = "sarah.wilson@email.com", 
                    Phone = "+1-555-0321", 
                    Address = "321 Elm St, Miami, FL", 
                    Company = "Consulting LLC", 
                    TotalOrders = 22, 
                    TotalSpent = 3999.99m, 
                    LastOrderDate = DateTime.Now.AddDays(-2), 
                    CreatedDate = DateTime.Now.AddMonths(-6), 
                    IsActive = true 
                },
                new() { 
                    Id = 5, 
                    Name = "David Brown", 
                    Email = "david.brown@email.com", 
                    Phone = "+1-555-0654", 
                    Address = "654 Maple Dr, Seattle, WA", 
                    Company = "Startup Co", 
                    TotalOrders = 5, 
                    TotalSpent = 899.99m, 
                    LastOrderDate = DateTime.Now.AddDays(-15), 
                    CreatedDate = DateTime.Now.AddDays(-20), 
                    IsActive = true 
                }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading customers: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private bool FilterFunc(CustomerDto customer)
    {
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            if (!customer.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) &&
                !customer.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase) &&
                !customer.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return false;
        }
        
        if (selectedStatus != CustomerStatus.All && customer.IsActive != (selectedStatus == CustomerStatus.Active))
            return false;
        
        return true;
    }

    private async Task OpenCustomerDialog(CustomerDto? customer = null)
    {
        var parameters = new DialogParameters
        {
            ["Customer"] = customer != null ? new CustomerDto
            {
                Id = customer.Id,
                Name = customer.Name,
                Email = customer.Email,
                Phone = customer.Phone,
                Address = customer.Address,
                Company = customer.Company,
                IsActive = customer.IsActive,
                CreatedDate = customer.CreatedDate
            } : new CustomerDto { Id = 0, IsActive = true, CreatedDate = DateTime.Now }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<CustomerDialog>(customer == null ? "Add Customer" : "Edit Customer", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is CustomerDto updatedCustomer)
        {
            if (updatedCustomer.Id == 0)
            {
                updatedCustomer.Id = customers.Any() ? customers.Max(c => c.Id) + 1 : 1;
                customers.Add(updatedCustomer);
                Snackbar.Add("Customer created successfully", Severity.Success);
            }
            else
            {
                var existingCustomer = customers.FirstOrDefault(c => c.Id == updatedCustomer.Id);
                if (existingCustomer == null)
                {
                    Snackbar.Add("Customer not found for update", Severity.Error);
                    return;
                }
#pragma warning disable CS8602
                existingCustomer.Name = updatedCustomer.Name;
                existingCustomer.Email = updatedCustomer.Email;
                existingCustomer.Phone = updatedCustomer.Phone;
                existingCustomer.Address = updatedCustomer.Address;
                existingCustomer.Company = updatedCustomer.Company;
                existingCustomer.IsActive = updatedCustomer.IsActive;
                existingCustomer.CreatedDate = updatedCustomer.CreatedDate;
#pragma warning restore CS8602
                Snackbar.Add("Customer updated successfully", Severity.Success);
            }
        }
    }

    private async Task DeleteCustomer(int customerId)
    {
        await Task.Delay(100);
        try
        {
            var customer = customers.FirstOrDefault(c => c.Id == customerId);
            if (customer == null)
            {
                Snackbar.Add("Customer not found for deletion", Severity.Error);
                return;
            }
            customers.Remove(customer!);
            Snackbar.Add("Customer deleted successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting customer: {ex.Message}", Severity.Error);
        }
    }

    private void ViewCustomerHistory(int customerId)
    {
        // TODO: Implement customer history view
        Snackbar.Add("Customer history feature coming soon", Severity.Info);
    }

    private void ExportCustomersReport()
    {
        // TODO: Implement export functionality
        Snackbar.Add("Export feature coming soon", Severity.Info);
    }
} 
