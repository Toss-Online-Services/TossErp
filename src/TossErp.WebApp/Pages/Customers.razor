@page "/customers"
@using TossErp.WebApp.DTOs
@using TossErp.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Customers Management - TOSS ERP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Customer Overview Cards -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Total Customers</MudText>
                <MudText Typo="Typo.h5">@_totalCustomers</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">+@_newCustomers this month</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Secondary" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Active Customers</MudText>
                <MudText Typo="Typo.h5">@_activeCustomers</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">@_activePercentage% of total</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Average Order Value</MudText>
                <MudText Typo="Typo.h5">R @_averageOrderValue.ToString("N2")</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">+5% from last month</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Loyalty" Color="Color.Error" Size="Size.Large" />
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                </div>
                <MudText Typo="Typo.subtitle1" Class="mb-n1 text-secondary">Loyalty Members</MudText>
                <MudText Typo="Typo.h5">@_loyaltyMembers</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">@_loyaltyPercentage% of total</MudText>
            </MudPaper>
        </MudItem>

        <!-- Customer List -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Customer Management</MudText>
                    <div class="d-flex gap-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.PersonAdd"
                                 OnClick="@(() => OpenCustomerDialog())">
                            Add Customer
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.FileDownload"
                                 OnClick="@ExportCustomers">
                            Export
                        </MudButton>
                    </div>
                </div>

                <MudTable Items="@_customers" Dense="false" Hover="true" Bordered="false" Striped="true"
                         Filter="new Func<Customer,bool>(FilterFunc)"
                         @bind-SelectedItem="_selectedCustomer">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search by name, email or phone"
                                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                    IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Customer ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Phone</MudTh>
                        <MudTh>Loyalty</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Total Orders</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Customer ID">@context.CustomerId</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Phone">@context.Phone</MudTd>
                        <MudTd DataLabel="Loyalty">
                            <MudChip T="string" Color="@context.LoyaltyColor" Size="Size.Small">
                                @context.LoyaltyTier
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@context.StatusColor" Size="Size.Small">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Total Orders">@context.TotalOrders</MudTd>
                        <MudTd>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem Icon="@Icons.Material.Filled.Edit"
                                           OnClick="@(() => OpenCustomerDialog(context))">
                                    Edit
                                </MudMenuItem>
                                <MudMenuItem Icon="@Icons.Material.Filled.History"
                                           OnClick="@(() => ViewOrderHistory(context))">
                                    Order History
                                </MudMenuItem>
                                <MudMenuItem Icon="@Icons.Material.Filled.Loyalty"
                                           OnClick="@(() => ViewLoyaltyDetails(context))">
                                    Loyalty Details
                                </MudMenuItem>
                                @if (context.Status == "Active")
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.Block"
                                               OnClick="@(() => DeactivateCustomer(context))">
                                        Deactivate
                                    </MudMenuItem>
                                }
                                else
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.CheckCircle"
                                               OnClick="@(() => ActivateCustomer(context))">
                                        Activate
                                    </MudMenuItem>
                                }
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Customer Analytics -->
        <MudItem xs="12" md="8">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Customer Growth</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@_customerGrowthSeries" 
                         XAxisLabels="@_monthLabels" Width="100%" Height="300px"/>
            </MudPaper>
        </MudItem>

        <!-- Top Customers -->
        <MudItem xs="12" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Top Customers</MudText>
                <MudList T="string" Dense="true">
                    @foreach (var customer in _topCustomers)
                    {
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText>@customer.Name</MudText>
                                    <MudText Typo="Typo.caption">
                                        @customer.TotalOrders orders | R @customer.TotalSpent.ToString("N2")
                                    </MudText>
                                </div>
                                <MudChip T="string" Color="@customer.LoyaltyColor" Size="Size.Small">
                                    @customer.LoyaltyTier
                                </MudChip>
                            </div>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string _searchString = "";
    private Customer _selectedCustomer = new();
    
    private int _totalCustomers = 1250;
    private int _newCustomers = 45;
    private int _activeCustomers = 980;
    private int _activePercentage => (_activeCustomers * 100) / _totalCustomers;
    private decimal _averageOrderValue = 2499.99m;
    private int _loyaltyMembers = 750;
    private int _loyaltyPercentage => (_loyaltyMembers * 100) / _totalCustomers;
    
    private class Customer
    {
        public string CustomerId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string LoyaltyTier { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public int TotalOrders { get; set; }
        public decimal TotalSpent { get; set; }
        
        public Color LoyaltyColor => LoyaltyTier switch
        {
            "Diamond" => Color.Secondary,
            "Platinum" => Color.Primary,
            "Gold" => Color.Warning,
            "Silver" => Color.Dark,
            _ => Color.Default
        };
        
        public Color StatusColor => Status switch
        {
            "Active" => Color.Success,
            "Inactive" => Color.Error,
            _ => Color.Default
        };
    }
    
    private List<Customer> _customers = new()
    {
        new() { CustomerId = "CUS001", Name = "John Smith", Email = "john.smith@email.com", Phone = "+27 12 345 6789",
                LoyaltyTier = "Diamond", Status = "Active", TotalOrders = 45, TotalSpent = 125000.00m },
        new() { CustomerId = "CUS002", Name = "Sarah Johnson", Email = "sarah.j@email.com", Phone = "+27 23 456 7890",
                LoyaltyTier = "Gold", Status = "Active", TotalOrders = 28, TotalSpent = 75000.00m },
        new() { CustomerId = "CUS003", Name = "Mike Brown", Email = "mike.b@email.com", Phone = "+27 34 567 8901",
                LoyaltyTier = "Silver", Status = "Inactive", TotalOrders = 12, TotalSpent = 25000.00m },
        new() { CustomerId = "CUS004", Name = "Emily Davis", Email = "emily.d@email.com", Phone = "+27 45 678 9012",
                LoyaltyTier = "Platinum", Status = "Active", TotalOrders = 35, TotalSpent = 95000.00m },
        new() { CustomerId = "CUS005", Name = "David Wilson", Email = "david.w@email.com", Phone = "+27 56 789 0123",
                LoyaltyTier = "Gold", Status = "Active", TotalOrders = 22, TotalSpent = 55000.00m }
    };
    
    private List<Customer> _topCustomers => _customers
        .OrderByDescending(c => c.TotalSpent)
        .Take(5)
        .ToList();
    
    private List<ChartSeries> _customerGrowthSeries = new()
    {
        new ChartSeries 
        { 
            Name = "Total Customers", 
            Data = new double[] { 950, 975, 1000, 1050, 1100, 1150, 1175, 1200, 1225, 1235, 1245, 1250 }
        },
        new ChartSeries 
        { 
            Name = "Active Customers", 
            Data = new double[] { 800, 825, 840, 875, 900, 925, 940, 950, 960, 965, 975, 980 }
        }
    };
    
    private string[] _monthLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    
    private bool FilterFunc(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return customer.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               customer.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               customer.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }
    
    private async Task OpenCustomerDialog(Customer customer = null!)
    {
        var parameters = new DialogParameters();
        if (customer != null!)
            parameters.Add("Customer", customer);

        var dialog = await DialogService.ShowAsync<CustomerDialog>(
            customer == null! ? "Add Customer" : "Edit Customer",
            parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Customer saved successfully!", Severity.Success);
        }
    }
    
    private async Task ViewOrderHistory(Customer customer)
    {
        var dialog = await DialogService.ShowAsync<OrderHistoryDialog>(
            $"Order History - {customer.Name}",
            new DialogParameters { ["CustomerId"] = customer.CustomerId });
        await dialog.Result;
    }
    
    private async Task ViewLoyaltyDetails(Customer customer)
    {
        var dialog = await DialogService.ShowAsync<LoyaltyDetailsDialog>(
            $"Loyalty Details - {customer.Name}",
            new DialogParameters { ["CustomerId"] = customer.CustomerId });
        await dialog.Result;
    }
    
    private async Task DeactivateCustomer(Customer customer)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to deactivate {customer.Name}?",
            ["ButtonText"] = "Deactivate",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Deactivation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            customer.Status = "Inactive";
            Snackbar.Add($"{customer.Name} has been deactivated", Severity.Success);
        }
    }
    
    private void ActivateCustomer(Customer customer)
    {
        customer.Status = "Active";
        Snackbar.Add($"{customer.Name} has been activated", Severity.Success);
    }
    
    private void ExportCustomers()
    {
        // In a real application, this would generate and download a customer report
        Snackbar.Add("Customer list exported successfully!", Severity.Success);
    }
} 
