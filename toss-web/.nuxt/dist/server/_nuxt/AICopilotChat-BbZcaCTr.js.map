{"version":3,"file":"AICopilotChat-BbZcaCTr.js","sources":["../../../../components/AICopilotChat.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"isVisible\" class=\"fixed bottom-4 right-4 z-50\">\r\n    <!-- Chat Widget -->\r\n    <div v-if=\"isOpen\" class=\"bg-white dark:bg-gray-800 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 w-80 h-96 flex flex-col\">\r\n      <!-- Header -->\r\n      <div class=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\r\n        <div class=\"flex items-center space-x-2\">\r\n          <div class=\"w-8 h-8 bg-gradient-to-r from-green-400 to-green-600 rounded-full flex items-center justify-center\">\r\n            <svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\r\n            </svg>\r\n          </div>\r\n          <div>\r\n            <h3 class=\"text-sm font-semibold text-gray-900 dark:text-white\">AI Co-Pilot</h3>\r\n            <p class=\"text-xs text-green-600 dark:text-green-400\">Online</p>\r\n          </div>\r\n        </div>\r\n        <button @click=\"toggleChat\" class=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\">\r\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Messages -->\r\n      <div class=\"flex-1 overflow-y-auto p-4 space-y-4\" ref=\"messagesContainer\">\r\n        <div v-for=\"message in messages\" :key=\"message.id\" :class=\"messageClass(message)\">\r\n          <div v-if=\"message.type === 'bot'\" class=\"flex items-start space-x-2\">\r\n            <div class=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0\">\r\n              <svg class=\"w-3 h-3 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"bg-gray-100 dark:bg-gray-700 rounded-lg p-3 max-w-xs\">\r\n              <p class=\"text-sm text-gray-900 dark:text-white\" v-html=\"message.content\"></p>\r\n              <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">{{ formatTime(message.timestamp) }}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div v-else class=\"flex items-start space-x-2 justify-end\">\r\n            <div class=\"bg-blue-600 rounded-lg p-3 max-w-xs\">\r\n              <p class=\"text-sm text-white\">{{ message.content }}</p>\r\n              <p class=\"text-xs text-blue-200 mt-1\">{{ formatTime(message.timestamp) }}</p>\r\n            </div>\r\n            <div class=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0\">\r\n              <span class=\"text-white text-xs font-medium\">You</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Typing Indicator -->\r\n        <div v-if=\"isTyping\" class=\"flex items-start space-x-2\">\r\n          <div class=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0\">\r\n            <svg class=\"w-3 h-3 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"bg-gray-100 dark:bg-gray-700 rounded-lg p-3\">\r\n            <div class=\"flex space-x-1\">\r\n              <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\r\n              <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.1s\"></div>\r\n              <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.2s\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Input -->\r\n      <div class=\"p-4 border-t border-gray-200 dark:border-gray-700\">\r\n        <div class=\"flex space-x-2\">\r\n          <input\r\n            v-model=\"newMessage\"\r\n            @keyup.enter=\"sendMessage\"\r\n            :disabled=\"isTyping\"\r\n            type=\"text\"\r\n            placeholder=\"Ask me anything about your business...\"\r\n            class=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n          />\r\n          <button\r\n            @click=\"sendMessage\"\r\n            :disabled=\"!newMessage.trim() || isTyping\"\r\n            class=\"bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Quick Actions -->\r\n        <div class=\"mt-2 flex flex-wrap gap-1\">\r\n          <button\r\n            v-for=\"action in quickActions\"\r\n            :key=\"action.text\"\r\n            @click=\"sendQuickAction(action.text)\"\r\n            class=\"px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\r\n          >\r\n            {{ action.text }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Floating Button -->\r\n    <button\r\n      v-else\r\n      @click=\"toggleChat\"\r\n      class=\"bg-gradient-to-r from-green-400 to-green-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105\"\r\n    >\r\n      <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"></path>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\ninterface Message {\r\n  id: string\r\n  type: 'user' | 'bot'\r\n  content: string\r\n  timestamp: Date\r\n}\r\n\r\ninterface QuickAction {\r\n  text: string\r\n  action?: () => void\r\n}\r\n\r\nconst isVisible = ref(true)\r\nconst isOpen = ref(false)\r\nconst isTyping = ref(false)\r\nconst newMessage = ref('')\r\nconst messagesContainer = ref<HTMLElement>()\r\n\r\nconst messages = ref<Message[]>([\r\n  {\r\n    id: '1',\r\n    type: 'bot',\r\n    content: 'Hello! I\\'m your AI business co-pilot. I can help you with inventory management, sales analysis, group purchasing, and much more. What would you like to know?',\r\n    timestamp: new Date()\r\n  }\r\n])\r\n\r\nconst quickActions: QuickAction[] = [\r\n  { text: 'Show inventory status' },\r\n  { text: 'Today\\'s sales summary' },\r\n  { text: 'Find group orders' },\r\n  { text: 'Check cash flow' },\r\n  { text: 'Order supplies' }\r\n]\r\n\r\nfunction toggleChat() {\r\n  isOpen.value = !isOpen.value\r\n}\r\n\r\nasync function sendMessage() {\r\n  if (!newMessage.value.trim()) return\r\n\r\n  // Add user message\r\n  const userMessage: Message = {\r\n    id: Date.now().toString(),\r\n    type: 'user',\r\n    content: newMessage.value,\r\n    timestamp: new Date()\r\n  }\r\n  messages.value.push(userMessage)\r\n\r\n  const userInput = newMessage.value\r\n  newMessage.value = ''\r\n  \r\n  // Scroll to bottom\r\n  nextTick(() => {\r\n    scrollToBottom()\r\n  })\r\n\r\n  // Show typing indicator\r\n  isTyping.value = true\r\n\r\n  try {\r\n    // Simulate API call to AI service\r\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))\r\n    \r\n    // Generate AI response (this would be a real API call)\r\n    const aiResponse = generateAIResponse(userInput)\r\n    \r\n    const botMessage: Message = {\r\n      id: (Date.now() + 1).toString(),\r\n      type: 'bot',\r\n      content: aiResponse,\r\n      timestamp: new Date()\r\n    }\r\n    messages.value.push(botMessage)\r\n    \r\n  } catch (error) {\r\n    const errorMessage: Message = {\r\n      id: (Date.now() + 1).toString(),\r\n      type: 'bot',\r\n      content: 'Sorry, I encountered an error. Please try again.',\r\n      timestamp: new Date()\r\n    }\r\n    messages.value.push(errorMessage)\r\n  } finally {\r\n    isTyping.value = false\r\n    nextTick(() => {\r\n      scrollToBottom()\r\n    })\r\n  }\r\n}\r\n\r\nfunction sendQuickAction(text: string) {\r\n  newMessage.value = text\r\n  sendMessage()\r\n}\r\n\r\nfunction generateAIResponse(input: string): string {\r\n  const lowerInput = input.toLowerCase()\r\n  \r\n  if (lowerInput.includes('inventory') || lowerInput.includes('stock')) {\r\n    return 'I can see you have 1,247 items in inventory. 3 items are running low: Maize meal (5 bags left), Cooking oil (2 bottles), and Sugar (8kg remaining). Would you like me to create a group purchase order for these items?'\r\n  } else if (lowerInput.includes('sales') || lowerInput.includes('revenue')) {\r\n    return 'Today\\'s sales are looking good! You\\'ve made R8,450 so far, which is 15% higher than yesterday. Your top-selling items are: 1) Cold drinks (45 sold), 2) Bread (32 loaves), 3) Airtime vouchers (28 sold). Need help with anything specific?'\r\n  } else if (lowerInput.includes('group') || lowerInput.includes('bulk')) {\r\n    return 'There are currently 3 active group purchases you can join: 1) Bulk flour order (save 20%) - 6 businesses participating, 2) Cleaning supplies (save 15%) - 4 businesses, 3) Cold drinks (save 12%) - 8 businesses. Which interests you?'\r\n  } else if (lowerInput.includes('cash') || lowerInput.includes('money') || lowerInput.includes('financial')) {\r\n    return 'Your cash flow looks healthy! Current balance: R12,350. This week\\'s income: R45,200, expenses: R32,100. You have R3,200 in accounts receivable due this week. Need help with payment reminders?'\r\n  } else if (lowerInput.includes('order') || lowerInput.includes('supply')) {\r\n    return 'I can help you order supplies! Based on your sales patterns, I suggest ordering: Maize meal (20 bags), Cooking oil (12 bottles), Sugar (25kg). I found a group order for these items that could save you 18%. Shall I add you to it?'\r\n  } else {\r\n    return `I understand you're asking about \"${input}\". I can help with inventory management, sales analysis, group purchasing, financial tracking, supplier coordination, and much more. Could you be more specific about what you need help with?`\r\n  }\r\n}\r\n\r\nfunction messageClass(message: Message) {\r\n  return message.type === 'user' ? 'flex justify-end' : 'flex justify-start'\r\n}\r\n\r\nfunction formatTime(timestamp: Date) {\r\n  return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n}\r\n\r\nfunction scrollToBottom() {\r\n  if (messagesContainer.value) {\r\n    messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n  }\r\n}\r\n\r\n// Auto-scroll on new messages\r\nwatch(messages, () => {\r\n  nextTick(() => {\r\n    scrollToBottom()\r\n  })\r\n}, { deep: true })\r\n</script>\r\n"],"names":["_unref","_ssrRenderAttrs","_mergeProps","_ssrRenderList","_ssrRenderClass","_ssrInterpolate"],"mappings":";;;;;;AAiIA,UAAM,YAAY,IAAI,IAAI;AAC1B,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,WAAW,IAAI,KAAK;AAC1B,UAAM,aAAa,IAAI,EAAE;AACzB,UAAM,oBAAoB,IAAA;AAE1B,UAAM,WAAW,IAAe;AAAA,MAC9B;AAAA,QACE,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,SAAS;AAAA,QACT,+BAAe,KAAA;AAAA,MAAK;AAAA,IACtB,CACD;AAED,UAAM,eAA8B;AAAA,MAClC,EAAE,MAAM,wBAAA;AAAA,MACR,EAAE,MAAM,wBAAA;AAAA,MACR,EAAE,MAAM,oBAAA;AAAA,MACR,EAAE,MAAM,kBAAA;AAAA,MACR,EAAE,MAAM,iBAAA;AAAA,IAAiB;AAoF3B,aAAS,aAAa,SAAkB;AACtC,aAAO,QAAQ,SAAS,SAAS,qBAAqB;AAAA,IACxD;AAEA,aAAS,WAAW,WAAiB;AACnC,aAAO,UAAU,mBAAmB,IAAI,EAAE,MAAM,WAAW,QAAQ,WAAW;AAAA,IAChF;AAEA,aAAS,iBAAiB;AACxB,UAAI,kBAAkB,OAAO;AAC3B,0BAAkB,MAAM,YAAY,kBAAkB,MAAM;AAAA,MAC9D;AAAA,IACF;AAGA,UAAM,UAAU,MAAM;AACpB,eAAS,MAAM;AACb,uBAAA;AAAA,MACF,CAAC;AAAA,IACH,GAAG,EAAE,MAAM,MAAM;;UA3PJA,MAAA,SAAA,GAAS;AAAE,cAAA,OAAAC,eAAAC,WAAA,EAAA,OAAM,iCAA6B,MAAA,CAAA,CAAA,GAAA;YAE5CF,MAAA,MAAA,GAAM;;AAuBUG,wBAAAH,MAAA,QAAA,IAAX,YAAO;AAAwC,kBAAA,eAAAI,eAAA,aAAa,OAAO,CAAA,CAAA,IAAA;AAClE,gBAAA,QAAQ,SAAI,OAAA;opBAOsC,QAAQ,WAAO,iFACZ,WAAW,QAAQ,SAAS,CAAA;;0JAMvDC,eAAA,QAAQ,OAAO,6DACP,WAAW,QAAQ,SAAS,CAAA;;;;;cAShEL,MAAA,QAAA,GAAQ;0wBASgD,EAAA,mBAAA,QAA6B,+FAC7B,EAAA,mBAAA,OAAA,CAA6B;;;;iJAUnFA,MAAA,UAAA,CAAU,0BAERA,MAAA,QAAA,CAAQ,IAAA,cAAA,8VAOPA,MAAA,UAAA,EAAW,KAAA,KAAUA,MAAA,QAAA,CAAQ,IAAA,cAAA;AAYxBG,wBAAA,eAAV,WAAM;AAKV,kBAAA,sKAAAE,eAAA,OAAO,IAAI,CAAA,WAAA;AAAA;;;;;;;;;;;;;;;;;;"}