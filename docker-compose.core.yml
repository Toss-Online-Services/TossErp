networks:
  toss-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: toss-postgres
    environment:
      POSTGRES_DB: tosserpdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/database:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - toss-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: toss-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - toss-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: toss-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - toss-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # CRM API Service
  crm-api:
    build:
      context: .
      dockerfile: src/Services/crm/Crm.API/Dockerfile
    container_name: toss-crm-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Server=postgres;Database=tosserpdb;User Id=postgres;Password=postgres123;"
      ConnectionStrings__Redis: "redis:6379"
      ConnectionStrings__RabbitMQ: "amqp://admin:admin123@rabbitmq:5672"
    ports:
      - "5002:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - toss-network
    # healthcheck:
    #   test: ["CMD", "dotnet", "--version"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: src/Gateway/Dockerfile
    container_name: toss-gateway
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:8080"
    ports:
      - "8080:8080"
    depends_on:
      - crm-api
    networks:
      - toss-network
    # healthcheck:
    #   test: ["CMD", "dotnet", "--version"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  # Web Client
  web-client:
    build:
      context: ./toss-web
      dockerfile: Dockerfile
    container_name: toss-web-client
    environment:
      NODE_ENV: production
      NUXT_HOST: 0.0.0.0
      NUXT_PORT: 3000
      # API Gateway URL for backend communication
      NUXT_PUBLIC_API_BASE: "http://gateway:8080"
    ports:
      - "3000:3000"
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - toss-network
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 5
