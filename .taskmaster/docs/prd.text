Perfect. I'll update the PRD to include basic AI-assisted features—such as inventory recommendations, sales forecasting, chatbot support, and business insights—embedded directly in user workflows. The collaboration module will also include system-driven peer-to-peer supply chain support, resource pooling, and group purchasing, using data to intelligently match businesses.

I'll get started and let you know when the updated PRD is ready.


# Product Requirements Document (PRD) – TOSS ERP III Stock Module MVP

## Overview

TOSS ERP III is a **third-generation ERP platform** designed for township and rural micro-enterprises in South Africa. This MVP focuses exclusively on the **Stock/Inventory Management module** with a **front-end first approach**. The platform addresses the critical challenges faced by informal businesses: lack of digital tools, limited bulk-buying power, and fragmented operations. TOSS empowers spaza shops, tailors, bakers, mechanics, and street vendors with a comprehensive yet user-friendly inventory solution that goes beyond traditional enterprise software by **connecting businesses to each other and leveraging AI-driven insights**.

**Key Problem Solved:** Informal micro-enterprises operate with thin margins and inefficient inventory processes due to lack of digital tools and collective bargaining power. TOSS provides an intuitive, mobile-first inventory management system that enables real-time stock tracking, automated reordering, and collaborative purchasing.

**Target Users:** Small informal businesses in South African townships and rural areas:
- Spaza shop owners (convenience stores)
- Street vendors and hawkers
- Small-scale manufacturers (tailors, bakers, mechanics)
- Home-based businesses
- Cooperative buying groups

**Value Proposition:** TOSS transforms inventory management from a manual, error-prone process into an intelligent, collaborative system that reduces stockouts, minimizes waste, and enables bulk purchasing power through network effects.

---

## Core Features - Stock Module Only

### Inventory Management (Stock)

* **What it does:** Create, update, and track stock items with real-time levels, low-stock alerts, and intelligent reordering suggestions.
* **Why important:** Prevents stockouts and overstock, boosting sales and reducing waste through data-driven inventory control.
* **How it works:** 
  - **Frontend:** Flutter mobile app with offline-first design using local SQLite database
  - **Backend:** .NET Core microservice with PostgreSQL for data persistence
  - **Real-time sync:** Batch synchronization when connectivity is available
  - **Smart alerts:** Low-stock notifications with AI-powered reorder suggestions
  - **Barcode scanning:** Quick item lookup and stock updates via camera
  - **Stock movements:** Track all inventory changes with audit trail

### Stock Item Management

* **What it does:** Comprehensive item catalog with categories, units of measure, pricing, and supplier information.
* **Why important:** Centralized product database enables efficient stock control and purchasing decisions.
* **How it works:**
  - **Item creation:** Simple form with required fields (name, category, unit, price)
  - **Categories:** Predefined categories (Food, Beverages, Household, etc.)
  - **Units:** Flexible unit management (pieces, kg, liters, etc.)
  - **Pricing:** Cost price, selling price, and margin tracking
  - **Suppliers:** Link items to preferred suppliers for group buying

### Stock Levels & Tracking

* **What it does:** Real-time stock level monitoring with visual indicators and automated alerts.
* **Why important:** Prevents stockouts that lose sales and overstock that ties up capital.
* **How it works:**
  - **Dashboard:** Visual stock levels with color-coded status (green=good, yellow=low, red=out)
  - **Stock counts:** Manual count adjustments with reason tracking
  - **Movement history:** Complete audit trail of all stock changes
  - **Low stock alerts:** Configurable thresholds with push notifications
  - **Reorder points:** Automatic suggestions based on historical usage

### Stock Movements

* **What it does:** Track all inventory changes including purchases, sales, adjustments, and transfers.
* **Why important:** Complete visibility into inventory flow for better decision making.
* **How it works:**
  - **Purchase receipts:** Record incoming stock from suppliers
  - **Sales deductions:** Automatic stock reduction on sales
  - **Adjustments:** Manual corrections with reason codes
  - **Transfers:** Move stock between locations or categories
  - **Reports:** Movement summaries and trend analysis

### Collaborative Purchasing

* **What it does:** Enable group buying and shared logistics to reduce costs and improve access to suppliers.
* **Why important:** Small businesses can access bulk pricing and better supplier terms through collective purchasing power.
* **How it works:**
  - **Group creation:** Form buying groups by location or category
  - **Demand aggregation:** Combine orders from multiple businesses
  - **Supplier matching:** Connect groups with appropriate suppliers
  - **Cost sharing:** Split logistics and bulk discount benefits
  - **Progress tracking:** Real-time updates on group purchase status

---

## User Experience

### User Personas

* **Sindi, Spaza Owner (Primary):** 
  - Needs quick stock updates and low-stock alerts
  - Wants to join group buys for better prices
  - Requires simple, intuitive interface
  - Limited digital literacy

* **Thabo, Township Tailor:**
  - Manages fabric and supply inventory
  - Needs to track material costs accurately
  - Wants to forecast material needs

* **Mary, Home Baker:**
  - Tracks ingredients and finished products
  - Joins group buys for flour and sugar
  - Needs to manage perishable inventory

### Key User Flows

* **Onboarding:** 
  1. Mobile number OTP verification
  2. Business profile setup (name, type, location)
  3. Add initial stock items (name, category, current quantity)
  4. Set up low-stock alerts

* **Daily Stock Management:**
  1. Open app → View dashboard with stock levels
  2. Tap item → Update quantity → Save
  3. Receive low-stock alerts → Join group buy or reorder

* **Stock Count:**
  1. Select "Stock Count" → Choose items or scan barcodes
  2. Enter actual quantities → Add notes if needed
  3. Submit → Sync when online

* **Group Purchase:**
  1. Browse active group buys → Join with quantity
  2. Track progress → Receive updates
  3. Collect items when ready

### UI/UX Considerations

* **Mobile-first, Offline-first:** Flutter app uses local DB for instant load; sync indicator shows pending operations
* **Minimal Text, Iconography:** Simple English, large icons, and tooltips for low-literacy users
* **Color-coded Status:** Green (good stock), Yellow (low stock), Red (out of stock)
* **Large Touch Targets:** Easy-to-tap buttons and forms for mobile use
* **Progressive Disclosure:** Show essential info first, details on demand

---

## Technical Architecture

### Front-End Layer (Priority 1)

* **Flutter Mobile App:** 
  - Dart + Flutter framework
  - `sqflite` for local SQLite database
  - Provider for state management
  - Dio for network requests
  - Offline-first architecture with sync capabilities

* **Nuxt.js Web Portal (Phase 2):**
  - SSR for fast loads
  - Vuex for state management
  - Tailwind CSS for responsive design
  - Dashboard for detailed reports and analytics

### Backend Microservices (.NET Core)

* **Identity Service:** ASP.NET Core Identity + JWT authentication
* **Inventory Service:** Stock management with EF Core + PostgreSQL
* **Notification Service:** Push notifications and alerts
* **Collaboration Service:** Group buying and supplier matching
* **Event Bus:** RabbitMQ for integration events

### Data Stores

* **PostgreSQL:** Main database for inventory data
* **Redis:** Caching and session management
* **Local SQLite:** Mobile app offline storage
* **Event Store:** Audit trail and event sourcing

### Cloud-Native Infrastructure

* **Containerization:** Docker for each service
* **CI/CD:** GitHub Actions for automated deployment
* **Monitoring:** Application Insights for logs and metrics
* **Security:** TLS, JWT authentication, role-based access

---

## Development Roadmap

### Phase 1: Frontend MVP (Weeks 1-4)

* **Week 1:** Flutter project setup and basic UI framework
* **Week 2:** Stock item management (CRUD operations)
* **Week 3:** Stock levels and movement tracking
* **Week 4:** Offline storage and basic sync functionality

### Phase 2: Backend Integration (Weeks 5-8)

* **Week 5:** .NET Core Inventory microservice
* **Week 6:** API Gateway and authentication
* **Week 7:** Real-time sync and notifications
* **Week 8:** Testing and bug fixes

### Phase 3: Advanced Features (Weeks 9-12)

* **Week 9:** Collaborative purchasing features
* **Week 10:** Barcode scanning and quick operations
* **Week 11:** Reports and analytics dashboard
* **Week 12:** Pilot testing and user feedback

### Phase 4: Production Ready (Weeks 13-16)

* **Week 13:** Performance optimization
* **Week 14:** Security hardening and compliance
* **Week 15:** Documentation and training materials
* **Week 16:** Production deployment and monitoring

---

## Logical Dependency Chain

1. **Flutter App Foundation** (UI framework, navigation, local storage)
2. **Stock Item Management** (CRUD operations, categories, units)
3. **Stock Levels & Tracking** (quantities, movements, history)
4. **Offline Storage & Sync** (local DB, conflict resolution)
5. **Backend API Integration** (REST endpoints, authentication)
6. **Real-time Notifications** (alerts, updates)
7. **Collaborative Features** (group buying, supplier matching)
8. **Advanced Features** (barcode scanning, reports, analytics)

---

## Risks and Mitigations

* **Connectivity Constraints:** Offline-first design with robust sync mechanisms
* **User Adoption:** Intuitive UI design and progressive feature rollout
* **Data Privacy:** POPIA compliance and secure data handling
* **Scope Creep:** Strict MVP focus on inventory management only
* **Technical Complexity:** Reuse proven frameworks and patterns

---

## Success Metrics

* **User Engagement:** Daily active users and session duration
* **Inventory Accuracy:** Reduction in stockouts and overstock
* **Cost Savings:** Average reduction in inventory costs
* **User Satisfaction:** App store ratings and user feedback
* **Business Impact:** Revenue increase for pilot businesses

---

## Appendix

* **ERPNext Stock Module Reference:** [ERPNext Documentation](https://docs.erpnext.com/)
* **eShopOnContainers Patterns:** [GitHub Repository](https://github.com/dotnet/eShop)
* **Flutter Best Practices:** [Flutter Documentation](https://docs.flutter.dev/)
* **.NET Core Microservices:** [Microsoft Documentation](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/)
