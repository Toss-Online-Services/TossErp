# Task ID: 4
# Title: Implement Stock Infrastructure
# Status: in-progress
# Dependencies: 3
# Priority: high
# Description: Set up data persistence, repositories, and external service integrations
# Details:
Build infrastructure:
- EF Core DbContext configuration
- PostgreSQL schema and migrations
- Repository implementations
- MassTransit + RabbitMQ event bus integration
- External service clients (barcode, tax)
- Unit of work pattern

# Test Strategy:


# Subtasks:
## 1. Configure EF Core DbContext and Entity Configurations [pending]
### Dependencies: None
### Description: Set up the ApplicationDbContext with proper entity configurations for all Stock domain entities including Items, Warehouses, StockLevels, StockMovements, Batches, and Bins
### Details:
- Create ApplicationDbContext in Stock.Infrastructure/Data/
- Configure entity relationships and constraints
- Set up entity configurations for all domain entities
- Configure indexes for performance optimization
- Set up audit trail configurations

## 2. Create PostgreSQL Schema and Migrations [pending]
### Dependencies: None
### Description: Generate and configure database migrations for the Stock module schema
### Details:
- Create initial migration for Stock entities
- Configure PostgreSQL-specific optimizations
- Set up proper data types and constraints
- Configure connection string and database settings
- Test migration generation and application

## 3. Implement Repository Pattern [pending]
### Dependencies: None
### Description: Create concrete repository implementations for all domain entities
### Details:
- Implement IItemRepository, IWarehouseRepository, IStockLevelRepository, IStockMovementRepository
- Add specialized query methods for complex business logic
- Implement proper error handling and logging
- Add caching strategies where appropriate
- Ensure repository methods align with application layer requirements

## 4. Configure MassTransit + RabbitMQ Event Bus [pending]
### Dependencies: None
### Description: Set up event bus integration for domain events and cross-service communication
### Details:
- Configure MassTransit with RabbitMQ transport
- Set up event publishing for domain events
- Configure event consumers for integration events
- Implement event serialization and deserialization
- Add health checks and monitoring for message bus

## 5. Implement External Service Clients [pending]
### Dependencies: None
### Description: Create clients for external services like barcode scanning and tax calculation
### Details:
- Create IBarcodeService client for barcode scanning
- Create ITaxCalculationService client for tax calculations
- Implement retry policies and circuit breakers
- Add proper error handling and fallback mechanisms
- Configure service discovery and health checks

## 6. Implement Unit of Work Pattern [pending]
### Dependencies: None
### Description: Create the Unit of Work pattern implementation for transaction management
### Details:
- Implement IUnitOfWork interface
- Create UnitOfWork class with transaction management
- Configure dependency injection for Unit of Work
- Add proper disposal and error handling
- Ensure transaction consistency across repositories

