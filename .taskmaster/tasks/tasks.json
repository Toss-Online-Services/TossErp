{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Stock Module Project Structure",
        "description": "Create the foundational project structure for the Stock module including Domain, Application, Infrastructure, API, and Agent projects",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Set up the Stock module projects:\n- Stock.Domain (entities, value objects, aggregates)\n- Stock.Application (commands, queries, handlers)\n- Stock.Infrastructure (EF Core, repositories)\n- Stock.API (controllers, middleware)\n- Stock.Agent (AI/LangChain integration)\n- Stock.Domain.UnitTests\n- Stock.Application.UnitTests",
        "subtasks": [],
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 2,
        "title": "Implement Stock Domain Model",
        "description": "Create domain entities, value objects, and aggregates for the Stock module",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Implement domain model:\n- Item aggregate with ItemId, SKU, Name, etc.\n- Warehouse entity\n- StockLevel entity\n- StockMovement entity\n- Value objects: Quantity, Money, SKU, MovementType\n- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.\n- Business rules and validations",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Base Domain Classes",
            "description": "Set up base classes for Entity, AggregateRoot, ValueObject, and DomainEvent",
            "details": "Create foundational domain classes:\\n- Entity<T> base class with Id property\\n- AggregateRoot base class extending Entity\\n- ValueObject base class with equality implementation\\n- IDomainEvent interface\\n- DomainEvent base class with timestamp",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Implement Value Objects",
            "description": "Create value objects for Quantity, Money, SKU, and MovementType",
            "details": "Implement value objects:\\n- Quantity: Value, Unit, conversion logic\\n- Money: Amount, Currency (ZAR default)\\n- SKU: Value with validation (alphanumeric, max length)\\n- MovementType: Enum (Receipt, Issue, Adjustment, Transfer)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Create Item Aggregate",
            "description": "Implement the Item aggregate root with properties and business logic",
            "details": "Create Item aggregate:\\n- Properties: ItemId, TenantId, SKU, Barcode, Name, Description, Category, Unit, SellingPrice, CostPrice, ReorderLevel, ReorderQty, IsActive\\n- Methods: Create, Update, Deactivate, UpdatePricing, SetReorderLevels\\n- Validations: Required fields, price ranges, reorder logic\\n- Events: ItemCreated, ItemUpdated, ItemDeactivated",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 4,
            "title": "Implement Warehouse Entity",
            "description": "Create Warehouse entity with location and status management",
            "details": "Implement Warehouse entity:\\n- Properties: WarehouseId, TenantId, Code, Name, Address, IsDefault, IsActive\\n- Methods: Create, Update, SetAsDefault, Deactivate\\n- Business rules: Only one default warehouse per tenant\\n- Validations: Unique code per tenant",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 5,
            "title": "Create Stock Movement Entities",
            "description": "Implement StockLevel and StockMovement entities for tracking inventory",
            "details": "Create stock tracking entities:\\n- StockLevel: ItemId, WarehouseId, OnHand, Available, OnOrder, Reserved\\n- StockMovement: MovementId, TenantId, ItemId, WarehouseId, Type, Qty, RefType, RefId, Reason, CreatedBy, CreatedAt\\n- Methods: RecordMovement, CalculateAvailable\\n- Validations: Prevent negative stock (configurable)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 6,
            "title": "Define Domain Events",
            "description": "Create all domain events for stock-related operations",
            "details": "Implement domain events:\\n- ItemCreated, ItemUpdated, ItemDeactivated\\n- StockReceived, StockIssued, StockAdjusted, StockTransferred\\n- StockLevelLow (when stock < reorder level)\\n- WarehouseCreated, WarehouseUpdated\\n- Include relevant data in each event for downstream consumers",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          }
        ],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 3,
        "title": "Create Stock Application Layer",
        "description": "Implement CQRS commands, queries, and handlers for stock operations",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Build application layer:\n- Commands: CreateItem, UpdateItem, ReceiveStock, IssueStock, AdjustStock\n- Queries: GetItems, GetStockLevels, GetMovementHistory\n- DTOs and mappings\n- Validators using FluentValidation\n- Event handlers for external events (SaleCompleted, etc.)",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Commands",
            "description": "Implement CQRS commands for stock operations",
            "details": "Create command classes:\\n- CreateItemCommand\\n- UpdateItemCommand\\n- ReceiveStockCommand\\n- IssueStockCommand\\n- AdjustStockCommand\\n- TransferStockCommand\\n- Each command should include validation attributes and proper data structure",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Create Queries",
            "description": "Implement CQRS queries for stock operations",
            "details": "Create query classes:\\n- GetItemsQuery (with filtering, search, pagination)\\n- GetItemByIdQuery\\n- GetStockLevelsQuery\\n- GetMovementHistoryQuery\\n- GetLowStockItemsQuery\\n- Each query should include proper parameters and return appropriate DTOs",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Create DTOs",
            "description": "Implement Data Transfer Objects for API responses",
            "details": "Create DTO classes:\\n- ItemDto (with all item properties)\\n- StockLevelDto (current stock information)\\n- MovementDto (movement history)\\n- CreateItemRequest/Response\\n- UpdateItemRequest\\n- StockMovementRequest\\n- PaginatedResult<T> for list responses",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Implement Command Handlers",
            "description": "Create command handlers using MediatR",
            "details": "Implement command handlers:\\n- CreateItemCommandHandler\\n- UpdateItemCommandHandler\\n- ReceiveStockCommandHandler\\n- IssueStockCommandHandler\\n- AdjustStockCommandHandler\\n- TransferStockCommandHandler\\n- Each handler should use repositories, validate business rules, and publish domain events",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Implement Query Handlers",
            "description": "Create query handlers using MediatR",
            "details": "Implement query handlers:\\n- GetItemsQueryHandler\\n- GetItemByIdQueryHandler\\n- GetStockLevelsQueryHandler\\n- GetMovementHistoryQueryHandler\\n- GetLowStockItemsQueryHandler\\n- Each handler should use repositories and return appropriate DTOs",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Create Validators",
            "description": "Implement FluentValidation validators",
            "details": "Create validators:\\n- CreateItemCommandValidator\\n- UpdateItemCommandValidator\\n- ReceiveStockCommandValidator\\n- IssueStockCommandValidator\\n- AdjustStockCommandValidator\\n- TransferStockCommandValidator\\n- Each validator should enforce business rules and data validation",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          }
        ],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 4,
        "title": "Implement Stock Infrastructure",
        "description": "Set up data persistence, repositories, and external service integrations",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Build infrastructure:\n- EF Core DbContext configuration\n- PostgreSQL schema and migrations\n- Repository implementations\n- MassTransit + RabbitMQ event bus integration\n- External service clients (barcode, tax)\n- Unit of work pattern",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure EF Core DbContext and Entity Configurations",
            "description": "Set up the ApplicationDbContext with proper entity configurations for all Stock domain entities including Items, Warehouses, StockLevels, StockMovements, Batches, and Bins",
            "details": "- Create ApplicationDbContext in Stock.Infrastructure/Data/\n- Configure entity relationships and constraints\n- Set up entity configurations for all domain entities\n- Configure indexes for performance optimization\n- Set up audit trail configurations",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Create PostgreSQL Schema and Migrations",
            "description": "Generate and configure database migrations for the Stock module schema",
            "details": "- Create initial migration for Stock entities\n- Configure PostgreSQL-specific optimizations\n- Set up proper data types and constraints\n- Configure connection string and database settings\n- Test migration generation and application",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Implement Repository Pattern",
            "description": "Create concrete repository implementations for all domain entities",
            "details": "- Implement IItemRepository, IWarehouseRepository, IStockLevelRepository, IStockMovementRepository\n- Add specialized query methods for complex business logic\n- Implement proper error handling and logging\n- Add caching strategies where appropriate\n- Ensure repository methods align with application layer requirements",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "Configure MassTransit + RabbitMQ Event Bus",
            "description": "Set up event bus integration for domain events and cross-service communication",
            "details": "- Configure MassTransit with RabbitMQ transport\n- Set up event publishing for domain events\n- Configure event consumers for integration events\n- Implement event serialization and deserialization\n- Add health checks and monitoring for message bus",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 5,
            "title": "Implement External Service Clients",
            "description": "Create clients for external services like barcode scanning and tax calculation",
            "details": "- Create IBarcodeService client for barcode scanning\n- Create ITaxCalculationService client for tax calculations\n- Implement retry policies and circuit breakers\n- Add proper error handling and fallback mechanisms\n- Configure service discovery and health checks",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 6,
            "title": "Implement Unit of Work Pattern",
            "description": "Create the Unit of Work pattern implementation for transaction management",
            "details": "- Implement IUnitOfWork interface\n- Create UnitOfWork class with transaction management\n- Configure dependency injection for Unit of Work\n- Add proper disposal and error handling\n- Ensure transaction consistency across repositories",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          }
        ],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 5,
        "title": "Build Stock API Endpoints",
        "description": "Create RESTful API controllers and endpoints for stock management",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API layer:\n- ItemsController (CRUD, bulk import)\n- StockMovementsController (receipts, issues, adjustments)\n- ReportsController (ledger, valuation)\n- Middleware for tenant resolution\n- API versioning\n- Swagger documentation\n- Request/response models",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 6,
        "title": "Implement Event-Driven Integration",
        "description": "Set up event publishing and subscription for cross-service communication",
        "status": "done",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Configure event-driven architecture:\n- Publish events: ItemCreated, StockReceived, StockLevelLow\n- Subscribe to events: SaleCompleted, PurchaseOrderReceived\n- Implement outbox pattern for reliability\n- Event versioning strategy\n- Integration testing for event flows",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 7,
        "title": "Create Stock Background Services",
        "description": "Implement background workers for monitoring and sync operations",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Build background services:\n- LowStockMonitor service\n- StockSyncService for offline sync\n- Scheduled reports generation\n- SignalR hub for real-time updates\n- Health check implementations",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 8,
        "title": "Implement Stock AI Agent",
        "description": "Build LangChain-powered AI agent for stock recommendations and automation",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Create AI agent:\n- LangChain integration setup\n- Reorder point optimization ML model\n- Demand forecasting implementation\n- Anomaly detection algorithms\n- Natural language query processing\n- Auto-purchase order generation (with approval)",
        "subtasks": [],
        "estimatedHours": 12,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 9,
        "title": "Build Flutter Mobile Stock UI",
        "description": "Create Flutter screens for stock management with offline support",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement mobile UI:\n- Stock dashboard screen\n- Items list with search/filter\n- Item detail and edit screens\n- Stock adjustment screens\n- Reports and analytics views\n- Offline data storage with SQLite\n- Sync queue implementation",
        "subtasks": [],
        "estimatedHours": 16,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 10,
        "title": "Build Nuxt 3 Web Stock UI",
        "description": "Create web interface for stock management with advanced features",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement web UI:\n- Stock management dashboard\n- DataTable with inline editing\n- Bulk import/export functionality\n- Stock ledger and reports\n- AI insights panel\n- Real-time updates via SignalR\n- Pinia state management",
        "subtasks": [],
        "estimatedHours": 14,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 11,
        "title": "Implement Offline Sync Protocol",
        "description": "Build robust offline-to-online synchronization mechanism",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "details": "Create sync protocol:\n- Define sync batch format\n- Implement conflict resolution (last-write-wins)\n- Build sync endpoints in API\n- Create sync service in mobile app\n- Handle large batch optimization\n- Error recovery mechanisms",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 12,
        "title": "Create Stock Reports Module",
        "description": "Implement comprehensive reporting functionality",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "details": "Build reporting features:\n- Stock ledger report\n- Valuation report\n- Movement summary\n- Low stock analysis\n- Export to CSV/PDF\n- Report scheduling\n- Email delivery integration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 13,
        "title": "Implement Security & Multi-tenancy",
        "description": "Add security features and ensure proper tenant isolation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Security implementation:\n- Row-level security by TenantId\n- Role-based access (Owner, Manager, Clerk)\n- API authentication middleware\n- Audit trail for all changes\n- Data encryption at rest\n- Rate limiting\n- POPIA compliance checks",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 14,
        "title": "Write Unit Tests",
        "description": "Create comprehensive unit tests for domain and application layers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Unit testing:\n- Domain logic tests (calculations, validations)\n- Application command/query handler tests\n- Value object conversion tests\n- Mock external dependencies\n- Achieve >80% code coverage\n- Use xUnit and Moq",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 15,
        "title": "Write Integration Tests",
        "description": "Create integration tests for API and infrastructure",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "Integration testing:\n- API endpoint tests\n- Repository operation tests\n- Event publishing/handling tests\n- Database migration tests\n- External service integration tests\n- Use TestContainers for dependencies",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 16,
        "title": "Create E2E Tests",
        "description": "Build end-to-end tests for complete workflows",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "E2E testing:\n- Complete stock workflow tests\n- Offline/online transition tests\n- Multi-tenant scenario tests\n- Flutter integration tests\n- Cypress tests for web UI\n- Performance benchmarks",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 17,
        "title": "Set up DevOps Pipeline",
        "description": "Configure CI/CD pipeline and containerization",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "details": "DevOps setup:\n- Dockerize all services\n- GitHub Actions CI/CD pipeline\n- Automated testing in pipeline\n- Database migration automation\n- Health check endpoints\n- Kubernetes manifests\n- Environment configuration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 18,
        "title": "Implement Monitoring & Observability",
        "description": "Add logging, metrics, and distributed tracing",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "details": "Observability setup:\n- Structured logging with Serilog\n- OpenTelemetry integration\n- Distributed tracing setup\n- Custom metrics for stock operations\n- Performance monitoring\n- Alert configuration\n- Dashboard creation",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 19,
        "title": "Create Documentation",
        "description": "Write comprehensive documentation for the Stock module",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Documentation:\n- API documentation with Swagger\n- Developer guide\n- Deployment guide\n- User manual for mobile/web\n- Architecture diagrams\n- Database schema documentation\n- Integration guide for other services",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 20,
        "title": "Performance Optimization & Final Testing",
        "description": "Optimize performance and conduct final testing before deployment",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "details": "Final optimization:\n- Performance profiling and optimization\n- Load testing with k6/Locust\n- Security vulnerability scanning\n- Final bug fixes\n- User acceptance testing\n- Deployment readiness checklist\n- Production configuration",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2024-01-20T10:00:00Z",
      "projectName": "TOSS Stock Module",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 180,
      "created": "2025-08-13T16:37:43.174Z",
      "description": "Tasks for master context",
      "updated": "2025-08-15T11:41:46.652Z"
    }
  },
  "stock-review": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Stock Module Project Structure",
        "description": "Create the foundational project structure for the Stock module including Domain, Application, Infrastructure, API, and Agent projects",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "details": "Set up the Stock module projects:\n- Stock.Domain (entities, value objects, aggregates)\n- Stock.Application (commands, queries, handlers)\n- Stock.Infrastructure (EF Core, repositories)\n- Stock.API (controllers, middleware)\n- Stock.Agent (AI/LangChain integration)\n- Stock.Domain.UnitTests\n- Stock.Application.UnitTests",
        "subtasks": [],
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 2,
        "title": "Implement Stock Domain Model",
        "description": "Create domain entities, value objects, and aggregates for the Stock module",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Implement domain model:\n- Item aggregate with ItemId, SKU, Name, etc.\n- Warehouse entity\n- StockLevel entity\n- StockMovement entity\n- Value objects: Quantity, Money, SKU, MovementType\n- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.\n- Business rules and validations",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 3,
        "title": "Create Stock Application Layer",
        "description": "Implement CQRS commands, queries, and handlers for stock operations",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Build application layer:\n- Commands: CreateItem, UpdateItem, ReceiveStock, IssueStock, AdjustStock\n- Queries: GetItems, GetStockLevels, GetMovementHistory\n- DTOs and mappings\n- Validators using FluentValidation\n- Event handlers for external events (SaleCompleted, etc.)",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 4,
        "title": "Implement Stock Infrastructure",
        "description": "Set up data persistence, repositories, and external service integrations",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Build infrastructure:\n- EF Core DbContext configuration\n- PostgreSQL schema and migrations\n- Repository implementations\n- MassTransit + RabbitMQ event bus integration\n- External service clients (barcode, tax)\n- Unit of work pattern",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 5,
        "title": "Build Stock API Endpoints",
        "description": "Create RESTful API controllers and endpoints for stock management",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API layer:\n- ItemsController (CRUD, bulk import)\n- StockMovementsController (receipts, issues, adjustments)\n- ReportsController (ledger, valuation)\n- Middleware for tenant resolution\n- API versioning\n- Swagger documentation\n- Request/response models",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 6,
        "title": "Implement Event-Driven Integration",
        "description": "Set up event publishing and subscription for cross-service communication",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Configure event-driven architecture:\n- Publish events: ItemCreated, StockReceived, StockLevelLow\n- Subscribe to events: SaleCompleted, PurchaseOrderReceived\n- Implement outbox pattern for reliability\n- Event versioning strategy\n- Integration testing for event flows",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 7,
        "title": "Create Stock Background Services",
        "description": "Implement background workers for monitoring and sync operations",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Build background services:\n- LowStockMonitor service\n- StockSyncService for offline sync\n- Scheduled reports generation\n- SignalR hub for real-time updates\n- Health check implementations",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 8,
        "title": "Implement Stock AI Agent",
        "description": "Build LangChain-powered AI agent for stock recommendations and automation",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Create AI agent:\n- LangChain integration setup\n- Reorder point optimization ML model\n- Demand forecasting implementation\n- Anomaly detection algorithms\n- Natural language query processing\n- Auto-purchase order generation (with approval)",
        "subtasks": [],
        "estimatedHours": 12,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 9,
        "title": "Build Flutter Mobile Stock UI",
        "description": "Create Flutter screens for stock management with offline support",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement mobile UI:\n- Stock dashboard screen\n- Items list with search/filter\n- Item detail and edit screens\n- Stock adjustment screens\n- Reports and analytics views\n- Offline data storage with SQLite\n- Sync queue implementation",
        "subtasks": [],
        "estimatedHours": 16,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 10,
        "title": "Build Nuxt 3 Web Stock UI",
        "description": "Create web interface for stock management with advanced features",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement web UI:\n- Stock management dashboard\n- DataTable with inline editing\n- Bulk import/export functionality\n- Stock ledger and reports\n- AI insights panel\n- Real-time updates via SignalR\n- Pinia state management",
        "subtasks": [],
        "estimatedHours": 14,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 11,
        "title": "Implement Offline Sync Protocol",
        "description": "Build robust offline-to-online synchronization mechanism",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "details": "Create sync protocol:\n- Define sync batch format\n- Implement conflict resolution (last-write-wins)\n- Build sync endpoints in API\n- Create sync service in mobile app\n- Handle large batch optimization\n- Error recovery mechanisms",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 12,
        "title": "Create Stock Reports Module",
        "description": "Implement comprehensive reporting functionality",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "details": "Build reporting features:\n- Stock ledger report\n- Valuation report\n- Movement summary\n- Low stock analysis\n- Export to CSV/PDF\n- Report scheduling\n- Email delivery integration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 13,
        "title": "Implement Security & Multi-tenancy",
        "description": "Add security features and ensure proper tenant isolation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Security implementation:\n- Row-level security by TenantId\n- Role-based access (Owner, Manager, Clerk)\n- API authentication middleware\n- Audit trail for all changes\n- Data encryption at rest\n- Rate limiting\n- POPIA compliance checks",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 14,
        "title": "Write Unit Tests",
        "description": "Create comprehensive unit tests for domain and application layers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Unit testing:\n- Domain logic tests (calculations, validations)\n- Application command/query handler tests\n- Value object conversion tests\n- Mock external dependencies\n- Achieve >80% code coverage\n- Use xUnit and Moq",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 15,
        "title": "Write Integration Tests",
        "description": "Create integration tests for API and infrastructure",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "Integration testing:\n- API endpoint tests\n- Repository operation tests\n- Event publishing/handling tests\n- Database migration tests\n- External service integration tests\n- Use TestContainers for dependencies",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 16,
        "title": "Create E2E Tests",
        "description": "Build end-to-end tests for complete workflows",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "E2E testing:\n- Complete stock workflow tests\n- Offline/online transition tests\n- Multi-tenant scenario tests\n- Flutter integration tests\n- Cypress tests for web UI\n- Performance benchmarks",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 17,
        "title": "Set up DevOps Pipeline",
        "description": "Configure CI/CD pipeline and containerization",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "details": "DevOps setup:\n- Dockerize all services\n- GitHub Actions CI/CD pipeline\n- Automated testing in pipeline\n- Database migration automation\n- Health check endpoints\n- Kubernetes manifests\n- Environment configuration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 18,
        "title": "Implement Monitoring & Observability",
        "description": "Add logging, metrics, and distributed tracing",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "details": "Observability setup:\n- Structured logging with Serilog\n- OpenTelemetry integration\n- Distributed tracing setup\n- Custom metrics for stock operations\n- Performance monitoring\n- Alert configuration\n- Dashboard creation",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 19,
        "title": "Create Documentation",
        "description": "Write comprehensive documentation for the Stock module",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Documentation:\n- API documentation with Swagger\n- Developer guide\n- Deployment guide\n- User manual for mobile/web\n- Architecture diagrams\n- Database schema documentation\n- Integration guide for other services",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 20,
        "title": "Performance Optimization & Final Testing",
        "description": "Optimize performance and conduct final testing before deployment",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "details": "Final optimization:\n- Performance profiling and optimization\n- Load testing with k6/Locust\n- Security vulnerability scanning\n- Final bug fixes\n- User acceptance testing\n- Deployment readiness checklist\n- Production configuration",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2024-01-20T10:00:00Z",
      "projectName": "TOSS Stock Module",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 180,
      "created": "2025-08-13T16:37:43.174Z",
      "description": "Tasks for master context"
    }
  }
}