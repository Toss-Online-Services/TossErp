{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Stock Module Project Structure",
        "description": "Create the foundational project structure for the Stock module including Domain, Application, Infrastructure, API, and Agent projects",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Set up the Stock module projects:\n- Stock.Domain (entities, value objects, aggregates)\n- Stock.Application (commands, queries, handlers)\n- Stock.Infrastructure (EF Core, repositories)\n- Stock.API (controllers, middleware)\n- Stock.Agent (AI/LangChain integration)\n- Stock.Domain.UnitTests\n- Stock.Application.UnitTests",
        "subtasks": [],
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 2,
        "title": "Implement Stock Domain Model",
        "description": "Create domain entities, value objects, and aggregates for the Stock module",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Implement domain model:\n- Item aggregate with ItemId, SKU, Name, etc.\n- Warehouse entity\n- StockLevel entity\n- StockMovement entity\n- Value objects: Quantity, Money, SKU, MovementType\n- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.\n- Business rules and validations",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Base Domain Classes",
            "description": "Set up base classes for Entity, AggregateRoot, ValueObject, and DomainEvent",
            "details": "Create foundational domain classes:\\n- Entity<T> base class with Id property\\n- AggregateRoot base class extending Entity\\n- ValueObject base class with equality implementation\\n- IDomainEvent interface\\n- DomainEvent base class with timestamp",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Implement Value Objects",
            "description": "Create value objects for Quantity, Money, SKU, and MovementType",
            "details": "Implement value objects:\\n- Quantity: Value, Unit, conversion logic\\n- Money: Amount, Currency (ZAR default)\\n- SKU: Value with validation (alphanumeric, max length)\\n- MovementType: Enum (Receipt, Issue, Adjustment, Transfer)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Create Item Aggregate",
            "description": "Implement the Item aggregate root with properties and business logic",
            "details": "Create Item aggregate:\\n- Properties: ItemId, TenantId, SKU, Barcode, Name, Description, Category, Unit, SellingPrice, CostPrice, ReorderLevel, ReorderQty, IsActive\\n- Methods: Create, Update, Deactivate, UpdatePricing, SetReorderLevels\\n- Validations: Required fields, price ranges, reorder logic\\n- Events: ItemCreated, ItemUpdated, ItemDeactivated",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 4,
            "title": "Implement Warehouse Entity",
            "description": "Create Warehouse entity with location and status management",
            "details": "Implement Warehouse entity:\\n- Properties: WarehouseId, TenantId, Code, Name, Address, IsDefault, IsActive\\n- Methods: Create, Update, SetAsDefault, Deactivate\\n- Business rules: Only one default warehouse per tenant\\n- Validations: Unique code per tenant",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 5,
            "title": "Create Stock Movement Entities",
            "description": "Implement StockLevel and StockMovement entities for tracking inventory",
            "details": "Create stock tracking entities:\\n- StockLevel: ItemId, WarehouseId, OnHand, Available, OnOrder, Reserved\\n- StockMovement: MovementId, TenantId, ItemId, WarehouseId, Type, Qty, RefType, RefId, Reason, CreatedBy, CreatedAt\\n- Methods: RecordMovement, CalculateAvailable\\n- Validations: Prevent negative stock (configurable)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 6,
            "title": "Define Domain Events",
            "description": "Create all domain events for stock-related operations",
            "details": "Implement domain events:\\n- ItemCreated, ItemUpdated, ItemDeactivated\\n- StockReceived, StockIssued, StockAdjusted, StockTransferred\\n- StockLevelLow (when stock < reorder level)\\n- WarehouseCreated, WarehouseUpdated\\n- Include relevant data in each event for downstream consumers",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          }
        ],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 3,
        "title": "Create Stock Application Layer",
        "description": "Implement CQRS commands, queries, and handlers for stock operations",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Build application layer:\n- Commands: CreateItem, UpdateItem, ReceiveStock, IssueStock, AdjustStock\n- Queries: GetItems, GetStockLevels, GetMovementHistory\n- DTOs and mappings\n- Validators using FluentValidation\n- Event handlers for external events (SaleCompleted, etc.)",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Commands",
            "description": "Implement CQRS commands for stock operations",
            "details": "Create command classes:\\n- CreateItemCommand\\n- UpdateItemCommand\\n- ReceiveStockCommand\\n- IssueStockCommand\\n- AdjustStockCommand\\n- TransferStockCommand\\n- Each command should include validation attributes and proper data structure",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Create Queries",
            "description": "Implement CQRS queries for stock operations",
            "details": "Create query classes:\\n- GetItemsQuery (with filtering, search, pagination)\\n- GetItemByIdQuery\\n- GetStockLevelsQuery\\n- GetMovementHistoryQuery\\n- GetLowStockItemsQuery\\n- Each query should include proper parameters and return appropriate DTOs",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Create DTOs",
            "description": "Implement Data Transfer Objects for API responses",
            "details": "Create DTO classes:\\n- ItemDto (with all item properties)\\n- StockLevelDto (current stock information)\\n- MovementDto (movement history)\\n- CreateItemRequest/Response\\n- UpdateItemRequest\\n- StockMovementRequest\\n- PaginatedResult<T> for list responses",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Implement Command Handlers",
            "description": "Create command handlers using MediatR",
            "details": "Implement command handlers:\\n- CreateItemCommandHandler\\n- UpdateItemCommandHandler\\n- ReceiveStockCommandHandler\\n- IssueStockCommandHandler\\n- AdjustStockCommandHandler\\n- TransferStockCommandHandler\\n- Each handler should use repositories, validate business rules, and publish domain events",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Implement Query Handlers",
            "description": "Create query handlers using MediatR",
            "details": "Implement query handlers:\\n- GetItemsQueryHandler\\n- GetItemByIdQueryHandler\\n- GetStockLevelsQueryHandler\\n- GetMovementHistoryQueryHandler\\n- GetLowStockItemsQueryHandler\\n- Each handler should use repositories and return appropriate DTOs",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Create Validators",
            "description": "Implement FluentValidation validators",
            "details": "Create validators:\\n- CreateItemCommandValidator\\n- UpdateItemCommandValidator\\n- ReceiveStockCommandValidator\\n- IssueStockCommandValidator\\n- AdjustStockCommandValidator\\n- TransferStockCommandValidator\\n- Each validator should enforce business rules and data validation",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          }
        ],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 4,
        "title": "Implement Stock Infrastructure",
        "description": "Set up data persistence, repositories, and external service integrations",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Build infrastructure:\n- EF Core DbContext configuration\n- PostgreSQL schema and migrations\n- Repository implementations\n- MassTransit + RabbitMQ event bus integration\n- External service clients (barcode, tax)\n- Unit of work pattern",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure EF Core DbContext and Entity Configurations",
            "description": "Set up the ApplicationDbContext with proper entity configurations for all Stock domain entities including Items, Warehouses, StockLevels, StockMovements, Batches, and Bins",
            "details": "- Create ApplicationDbContext in Stock.Infrastructure/Data/\n- Configure entity relationships and constraints\n- Set up entity configurations for all domain entities\n- Configure indexes for performance optimization\n- Set up audit trail configurations",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Create PostgreSQL Schema and Migrations",
            "description": "Generate and configure database migrations for the Stock module schema",
            "details": "- Create initial migration for Stock entities\n- Configure PostgreSQL-specific optimizations\n- Set up proper data types and constraints\n- Configure connection string and database settings\n- Test migration generation and application",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Implement Repository Pattern",
            "description": "Create concrete repository implementations for all domain entities",
            "details": "- Implement IItemRepository, IWarehouseRepository, IStockLevelRepository, IStockMovementRepository\n- Add specialized query methods for complex business logic\n- Implement proper error handling and logging\n- Add caching strategies where appropriate\n- Ensure repository methods align with application layer requirements",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "Configure MassTransit + RabbitMQ Event Bus",
            "description": "Set up event bus integration for domain events and cross-service communication",
            "details": "- Configure MassTransit with RabbitMQ transport\n- Set up event publishing for domain events\n- Configure event consumers for integration events\n- Implement event serialization and deserialization\n- Add health checks and monitoring for message bus",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 5,
            "title": "Implement External Service Clients",
            "description": "Create clients for external services like barcode scanning and tax calculation",
            "details": "- Create IBarcodeService client for barcode scanning\n- Create ITaxCalculationService client for tax calculations\n- Implement retry policies and circuit breakers\n- Add proper error handling and fallback mechanisms\n- Configure service discovery and health checks",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 6,
            "title": "Implement Unit of Work Pattern",
            "description": "Create the Unit of Work pattern implementation for transaction management",
            "details": "- Implement IUnitOfWork interface\n- Create UnitOfWork class with transaction management\n- Configure dependency injection for Unit of Work\n- Add proper disposal and error handling\n- Ensure transaction consistency across repositories",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          }
        ],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 5,
        "title": "Build Stock API Endpoints",
        "description": "Create RESTful API controllers and endpoints for stock management",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API layer:\n- ItemsController (CRUD, bulk import)\n- StockMovementsController (receipts, issues, adjustments)\n- ReportsController (ledger, valuation)\n- Middleware for tenant resolution\n- API versioning\n- Swagger documentation\n- Request/response models",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 6,
        "title": "Implement Event-Driven Integration",
        "description": "Set up event publishing and subscription for cross-service communication",
        "status": "done",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Configure event-driven architecture:\n- Publish events: ItemCreated, StockReceived, StockLevelLow\n- Subscribe to events: SaleCompleted, PurchaseOrderReceived\n- Implement outbox pattern for reliability\n- Event versioning strategy\n- Integration testing for event flows",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 7,
        "title": "Create Stock Background Services",
        "description": "Implement background workers for monitoring and sync operations",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Build background services:\n- LowStockMonitor service\n- StockSyncService for offline sync\n- Scheduled reports generation\n- SignalR hub for real-time updates\n- Health check implementations",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 8,
        "title": "Implement Stock AI Agent",
        "description": "Build LangChain-powered AI agent for stock recommendations and automation",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Create AI agent:\n- LangChain integration setup\n- Reorder point optimization ML model\n- Demand forecasting implementation\n- Anomaly detection algorithms\n- Natural language query processing\n- Auto-purchase order generation (with approval)",
        "subtasks": [],
        "estimatedHours": 12,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 9,
        "title": "Build Flutter Mobile Stock UI",
        "description": "Create Flutter screens for stock management with offline support",
        "status": "done",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement mobile UI:\n- Stock dashboard screen\n- Items list with search/filter\n- Item detail and edit screens\n- Stock adjustment screens\n- Reports and analytics views\n- Offline data storage with SQLite\n- Sync queue implementation",
        "subtasks": [],
        "estimatedHours": 16,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 10,
        "title": "Build Nuxt 3 Web Stock UI",
        "description": "Create web interface for stock management with advanced features",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement web UI:\n- Stock management dashboard\n- DataTable with inline editing\n- Bulk import/export functionality\n- Stock ledger and reports\n- AI insights panel\n- Real-time updates via SignalR\n- Pinia state management",
        "subtasks": [],
        "estimatedHours": 14,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 11,
        "title": "Implement Offline Sync Protocol",
        "description": "Build robust offline-to-online synchronization mechanism",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "details": "Create sync protocol:\n- Define sync batch format\n- Implement conflict resolution (last-write-wins)\n- Build sync endpoints in API\n- Create sync service in mobile app\n- Handle large batch optimization\n- Error recovery mechanisms",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 12,
        "title": "Create Stock Reports Module",
        "description": "Implement comprehensive reporting functionality",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "details": "Build reporting features:\n- Stock ledger report\n- Valuation report\n- Movement summary\n- Low stock analysis\n- Export to CSV/PDF\n- Report scheduling\n- Email delivery integration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 13,
        "title": "Implement Security & Multi-tenancy",
        "description": "Add security features and ensure proper tenant isolation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Security implementation:\n- Row-level security by TenantId\n- Role-based access (Owner, Manager, Clerk)\n- API authentication middleware\n- Audit trail for all changes\n- Data encryption at rest\n- Rate limiting\n- POPIA compliance checks",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 14,
        "title": "Write Unit Tests",
        "description": "Create comprehensive unit tests for domain and application layers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Unit testing:\n- Domain logic tests (calculations, validations)\n- Application command/query handler tests\n- Value object conversion tests\n- Mock external dependencies\n- Achieve >80% code coverage\n- Use xUnit and Moq",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 15,
        "title": "Write Integration Tests",
        "description": "Create integration tests for API and infrastructure",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "Integration testing:\n- API endpoint tests\n- Repository operation tests\n- Event publishing/handling tests\n- Database migration tests\n- External service integration tests\n- Use TestContainers for dependencies",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 16,
        "title": "Create E2E Tests",
        "description": "Build end-to-end tests for complete workflows",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "E2E testing:\n- Complete stock workflow tests\n- Offline/online transition tests\n- Multi-tenant scenario tests\n- Flutter integration tests\n- Cypress tests for web UI\n- Performance benchmarks",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 17,
        "title": "Set up DevOps Pipeline",
        "description": "Configure CI/CD pipeline and containerization",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "details": "DevOps setup:\n- Dockerize all services\n- GitHub Actions CI/CD pipeline\n- Automated testing in pipeline\n- Database migration automation\n- Health check endpoints\n- Kubernetes manifests\n- Environment configuration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 18,
        "title": "Implement Monitoring & Observability",
        "description": "Add logging, metrics, and distributed tracing",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "details": "Observability setup:\n- Structured logging with Serilog\n- OpenTelemetry integration\n- Distributed tracing setup\n- Custom metrics for stock operations\n- Performance monitoring\n- Alert configuration\n- Dashboard creation",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 19,
        "title": "Create Documentation",
        "description": "Write comprehensive documentation for the Stock module",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Documentation:\n- API documentation with Swagger\n- Developer guide\n- Deployment guide\n- User manual for mobile/web\n- Architecture diagrams\n- Database schema documentation\n- Integration guide for other services",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 20,
        "title": "Performance Optimization & Final Testing",
        "description": "Optimize performance and conduct final testing before deployment",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "details": "Final optimization:\n- Performance profiling and optimization\n- Load testing with k6/Locust\n- Security vulnerability scanning\n- Final bug fixes\n- User acceptance testing\n- Deployment readiness checklist\n- Production configuration",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2024-01-20T10:00:00Z",
      "projectName": "TOSS Stock Module",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 180,
      "created": "2025-08-13T16:37:43.174Z",
      "description": "Tasks for master context",
      "updated": "2025-08-15T14:40:03.252Z"
    }
  },
  "stock-review": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Stock Module Project Structure",
        "description": "Create the foundational project structure for the Stock module including Domain, Application, Infrastructure, API, and Agent projects",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "details": "Set up the Stock module projects:\n- Stock.Domain (entities, value objects, aggregates)\n- Stock.Application (commands, queries, handlers)\n- Stock.Infrastructure (EF Core, repositories)\n- Stock.API (controllers, middleware)\n- Stock.Agent (AI/LangChain integration)\n- Stock.Domain.UnitTests\n- Stock.Application.UnitTests",
        "subtasks": [],
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 2,
        "title": "Implement Stock Domain Model",
        "description": "Create domain entities, value objects, and aggregates for the Stock module",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Implement domain model:\n- Item aggregate with ItemId, SKU, Name, etc.\n- Warehouse entity\n- StockLevel entity\n- StockMovement entity\n- Value objects: Quantity, Money, SKU, MovementType\n- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.\n- Business rules and validations",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 3,
        "title": "Create Stock Application Layer",
        "description": "Implement CQRS commands, queries, and handlers for stock operations",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Build application layer:\n- Commands: CreateItem, UpdateItem, ReceiveStock, IssueStock, AdjustStock\n- Queries: GetItems, GetStockLevels, GetMovementHistory\n- DTOs and mappings\n- Validators using FluentValidation\n- Event handlers for external events (SaleCompleted, etc.)",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 4,
        "title": "Implement Stock Infrastructure",
        "description": "Set up data persistence, repositories, and external service integrations",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Build infrastructure:\n- EF Core DbContext configuration\n- PostgreSQL schema and migrations\n- Repository implementations\n- MassTransit + RabbitMQ event bus integration\n- External service clients (barcode, tax)\n- Unit of work pattern",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 5,
        "title": "Build Stock API Endpoints",
        "description": "Create RESTful API controllers and endpoints for stock management",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API layer:\n- ItemsController (CRUD, bulk import)\n- StockMovementsController (receipts, issues, adjustments)\n- ReportsController (ledger, valuation)\n- Middleware for tenant resolution\n- API versioning\n- Swagger documentation\n- Request/response models",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 6,
        "title": "Implement Event-Driven Integration",
        "description": "Set up event publishing and subscription for cross-service communication",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Configure event-driven architecture:\n- Publish events: ItemCreated, StockReceived, StockLevelLow\n- Subscribe to events: SaleCompleted, PurchaseOrderReceived\n- Implement outbox pattern for reliability\n- Event versioning strategy\n- Integration testing for event flows",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 7,
        "title": "Create Stock Background Services",
        "description": "Implement background workers for monitoring and sync operations",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Build background services:\n- LowStockMonitor service\n- StockSyncService for offline sync\n- Scheduled reports generation\n- SignalR hub for real-time updates\n- Health check implementations",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 8,
        "title": "Implement Stock AI Agent",
        "description": "Build LangChain-powered AI agent for stock recommendations and automation",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Create AI agent:\n- LangChain integration setup\n- Reorder point optimization ML model\n- Demand forecasting implementation\n- Anomaly detection algorithms\n- Natural language query processing\n- Auto-purchase order generation (with approval)",
        "subtasks": [],
        "estimatedHours": 12,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 9,
        "title": "Build Flutter Mobile Stock UI",
        "description": "Create Flutter screens for stock management with offline support",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement mobile UI:\n- Stock dashboard screen\n- Items list with search/filter\n- Item detail and edit screens\n- Stock adjustment screens\n- Reports and analytics views\n- Offline data storage with SQLite\n- Sync queue implementation",
        "subtasks": [],
        "estimatedHours": 16,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 10,
        "title": "Build Nuxt 3 Web Stock UI",
        "description": "Create web interface for stock management with advanced features",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement web UI:\n- Stock management dashboard\n- DataTable with inline editing\n- Bulk import/export functionality\n- Stock ledger and reports\n- AI insights panel\n- Real-time updates via SignalR\n- Pinia state management",
        "subtasks": [],
        "estimatedHours": 14,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 11,
        "title": "Implement Offline Sync Protocol",
        "description": "Build robust offline-to-online synchronization mechanism",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "details": "Create sync protocol:\n- Define sync batch format\n- Implement conflict resolution (last-write-wins)\n- Build sync endpoints in API\n- Create sync service in mobile app\n- Handle large batch optimization\n- Error recovery mechanisms",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 12,
        "title": "Create Stock Reports Module",
        "description": "Implement comprehensive reporting functionality",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "details": "Build reporting features:\n- Stock ledger report\n- Valuation report\n- Movement summary\n- Low stock analysis\n- Export to CSV/PDF\n- Report scheduling\n- Email delivery integration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 13,
        "title": "Implement Security & Multi-tenancy",
        "description": "Add security features and ensure proper tenant isolation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Security implementation:\n- Row-level security by TenantId\n- Role-based access (Owner, Manager, Clerk)\n- API authentication middleware\n- Audit trail for all changes\n- Data encryption at rest\n- Rate limiting\n- POPIA compliance checks",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 14,
        "title": "Write Unit Tests",
        "description": "Create comprehensive unit tests for domain and application layers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Unit testing:\n- Domain logic tests (calculations, validations)\n- Application command/query handler tests\n- Value object conversion tests\n- Mock external dependencies\n- Achieve >80% code coverage\n- Use xUnit and Moq",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 15,
        "title": "Write Integration Tests",
        "description": "Create integration tests for API and infrastructure",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "Integration testing:\n- API endpoint tests\n- Repository operation tests\n- Event publishing/handling tests\n- Database migration tests\n- External service integration tests\n- Use TestContainers for dependencies",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 16,
        "title": "Create E2E Tests",
        "description": "Build end-to-end tests for complete workflows",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "E2E testing:\n- Complete stock workflow tests\n- Offline/online transition tests\n- Multi-tenant scenario tests\n- Flutter integration tests\n- Cypress tests for web UI\n- Performance benchmarks",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 17,
        "title": "Set up DevOps Pipeline",
        "description": "Configure CI/CD pipeline and containerization",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "details": "DevOps setup:\n- Dockerize all services\n- GitHub Actions CI/CD pipeline\n- Automated testing in pipeline\n- Database migration automation\n- Health check endpoints\n- Kubernetes manifests\n- Environment configuration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 18,
        "title": "Implement Monitoring & Observability",
        "description": "Add logging, metrics, and distributed tracing",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "details": "Observability setup:\n- Structured logging with Serilog\n- OpenTelemetry integration\n- Distributed tracing setup\n- Custom metrics for stock operations\n- Performance monitoring\n- Alert configuration\n- Dashboard creation",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 19,
        "title": "Create Documentation",
        "description": "Write comprehensive documentation for the Stock module",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Documentation:\n- API documentation with Swagger\n- Developer guide\n- Deployment guide\n- User manual for mobile/web\n- Architecture diagrams\n- Database schema documentation\n- Integration guide for other services",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 20,
        "title": "Performance Optimization & Final Testing",
        "description": "Optimize performance and conduct final testing before deployment",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "details": "Final optimization:\n- Performance profiling and optimization\n- Load testing with k6/Locust\n- Security vulnerability scanning\n- Final bug fixes\n- User acceptance testing\n- Deployment readiness checklist\n- Production configuration",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2024-01-20T10:00:00Z",
      "projectName": "TOSS Stock Module",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 180,
      "created": "2025-08-13T16:37:43.174Z",
      "description": "Tasks for master context",
      "updated": "2025-08-13T16:37:43.174Z"
    }
  },
  "mvp": {
    "tasks": [
      {
        "id": 1,
        "title": "Core Infrastructure Baseline",
        "description": "Establish foundational services and cross-cutting infrastructure for the MVP",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "complexity": 4,
        "details": "Baseline platform services: identity, gateway, event bus, shared libs, configuration, secrets, local dev env",
        "subtasks": [
          {
            "id": 1,
            "title": "Identity & Auth Service (JWT, tenants, roles)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "API Gateway (reverse proxy, routing, rate limits)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Event Bus (MassTransit + RabbitMQ) shared config",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Shared packages (Contracts, Abstractions, Error model)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Centralized configuration & secrets (appsettings, KeyVault)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Local dev environment (docker-compose, seed data)",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 7,
            "title": "JWT signing keys & refresh token flow",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Tenant resolution middleware + per-tenant RLS",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Gateway rate limiting & request size limits",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Event contracts package + error/retry DLQ policy",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "ProblemDetails + correlation IDs cross-cutting",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Dev bootstrap: RabbitMQ, Postgres, Redis containers",
            "status": "done",
            "complexity": 1
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 2,
        "title": "Observability & Health",
        "description": "Logging, metrics, tracing, health endpoints and dashboards",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "complexity": 3,
        "details": "Serilog, OpenTelemetry, health checks, Prometheus/Grafana dashboards, alerting",
        "subtasks": [
          {
            "id": 1,
            "title": "Structured logging with correlation IDs",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "OpenTelemetry tracing + metrics across services",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Health endpoints + readiness/liveness",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 4,
            "title": "Dashboards + alert rules (Prometheus/Grafana)",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 3,
        "title": "DevOps & CI/CD",
        "description": "Pipelines, containerization, manifests and environment promotion",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 4,
        "details": "GitHub Actions, Dockerfiles, Container registry, K8s manifests, Kustomize/Helm, migration automation",
        "subtasks": [
          {
            "id": 1,
            "title": "Dockerfiles for all services",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "GitHub Actions build/test/publish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Kubernetes manifests + Kustomize overlays",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "DB migration automation per service",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Environment promotion (dev→staging→prod)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Container registry + image versioning (semver)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Supply chain: image scanning + SBOM",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Blue/green or rolling deploy strategy",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 18
      },
      {
        "id": 4,
        "title": "Stock Module Completion (MVP integration)",
        "description": "Finish remaining Stock tasks and integrate with platform baselines",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Leverage existing Stock work; finalize background services, AI hooks, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "LowStockMonitor + SignalR hubs finalized",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock reports (ledger/valuation/movement) polish",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "AI reorder recommendations endpoint integration",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 5,
        "title": "Sales/POS Service (MVP)",
        "description": "Sales domain + POS flows, receipts/invoices, payments integration, events",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "complexity": 4,
        "details": "Sales domain/application/infrastructure/API, publish SaleCompleted, basic payments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain model (Sale, SaleItem, Tender, Till)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreateSale, Cancel, GetDailySales)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + validations + Swagger",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Event publishing: SaleCompleted",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 5,
            "title": "Payments gateway integration (MVP set)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Repositories + unit tests (domain/app)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Receipt generation & numbering",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "POS input validation & error codes",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 24
      },
      {
        "id": 6,
        "title": "Buying/Procurement Service (MVP)",
        "description": "Suppliers, purchase orders, receipts, pricing; events to Stock",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5
        ],
        "complexity": 3,
        "details": "Core procurement lifecycle and integration with Stock increments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Supplier, PurchaseOrder, POItem)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreatePO, ReceivePO)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + events (PurchaseOrderReceived)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Basic price list + lead time tracking",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 16
      },
      {
        "id": 7,
        "title": "Accounting (Cash-based MVP)",
        "description": "Cashbook, simple ledgers, P&L summary; integrate with Sales & Stock valuation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          5,
          6
        ],
        "complexity": 4,
        "details": "Minimal but coherent cash accounting for MVP KPIs",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Cashbook, Entry, Account) + invariants",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Posting rules: SaleCompleted, purchase receipts, adjustments",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Stock valuation snapshot for P&L",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Cashbook UI (web): entries, filters, export CSV",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Reports: P&L summary, cash position, month-over-month",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Reconciliation helpers + rounding rules",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 28
      },
      {
        "id": 8,
        "title": "CRM Service (MVP)",
        "description": "Customers, interactions, simple loyalty and segments",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "complexity": 3,
        "details": "Customer profiles, purchase history, preferences, segments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Customer, Segment, LoyaltyTx)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Queries (TopCustomers, LapsedCustomers)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + basic loyalty accrual",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 9,
        "title": "Notifications Service (MVP)",
        "description": "Channels (SMS/WhatsApp), templates, audits, rate limits",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Unified notifications for alerts, promos, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Channel providers + retries/Polly",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Templates + variables + localization",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Audit log + consent (POPIA)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 10,
        "title": "Collaboration (Group-Buy) Service (MVP)",
        "description": "Campaigns, participant enrollment, supplier quotation, order split & settlement",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          6,
          9
        ],
        "complexity": 4,
        "details": "Enable collaborative procurement to reduce costs",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Campaign, Participant, Allocation)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "Supplier quotation intake + best-price selection",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Participant enrollment + commitment tracking",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Order split + settlement per participant",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Events + integration with Buying/Stock",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Web UI: campaign list/detail, join/leave, progress",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 11,
        "title": "AI Service (Service-as-a-Software)",
        "description": "Conversational orchestrator, agents, background monitors, outcome tracking",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "complexity": 4,
        "details": "MVP orchestration with Inventory, Sales, Purchasing, Finance, Customer agents",
        "subtasks": [
          {
            "id": 1,
            "title": "Public endpoints: /api/ai/conversation, /automate, /services/status, /outcomes",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Intent classification + routing (keyword + rule-based + fallback)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Request validation + authorization policies (per intent)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Inventory agent: low stock check, reorder recs, auto-PO draft",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Sales agent: process sale request, generate invoice, send receipt",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Purchasing agent: create PO, receive goods, supplier selection hint",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 7,
            "title": "Finance agent: cash flow snapshot, monthly P&L summary, overdue alerts",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 8,
            "title": "Customer agent: follow-ups for lapsed customers, answer FAQs",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Proactive monitor: schedules + event hooks (low stock, overdue invoices, churn)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Automation scheduler: cron-like recurring tasks (daily/weekly/monthly)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "Outcome tracker: define KPIs (revenue↑, stockouts↓, time saved), persist",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Outcome analytics: service performance metrics + ROI report endpoints",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 13,
            "title": "Idempotency + retries + circuit breakers on downstream calls",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 14,
            "title": "Structured errors + ProblemDetails for all endpoints",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 15,
            "title": "Observability: traces around orchestration spans + agent actions",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 16,
            "title": "Integration tests: orchestrator→agents happy/edge paths",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 17,
            "title": "Load smoke: conversation/automation p95 latency check",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 18,
            "title": "Docs: swagger annotations + examples for every endpoint",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 34
      },
      {
        "id": 12,
        "title": "Flutter Mobile App (MVP)",
        "description": "Auth, stock flows, POS, offline sync, notifications",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          11
        ],
        "complexity": 4,
        "details": "Primary field app for SMMEs with offline-first",
        "subtasks": [
          {
            "id": 1,
            "title": "Auth + tenant selector + secure storage (flutter_secure_storage)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock dashboard (low stock, quick actions)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Items list (search, filter, barcode scan)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Item detail (stock by warehouse, history, actions)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Stock adjustment flow (reasons, review & confirm)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "POS quick sale (cart, payment method, receipt PDF/share)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 7,
            "title": "Offline cache (SQLite) + sync queue (batch, retry)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 8,
            "title": "Notifications inbox + deep links to entities",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 9,
            "title": "Localization (en/af/zu baseline) + RTL ready",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Accessibility (large text, contrast, voiceover labels)",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 11,
            "title": "Design system (spacing, typography, buttons, inputs)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "E2E flows (happy/edge) with integration env",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 36
      },
      {
        "id": 13,
        "title": "Nuxt 3 Web App (MVP)",
        "description": "Admin dashboards, advanced stock, sales back-office, customers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          7,
          8,
          11
        ],
        "complexity": 4,
        "details": "Back-office web for management and reporting",
        "subtasks": [
          {
            "id": 1,
            "title": "Authentication + session + permissions (route guards, Pinia)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock management: DataTable (server-side), bulk import/export",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Stock ledger + movement history with running balance",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Sales back-office: refunds, day-end reports",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Customer management + segments + search",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "AI insights panel (reorders, anomalies, forecasts)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Real-time updates (SignalR) + optimistic UI",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Design system + responsive layout (Tailwind)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 9,
            "title": "Accessibility + keyboard nav + aria labels",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 10,
            "title": "E2E tests (Playwright/Cypress) key workflows",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 14,
        "title": "Offline Sync Platform (Cross-Module)",
        "description": "Generic sync protocol and services extended beyond Stock",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          8,
          12,
          13
        ],
        "complexity": 4,
        "details": "Sync engine, conflict resolution, batching and retries for Sales/CRM/Buying",
        "subtasks": [
          {
            "id": 1,
            "title": "Sync protocol v1 + payload versioning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Module adapters (Sales, CRM, Buying) for local ops",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Conflict resolution strategies per module",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "Batching, backoff & retry with jitter",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Telemetry (success, failure, duration, last sync)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Admin UI: sync status, retry, conflict review (web)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 26
      },
      {
        "id": 15,
        "title": "Security & Compliance (POPIA)",
        "description": "RBAC, tenant isolation, encryption, consent & audit",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          2,
          5,
          8,
          9
        ],
        "complexity": 3,
        "details": "Harden services and ensure compliance",
        "subtasks": [
          {
            "id": 1,
            "title": "RBAC policies + enforcement in APIs",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Row-level security by TenantId",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Encryption at rest + TLS everywhere",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Consent + unsubscribe + audit trail",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 16,
        "title": "Performance & Scalability",
        "description": "Indexes, pagination, caching, stress tests",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          11
        ],
        "complexity": 3,
        "details": "Meet PRD performance targets under load",
        "subtasks": [
          {
            "id": 1,
            "title": "DB indexes + query tuning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Pagination everywhere + projections",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Cache hotspots with Redis (where safe)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Load/stress tests + fixes",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 17,
        "title": "Testing Strategy Execution",
        "description": "Unit, integration, E2E across modules with coverage targets",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "complexity": 3,
        "details": "Automated tests integrated into CI with coverage reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Unit tests domain/app for each service",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Integration tests API/repo/events",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "E2E (mobile/web) critical flows",
            "status": "pending",
            "complexity": 3
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 18,
        "title": "Deployment to Production",
        "description": "Infra provisioning, DNS/TLS, backups, runbooks",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2,
          3,
          16
        ],
        "complexity": 3,
        "details": "Reliable prod rollout with monitoring and rollback",
        "subtasks": [
          {
            "id": 1,
            "title": "Provision K8s cluster + managed DB/Redis",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "DNS, TLS, WAF/rate limits",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Backups + restore procedures",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Runbooks + on-call rotation",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 19,
        "title": "Documentation & Training",
        "description": "Finalize docs (API, user, dev, ops) and training materials",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11,
          12,
          13,
          18
        ],
        "complexity": 2,
        "details": "Ensure stakeholders can adopt and operate the platform",
        "subtasks": [
          {
            "id": 1,
            "title": "API refs + SDK snippets",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "User guides + videos (mobile/web)",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Dev/ops guides + troubleshooting",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 20,
        "title": "Go-Live Readiness & UAT",
        "description": "UAT cycles, smoke tests, cutover checklist, launch",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          17,
          18,
          19
        ],
        "complexity": 2,
        "details": "Final checks and stakeholder sign-off for MVP",
        "subtasks": [
          {
            "id": 1,
            "title": "UAT planning + execution + fixes",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "Cutover plan + rollback",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Launch communications",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 8
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2025-08-18T00:00:00Z",
      "projectName": "TOSS ERP III MVP (All Core Modules)",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 336,
      "created": "2025-08-18T00:00:00Z",
      "description": "End-to-end MVP across infrastructure, core services, AI, clients, and DevOps",
      "updated": "2025-08-18T09:45:55.079Z"
    }
  }
}