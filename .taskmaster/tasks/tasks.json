{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Stock Module Project Structure",
        "description": "Create the foundational project structure for the Stock module including Domain, Application, Infrastructure, API, and Agent projects",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Set up the Stock module projects:\n- Stock.Domain (entities, value objects, aggregates)\n- Stock.Application (commands, queries, handlers)\n- Stock.Infrastructure (EF Core, repositories)\n- Stock.API (controllers, middleware)\n- Stock.Agent (AI/LangChain integration)\n- Stock.Domain.UnitTests\n- Stock.Application.UnitTests",
        "subtasks": [],
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 2,
        "title": "Implement Stock Domain Model",
        "description": "Create domain entities, value objects, and aggregates for the Stock module",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Implement domain model:\n- Item aggregate with ItemId, SKU, Name, etc.\n- Warehouse entity\n- StockLevel entity\n- StockMovement entity\n- Value objects: Quantity, Money, SKU, MovementType\n- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.\n- Business rules and validations",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Base Domain Classes",
            "description": "Set up base classes for Entity, AggregateRoot, ValueObject, and DomainEvent",
            "details": "Create foundational domain classes:\\n- Entity<T> base class with Id property\\n- AggregateRoot base class extending Entity\\n- ValueObject base class with equality implementation\\n- IDomainEvent interface\\n- DomainEvent base class with timestamp",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Implement Value Objects",
            "description": "Create value objects for Quantity, Money, SKU, and MovementType",
            "details": "Implement value objects:\\n- Quantity: Value, Unit, conversion logic\\n- Money: Amount, Currency (ZAR default)\\n- SKU: Value with validation (alphanumeric, max length)\\n- MovementType: Enum (Receipt, Issue, Adjustment, Transfer)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Create Item Aggregate",
            "description": "Implement the Item aggregate root with properties and business logic",
            "details": "Create Item aggregate:\\n- Properties: ItemId, TenantId, SKU, Barcode, Name, Description, Category, Unit, SellingPrice, CostPrice, ReorderLevel, ReorderQty, IsActive\\n- Methods: Create, Update, Deactivate, UpdatePricing, SetReorderLevels\\n- Validations: Required fields, price ranges, reorder logic\\n- Events: ItemCreated, ItemUpdated, ItemDeactivated",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 4,
            "title": "Implement Warehouse Entity",
            "description": "Create Warehouse entity with location and status management",
            "details": "Implement Warehouse entity:\\n- Properties: WarehouseId, TenantId, Code, Name, Address, IsDefault, IsActive\\n- Methods: Create, Update, SetAsDefault, Deactivate\\n- Business rules: Only one default warehouse per tenant\\n- Validations: Unique code per tenant",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 5,
            "title": "Create Stock Movement Entities",
            "description": "Implement StockLevel and StockMovement entities for tracking inventory",
            "details": "Create stock tracking entities:\\n- StockLevel: ItemId, WarehouseId, OnHand, Available, OnOrder, Reserved\\n- StockMovement: MovementId, TenantId, ItemId, WarehouseId, Type, Qty, RefType, RefId, Reason, CreatedBy, CreatedAt\\n- Methods: RecordMovement, CalculateAvailable\\n- Validations: Prevent negative stock (configurable)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 6,
            "title": "Define Domain Events",
            "description": "Create all domain events for stock-related operations",
            "details": "Implement domain events:\\n- ItemCreated, ItemUpdated, ItemDeactivated\\n- StockReceived, StockIssued, StockAdjusted, StockTransferred\\n- StockLevelLow (when stock < reorder level)\\n- WarehouseCreated, WarehouseUpdated\\n- Include relevant data in each event for downstream consumers",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          }
        ],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 3,
        "title": "Create Stock Application Layer",
        "description": "Implement CQRS commands, queries, and handlers for stock operations",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Build application layer:\n- Commands: CreateItem, UpdateItem, ReceiveStock, IssueStock, AdjustStock\n- Queries: GetItems, GetStockLevels, GetMovementHistory\n- DTOs and mappings\n- Validators using FluentValidation\n- Event handlers for external events (SaleCompleted, etc.)",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Commands",
            "description": "Implement CQRS commands for stock operations",
            "details": "Create command classes:\\n- CreateItemCommand\\n- UpdateItemCommand\\n- ReceiveStockCommand\\n- IssueStockCommand\\n- AdjustStockCommand\\n- TransferStockCommand\\n- Each command should include validation attributes and proper data structure",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Create Queries",
            "description": "Implement CQRS queries for stock operations",
            "details": "Create query classes:\\n- GetItemsQuery (with filtering, search, pagination)\\n- GetItemByIdQuery\\n- GetStockLevelsQuery\\n- GetMovementHistoryQuery\\n- GetLowStockItemsQuery\\n- Each query should include proper parameters and return appropriate DTOs",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Create DTOs",
            "description": "Implement Data Transfer Objects for API responses",
            "details": "Create DTO classes:\\n- ItemDto (with all item properties)\\n- StockLevelDto (current stock information)\\n- MovementDto (movement history)\\n- CreateItemRequest/Response\\n- UpdateItemRequest\\n- StockMovementRequest\\n- PaginatedResult<T> for list responses",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Implement Command Handlers",
            "description": "Create command handlers using MediatR",
            "details": "Implement command handlers:\\n- CreateItemCommandHandler\\n- UpdateItemCommandHandler\\n- ReceiveStockCommandHandler\\n- IssueStockCommandHandler\\n- AdjustStockCommandHandler\\n- TransferStockCommandHandler\\n- Each handler should use repositories, validate business rules, and publish domain events",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Implement Query Handlers",
            "description": "Create query handlers using MediatR",
            "details": "Implement query handlers:\\n- GetItemsQueryHandler\\n- GetItemByIdQueryHandler\\n- GetStockLevelsQueryHandler\\n- GetMovementHistoryQueryHandler\\n- GetLowStockItemsQueryHandler\\n- Each handler should use repositories and return appropriate DTOs",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Create Validators",
            "description": "Implement FluentValidation validators",
            "details": "Create validators:\\n- CreateItemCommandValidator\\n- UpdateItemCommandValidator\\n- ReceiveStockCommandValidator\\n- IssueStockCommandValidator\\n- AdjustStockCommandValidator\\n- TransferStockCommandValidator\\n- Each validator should enforce business rules and data validation",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          }
        ],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 4,
        "title": "Implement Stock Infrastructure",
        "description": "Set up data persistence, repositories, and external service integrations",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Build infrastructure:\n- EF Core DbContext configuration\n- PostgreSQL schema and migrations\n- Repository implementations\n- MassTransit + RabbitMQ event bus integration\n- External service clients (barcode, tax)\n- Unit of work pattern",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure EF Core DbContext and Entity Configurations",
            "description": "Set up the ApplicationDbContext with proper entity configurations for all Stock domain entities including Items, Warehouses, StockLevels, StockMovements, Batches, and Bins",
            "details": "- Create ApplicationDbContext in Stock.Infrastructure/Data/\n- Configure entity relationships and constraints\n- Set up entity configurations for all domain entities\n- Configure indexes for performance optimization\n- Set up audit trail configurations",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Create PostgreSQL Schema and Migrations",
            "description": "Generate and configure database migrations for the Stock module schema",
            "details": "- Create initial migration for Stock entities\n- Configure PostgreSQL-specific optimizations\n- Set up proper data types and constraints\n- Configure connection string and database settings\n- Test migration generation and application",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Implement Repository Pattern",
            "description": "Create concrete repository implementations for all domain entities",
            "details": "- Implement IItemRepository, IWarehouseRepository, IStockLevelRepository, IStockMovementRepository\n- Add specialized query methods for complex business logic\n- Implement proper error handling and logging\n- Add caching strategies where appropriate\n- Ensure repository methods align with application layer requirements",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "Configure MassTransit + RabbitMQ Event Bus",
            "description": "Set up event bus integration for domain events and cross-service communication",
            "details": "- Configure MassTransit with RabbitMQ transport\n- Set up event publishing for domain events\n- Configure event consumers for integration events\n- Implement event serialization and deserialization\n- Add health checks and monitoring for message bus",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 5,
            "title": "Implement External Service Clients",
            "description": "Create clients for external services like barcode scanning and tax calculation",
            "details": "- Create IBarcodeService client for barcode scanning\n- Create ITaxCalculationService client for tax calculations\n- Implement retry policies and circuit breakers\n- Add proper error handling and fallback mechanisms\n- Configure service discovery and health checks",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 6,
            "title": "Implement Unit of Work Pattern",
            "description": "Create the Unit of Work pattern implementation for transaction management",
            "details": "- Implement IUnitOfWork interface\n- Create UnitOfWork class with transaction management\n- Configure dependency injection for Unit of Work\n- Add proper disposal and error handling\n- Ensure transaction consistency across repositories",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          }
        ],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 5,
        "title": "Build Stock API Endpoints",
        "description": "Create RESTful API controllers and endpoints for stock management",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API layer:\n- ItemsController (CRUD, bulk import)\n- StockMovementsController (receipts, issues, adjustments)\n- ReportsController (ledger, valuation)\n- Middleware for tenant resolution\n- API versioning\n- Swagger documentation\n- Request/response models",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 6,
        "title": "Implement Event-Driven Integration",
        "description": "Set up event publishing and subscription for cross-service communication",
        "status": "done",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Configure event-driven architecture:\n- Publish events: ItemCreated, StockReceived, StockLevelLow\n- Subscribe to events: SaleCompleted, PurchaseOrderReceived\n- Implement outbox pattern for reliability\n- Event versioning strategy\n- Integration testing for event flows",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 7,
        "title": "Create Stock Background Services",
        "description": "Implement background workers for monitoring and sync operations",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Build background services:\n- LowStockMonitor service\n- StockSyncService for offline sync\n- Scheduled reports generation\n- SignalR hub for real-time updates\n- Health check implementations",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 8,
        "title": "Implement Stock AI Agent",
        "description": "Build LangChain-powered AI agent for stock recommendations and automation",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Create AI agent:\n- LangChain integration setup\n- Reorder point optimization ML model\n- Demand forecasting implementation\n- Anomaly detection algorithms\n- Natural language query processing\n- Auto-purchase order generation (with approval)",
        "subtasks": [],
        "estimatedHours": 12,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 9,
        "title": "Build Flutter Mobile Stock UI",
        "description": "Create Flutter screens for stock management with offline support",
        "status": "done",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement mobile UI:\n- Stock dashboard screen\n- Items list with search/filter\n- Item detail and edit screens\n- Stock adjustment screens\n- Reports and analytics views\n- Offline data storage with SQLite\n- Sync queue implementation",
        "subtasks": [],
        "estimatedHours": 16,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 10,
        "title": "Build Nuxt 3 Web Stock UI",
        "description": "Create web interface for stock management with advanced features",
        "status": "done",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement web UI:\n- Stock management dashboard\n- DataTable with inline editing\n- Bulk import/export functionality\n- Stock ledger and reports\n- AI insights panel\n- Real-time updates via SignalR\n- Pinia state management",
        "subtasks": [],
        "estimatedHours": 14,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 11,
        "title": "Implement Offline Sync Protocol",
        "description": "Build robust offline-to-online synchronization mechanism",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "details": "Create sync protocol:\n- Define sync batch format\n- Implement conflict resolution (last-write-wins)\n- Build sync endpoints in API\n- Create sync service in mobile app\n- Handle large batch optimization\n- Error recovery mechanisms",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 12,
        "title": "Create Stock Reports Module",
        "description": "Implement comprehensive reporting functionality",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "details": "Build reporting features:\n- Stock ledger report\n- Valuation report\n- Movement summary\n- Low stock analysis\n- Export to CSV/PDF\n- Report scheduling\n- Email delivery integration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 13,
        "title": "Implement Security & Multi-tenancy",
        "description": "Add security features and ensure proper tenant isolation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Security implementation:\n- Row-level security by TenantId\n- Role-based access (Owner, Manager, Clerk)\n- API authentication middleware\n- Audit trail for all changes\n- Data encryption at rest\n- Rate limiting\n- POPIA compliance checks",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 14,
        "title": "Write Unit Tests",
        "description": "Create comprehensive unit tests for domain and application layers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Unit testing:\n- Domain logic tests (calculations, validations)\n- Application command/query handler tests\n- Value object conversion tests\n- Mock external dependencies\n- Achieve >80% code coverage\n- Use xUnit and Moq",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 15,
        "title": "Write Integration Tests",
        "description": "Create integration tests for API and infrastructure",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "Integration testing:\n- API endpoint tests\n- Repository operation tests\n- Event publishing/handling tests\n- Database migration tests\n- External service integration tests\n- Use TestContainers for dependencies",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 16,
        "title": "Create E2E Tests",
        "description": "Build end-to-end tests for complete workflows",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "E2E testing:\n- Complete stock workflow tests\n- Offline/online transition tests\n- Multi-tenant scenario tests\n- Flutter integration tests\n- Cypress tests for web UI\n- Performance benchmarks",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 17,
        "title": "Set up DevOps Pipeline",
        "description": "Configure CI/CD pipeline and containerization",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "details": "DevOps setup:\n- Dockerize all services\n- GitHub Actions CI/CD pipeline\n- Automated testing in pipeline\n- Database migration automation\n- Health check endpoints\n- Kubernetes manifests\n- Environment configuration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 18,
        "title": "Implement Monitoring & Observability",
        "description": "Add logging, metrics, and distributed tracing",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "details": "Observability setup:\n- Structured logging with Serilog\n- OpenTelemetry integration\n- Distributed tracing setup\n- Custom metrics for stock operations\n- Performance monitoring\n- Alert configuration\n- Dashboard creation",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 19,
        "title": "Create Documentation",
        "description": "Write comprehensive documentation for the Stock module",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Documentation:\n- API documentation with Swagger\n- Developer guide\n- Deployment guide\n- User manual for mobile/web\n- Architecture diagrams\n- Database schema documentation\n- Integration guide for other services",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 20,
        "title": "Performance Optimization & Final Testing",
        "description": "Optimize performance and conduct final testing before deployment",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "details": "Final optimization:\n- Performance profiling and optimization\n- Load testing with k6/Locust\n- Security vulnerability scanning\n- Final bug fixes\n- User acceptance testing\n- Deployment readiness checklist\n- Production configuration",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2025-08-20T12:00:00Z",
      "projectName": "TOSS Stock Module",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 180,
      "created": "2025-08-13T16:37:43.174Z",
      "description": "Tasks for master context",
      "updated": "2025-08-20T12:00:00Z",
      "merge": {
        "by": "agent",
        "when": "2025-08-20T12:00:00Z",
        "notes": "Merged prepared Taskmaster tasks; no new tasks required because existing list already covered the prepared items."
      }
    }
  },
  "stock-review": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Stock Module Project Structure",
        "description": "Create the foundational project structure for the Stock module including Domain, Application, Infrastructure, API, and Agent projects",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "details": "Set up the Stock module projects:\n- Stock.Domain (entities, value objects, aggregates)\n- Stock.Application (commands, queries, handlers)\n- Stock.Infrastructure (EF Core, repositories)\n- Stock.API (controllers, middleware)\n- Stock.Agent (AI/LangChain integration)\n- Stock.Domain.UnitTests\n- Stock.Application.UnitTests",
        "subtasks": [],
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 2,
        "title": "Implement Stock Domain Model",
        "description": "Create domain entities, value objects, and aggregates for the Stock module",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Implement domain model:\n- Item aggregate with ItemId, SKU, Name, etc.\n- Warehouse entity\n- StockLevel entity\n- StockMovement entity\n- Value objects: Quantity, Money, SKU, MovementType\n- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.\n- Business rules and validations",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 3,
        "title": "Create Stock Application Layer",
        "description": "Implement CQRS commands, queries, and handlers for stock operations",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Build application layer:\n- Commands: CreateItem, UpdateItem, ReceiveStock, IssueStock, AdjustStock\n- Queries: GetItems, GetStockLevels, GetMovementHistory\n- DTOs and mappings\n- Validators using FluentValidation\n- Event handlers for external events (SaleCompleted, etc.)",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 4,
        "title": "Implement Stock Infrastructure",
        "description": "Set up data persistence, repositories, and external service integrations",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Build infrastructure:\n- EF Core DbContext configuration\n- PostgreSQL schema and migrations\n- Repository implementations\n- MassTransit + RabbitMQ event bus integration\n- External service clients (barcode, tax)\n- Unit of work pattern",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 5,
        "title": "Build Stock API Endpoints",
        "description": "Create RESTful API controllers and endpoints for stock management",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API layer:\n- ItemsController (CRUD, bulk import)\n- StockMovementsController (receipts, issues, adjustments)\n- ReportsController (ledger, valuation)\n- Middleware for tenant resolution\n- API versioning\n- Swagger documentation\n- Request/response models",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 6,
        "title": "Implement Event-Driven Integration",
        "description": "Set up event publishing and subscription for cross-service communication",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Configure event-driven architecture:\n- Publish events: ItemCreated, StockReceived, StockLevelLow\n- Subscribe to events: SaleCompleted, PurchaseOrderReceived\n- Implement outbox pattern for reliability\n- Event versioning strategy\n- Integration testing for event flows",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 7,
        "title": "Create Stock Background Services",
        "description": "Implement background workers for monitoring and sync operations",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Build background services:\n- LowStockMonitor service\n- StockSyncService for offline sync\n- Scheduled reports generation\n- SignalR hub for real-time updates\n- Health check implementations",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 8,
        "title": "Implement Stock AI Agent",
        "description": "Build LangChain-powered AI agent for stock recommendations and automation",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Create AI agent:\n- LangChain integration setup\n- Reorder point optimization ML model\n- Demand forecasting implementation\n- Anomaly detection algorithms\n- Natural language query processing\n- Auto-purchase order generation (with approval)",
        "subtasks": [],
        "estimatedHours": 12,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 9,
        "title": "Build Flutter Mobile Stock UI",
        "description": "Create Flutter screens for stock management with offline support",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement mobile UI:\n- Stock dashboard screen\n- Items list with search/filter\n- Item detail and edit screens\n- Stock adjustment screens\n- Reports and analytics views\n- Offline data storage with SQLite\n- Sync queue implementation",
        "subtasks": [],
        "estimatedHours": 16,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 10,
        "title": "Build Nuxt 3 Web Stock UI",
        "description": "Create web interface for stock management with advanced features",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Implement web UI:\n- Stock management dashboard\n- DataTable with inline editing\n- Bulk import/export functionality\n- Stock ledger and reports\n- AI insights panel\n- Real-time updates via SignalR\n- Pinia state management",
        "subtasks": [],
        "estimatedHours": 14,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 11,
        "title": "Implement Offline Sync Protocol",
        "description": "Build robust offline-to-online synchronization mechanism",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "details": "Create sync protocol:\n- Define sync batch format\n- Implement conflict resolution (last-write-wins)\n- Build sync endpoints in API\n- Create sync service in mobile app\n- Handle large batch optimization\n- Error recovery mechanisms",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 12,
        "title": "Create Stock Reports Module",
        "description": "Implement comprehensive reporting functionality",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "details": "Build reporting features:\n- Stock ledger report\n- Valuation report\n- Movement summary\n- Low stock analysis\n- Export to CSV/PDF\n- Report scheduling\n- Email delivery integration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 13,
        "title": "Implement Security & Multi-tenancy",
        "description": "Add security features and ensure proper tenant isolation",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Security implementation:\n- Row-level security by TenantId\n- Role-based access (Owner, Manager, Clerk)\n- API authentication middleware\n- Audit trail for all changes\n- Data encryption at rest\n- Rate limiting\n- POPIA compliance checks",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 14,
        "title": "Write Unit Tests",
        "description": "Create comprehensive unit tests for domain and application layers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Unit testing:\n- Domain logic tests (calculations, validations)\n- Application command/query handler tests\n- Value object conversion tests\n- Mock external dependencies\n- Achieve >80% code coverage\n- Use xUnit and Moq",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 15,
        "title": "Write Integration Tests",
        "description": "Create integration tests for API and infrastructure",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "Integration testing:\n- API endpoint tests\n- Repository operation tests\n- Event publishing/handling tests\n- Database migration tests\n- External service integration tests\n- Use TestContainers for dependencies",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 16,
        "title": "Create E2E Tests",
        "description": "Build end-to-end tests for complete workflows",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "E2E testing:\n- Complete stock workflow tests\n- Offline/online transition tests\n- Multi-tenant scenario tests\n- Flutter integration tests\n- Cypress tests for web UI\n- Performance benchmarks",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 17,
        "title": "Set up DevOps Pipeline",
        "description": "Configure CI/CD pipeline and containerization",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "details": "DevOps setup:\n- Dockerize all services\n- GitHub Actions CI/CD pipeline\n- Automated testing in pipeline\n- Database migration automation\n- Health check endpoints\n- Kubernetes manifests\n- Environment configuration",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 18,
        "title": "Implement Monitoring & Observability",
        "description": "Add logging, metrics, and distributed tracing",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "details": "Observability setup:\n- Structured logging with Serilog\n- OpenTelemetry integration\n- Distributed tracing setup\n- Custom metrics for stock operations\n- Performance monitoring\n- Alert configuration\n- Dashboard creation",
        "subtasks": [],
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 19,
        "title": "Create Documentation",
        "description": "Write comprehensive documentation for the Stock module",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Documentation:\n- API documentation with Swagger\n- Developer guide\n- Deployment guide\n- User manual for mobile/web\n- Architecture diagrams\n- Database schema documentation\n- Integration guide for other services",
        "subtasks": [],
        "estimatedHours": 8,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      },
      {
        "id": 20,
        "title": "Performance Optimization & Final Testing",
        "description": "Optimize performance and conduct final testing before deployment",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "details": "Final optimization:\n- Performance profiling and optimization\n- Load testing with k6/Locust\n- Security vulnerability scanning\n- Final bug fixes\n- User acceptance testing\n- Deployment readiness checklist\n- Production configuration",
        "subtasks": [],
        "estimatedHours": 10,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2024-01-20T10:00:00Z",
        "updatedAt": "2024-01-20T10:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2024-01-20T10:00:00Z",
      "projectName": "TOSS Stock Module",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 180,
      "created": "2025-08-13T16:37:43.174Z",
      "description": "Tasks for master context",
      "updated": "2025-08-13T16:37:43.174Z"
    }
  },
  "mvp": {
    "tasks": [
      {
        "id": 1,
        "title": "Core Infrastructure Baseline",
        "description": "Establish foundational services and cross-cutting infrastructure for the MVP",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "complexity": 4,
        "details": "Baseline platform services: identity, gateway, event bus, shared libs, configuration, secrets, local dev env",
        "subtasks": [
          {
            "id": 1,
            "title": "Identity & Auth Service (JWT, tenants, roles)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "API Gateway (reverse proxy, routing, rate limits)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Event Bus (MassTransit + RabbitMQ) shared config",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Shared packages (Contracts, Abstractions, Error model)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Centralized configuration & secrets (appsettings, KeyVault)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Local dev environment (docker-compose, seed data)",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 7,
            "title": "JWT signing keys & refresh token flow",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Tenant resolution middleware + per-tenant RLS",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Gateway rate limiting & request size limits",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Event contracts package + error/retry DLQ policy",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "ProblemDetails + correlation IDs cross-cutting",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Dev bootstrap: RabbitMQ, Postgres, Redis containers",
            "status": "done",
            "complexity": 1
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 2,
        "title": "Observability & Health",
        "description": "Logging, metrics, tracing, health endpoints and dashboards",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "complexity": 3,
        "details": "Serilog, OpenTelemetry, health checks, Prometheus/Grafana dashboards, alerting",
        "subtasks": [
          {
            "id": 1,
            "title": "Structured logging with correlation IDs",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "OpenTelemetry tracing + metrics across services",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Health endpoints + readiness/liveness",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 4,
            "title": "Dashboards + alert rules (Prometheus/Grafana)",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 3,
        "title": "DevOps & CI/CD",
        "description": "Pipelines, containerization, manifests and environment promotion",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 4,
        "details": "GitHub Actions, Dockerfiles, Container registry, K8s manifests, Kustomize/Helm, migration automation",
        "subtasks": [
          {
            "id": 1,
            "title": "Dockerfiles for all services",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "GitHub Actions build/test/publish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Kubernetes manifests + Kustomize overlays",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "DB migration automation per service",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Environment promotion (dev→staging→prod)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Container registry + image versioning (semver)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Supply chain: image scanning + SBOM",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Blue/green or rolling deploy strategy",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 18
      },
      {
        "id": 4,
        "title": "Stock Module Completion (MVP integration)",
        "description": "Finish remaining Stock tasks and integrate with platform baselines",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Leverage existing Stock work; finalize background services, AI hooks, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "LowStockMonitor + SignalR hubs finalized",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock reports (ledger/valuation/movement) polish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "AI reorder recommendations endpoint integration",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 5,
        "title": "Sales/POS Service (MVP)",
        "description": "Sales domain + POS flows, receipts/invoices, payments integration, events",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "complexity": 4,
        "details": "Sales domain/application/infrastructure/API, publish SaleCompleted, basic payments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain model (Sale, SaleItem, Tender, Till)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreateSale, Cancel, GetDailySales)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + validations + Swagger",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Event publishing: SaleCompleted",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 5,
            "title": "Payments gateway integration (MVP set)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Repositories + unit tests (domain/app)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Receipt generation & numbering",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "POS input validation & error codes",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 24
      },
      {
        "id": 6,
        "title": "Buying/Procurement Service (MVP)",
        "description": "Suppliers, purchase orders, receipts, pricing; events to Stock",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5
        ],
        "complexity": 3,
        "details": "Core procurement lifecycle and integration with Stock increments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Supplier, PurchaseOrder, POItem)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreatePO, ReceivePO)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + events (PurchaseOrderReceived)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Basic price list + lead time tracking",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 16
      },
      {
        "id": 7,
        "title": "Accounting (Cash-based MVP)",
        "description": "Cashbook, simple ledgers, P&L summary; integrate with Sales & Stock valuation",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          5,
          6
        ],
        "complexity": 4,
        "details": "Minimal but coherent cash accounting for MVP KPIs.\n\nUpdate 2025-08-20: Reconciliation helpers (auto one-to-one match with amount/date tolerances; manual reconcile/unreconcile) implemented plus standardized monetary rounding via RoundMoney() extension (AwayFromZero, 2dp) applied across reporting & reconciliation. Central package management and layering cleanup performed.",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Cashbook, Entry, Account) + invariants",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Posting rules: SaleCompleted, purchase receipts, adjustments",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Stock valuation snapshot for P&L",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Cashbook UI (web): entries, filters, export CSV",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Reports: P&L summary, cash position, month-over-month",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Reconciliation helpers + rounding rules",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 28
      },
      {
        "id": 8,
        "title": "CRM Service (MVP)",
        "description": "Customers, interactions, simple loyalty and segments",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "complexity": 3,
        "details": "Customer profiles, purchase history, preferences, segments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Customer, Segment, LoyaltyTx)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Queries (TopCustomers, LapsedCustomers)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + basic loyalty accrual",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 9,
        "title": "Notifications Service (MVP)",
        "description": "Channels (SMS/WhatsApp), templates, audits, rate limits",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Unified notifications for alerts, promos, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Channel providers + retries/Polly",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Templates + variables + localization",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Audit log + consent (POPIA)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 10,
        "title": "Collaboration (Group-Buy) Service (MVP)",
        "description": "Campaigns, participant enrollment, supplier quotation, order split & settlement",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          6,
          9
        ],
        "complexity": 4,
        "details": "Enable collaborative procurement to reduce costs",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Campaign, Participant, Allocation)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "Supplier quotation intake + best-price selection",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Participant enrollment + commitment tracking",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Order split + settlement per participant",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Events + integration with Buying/Stock",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Web UI: campaign list/detail, join/leave, progress",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 11,
        "title": "AI Service (Service-as-a-Software)",
        "description": "Conversational orchestrator, agents, background monitors, outcome tracking",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "complexity": 4,
        "details": "MVP orchestration with Inventory, Sales, Purchasing, Finance, Customer agents",
        "subtasks": [
          {
            "id": 1,
            "title": "Public endpoints: /api/ai/conversation, /automate, /services/status, /outcomes",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Intent classification + routing (keyword + rule-based + fallback)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Request validation + authorization policies (per intent)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Inventory agent: low stock check, reorder recs, auto-PO draft",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Sales agent: process sale request, generate invoice, send receipt",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Purchasing agent: create PO, receive goods, supplier selection hint",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 7,
            "title": "Finance agent: cash flow snapshot, monthly P&L summary, overdue alerts",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 8,
            "title": "Customer agent: follow-ups for lapsed customers, answer FAQs",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Proactive monitor: schedules + event hooks (low stock, overdue invoices, churn)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Automation scheduler: cron-like recurring tasks (daily/weekly/monthly)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "Outcome tracker: define KPIs (revenue↑, stockouts↓, time saved), persist",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Outcome analytics: service performance metrics + ROI report endpoints",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 13,
            "title": "Idempotency + retries + circuit breakers on downstream calls",
            "status": "in-progress",
            "complexity": 2,
            "details": "Progress (2025-08-20): Idempotency middleware implemented for AgentManager & Orchestrator (Idempotency-Key + body hash, 10m cache) with tests. Pending: Polly retry & circuit breaker policies on outbound HTTP clients (LLM calls, future service clients) and metrics integration."
          },
          {
            "id": 14,
            "title": "Structured errors + ProblemDetails for all endpoints",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 15,
            "title": "Observability: traces around orchestration spans + agent actions",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 16,
            "title": "Integration tests: orchestrator→agents happy/edge paths",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 17,
            "title": "Load smoke: conversation/automation p95 latency check",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 18,
            "title": "Docs: swagger annotations + examples for every endpoint",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 34
      },
      {
        "id": 12,
        "title": "Flutter Mobile App (MVP)",
        "description": "Auth, stock flows, POS, offline sync, notifications",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          11
        ],
        "complexity": 4,
        "details": "Primary field app for SMMEs with offline-first",
        "subtasks": [
          {
            "id": 1,
            "title": "Auth + tenant selector + secure storage (flutter_secure_storage)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock dashboard (low stock, quick actions)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Items list (search, filter, barcode scan)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Item detail (stock by warehouse, history, actions)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Stock adjustment flow (reasons, review & confirm)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "POS quick sale (cart, payment method, receipt PDF/share)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 7,
            "title": "Offline cache (SQLite) + sync queue (batch, retry)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 8,
            "title": "Notifications inbox + deep links to entities",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 9,
            "title": "Localization (en/af/zu baseline) + RTL ready",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Accessibility (large text, contrast, voiceover labels)",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 11,
            "title": "Design system (spacing, typography, buttons, inputs)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "E2E flows (happy/edge) with integration env",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 36
      },
      {
        "id": 13,
        "title": "Nuxt 3 Web App (MVP)",
        "description": "Admin dashboards, advanced stock, sales back-office, customers",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          7,
          8,
          11
        ],
        "complexity": 4,
        "details": "Back-office web for management and reporting",
        "subtasks": [
          {
            "id": 1,
            "title": "Authentication + session + permissions (route guards, Pinia)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock management: DataTable (server-side), bulk import/export",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Stock ledger + movement history with running balance",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Sales back-office: refunds, day-end reports",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Customer management + segments + search",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "AI insights panel (reorders, anomalies, forecasts)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Real-time updates (SignalR) + optimistic UI",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Design system + responsive layout (Tailwind)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 9,
            "title": "Accessibility + keyboard nav + aria labels",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 10,
            "title": "E2E tests (Playwright/Cypress) key workflows",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 14,
        "title": "Offline Sync Platform (Cross-Module)",
        "description": "Generic sync protocol and services extended beyond Stock",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          8,
          12,
          13
        ],
        "complexity": 4,
        "details": "Sync engine, conflict resolution, batching and retries for Sales/CRM/Buying",
        "subtasks": [
          {
            "id": 1,
            "title": "Sync protocol v1 + payload versioning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Module adapters (Sales, CRM, Buying) for local ops",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Conflict resolution strategies per module",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "Batching, backoff & retry with jitter",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Telemetry (success, failure, duration, last sync)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Admin UI: sync status, retry, conflict review (web)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 26
      },
      {
        "id": 15,
        "title": "Security & Compliance (POPIA)",
        "description": "RBAC, tenant isolation, encryption, consent & audit",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          2,
          5,
          8,
          9
        ],
        "complexity": 3,
        "details": "Harden services and ensure compliance",
        "subtasks": [
          {
            "id": 1,
            "title": "RBAC policies + enforcement in APIs",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Row-level security by TenantId",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Encryption at rest + TLS everywhere",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Consent + unsubscribe + audit trail",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 16,
        "title": "Performance & Scalability",
        "description": "Indexes, pagination, caching, stress tests",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          11
        ],
        "complexity": 3,
        "details": "Meet PRD performance targets under load",
        "subtasks": [
          {
            "id": 1,
            "title": "DB indexes + query tuning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Pagination everywhere + projections",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Cache hotspots with Redis (where safe)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Load/stress tests + fixes",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 17,
        "title": "Testing Strategy Execution",
        "description": "Unit, integration, E2E across modules with coverage targets",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "complexity": 3,
        "details": "Automated tests integrated into CI with coverage reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Unit tests domain/app for each service",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Integration tests API/repo/events",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "E2E (mobile/web) critical flows",
            "status": "pending",
            "complexity": 3
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 18,
        "title": "Deployment to Production",
        "description": "Infra provisioning, DNS/TLS, backups, runbooks",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2,
          3,
          16
        ],
        "complexity": 3,
        "details": "Reliable prod rollout with monitoring and rollback",
        "subtasks": [
          {
            "id": 1,
            "title": "Provision K8s cluster + managed DB/Redis",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "DNS, TLS, WAF/rate limits",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Backups + restore procedures",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Runbooks + on-call rotation",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 19,
        "title": "Documentation & Training",
        "description": "Finalize docs (API, user, dev, ops) and training materials",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11,
          12,
          13,
          18
        ],
        "complexity": 2,
        "details": "Ensure stakeholders can adopt and operate the platform",
        "subtasks": [
          {
            "id": 1,
            "title": "API refs + SDK snippets",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "User guides + videos (mobile/web)",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Dev/ops guides + troubleshooting",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 20,
        "title": "Go-Live Readiness & UAT",
        "description": "UAT cycles, smoke tests, cutover checklist, launch",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          17,
          18,
          19
        ],
        "complexity": 2,
        "details": "Final checks and stakeholder sign-off for MVP",
        "subtasks": [
          {
            "id": 1,
            "title": "UAT planning + execution + fixes",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "Cutover plan + rollback",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Launch communications",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 8
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2025-08-18T00:00:00Z",
      "projectName": "TOSS ERP III MVP (All Core Modules)",
      "totalTasks": 20,
      "completedTasks": 0,
      "totalEstimatedHours": 336,
      "created": "2025-08-18T00:00:00Z",
      "description": "End-to-end MVP across infrastructure, core services, AI, clients, and DevOps",
      "updated": "2025-08-19T15:19:38.043Z"
    }
  },
  "agent-prepared": {
    "tasks": [
      {
        "id": 1,
        "title": "Verify Orchestrator & AgentManager scaffolds",
        "description": "Run and smoke-test the Orchestrator and AgentManager services added by the agent; record endpoints and sample responses.",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "details": "Start both services locally, call /orchestrator/execute and /agents/intent to validate in-memory behavior and example payloads.",
        "estimatedHours": 1,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T12:00:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 11,
          "subtaskId": 1
        }
      },
      {
        "id": 2,
        "title": "Add unit tests for AgentManager & Orchestrator",
        "description": "Create xUnit unit tests for controller logic and basic in-memory stores.",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Add test projects under tests/ to assert Execute and Intent endpoints return expected shapes; mock external dependencies where needed.\n\nUpdate (2025-08-20): Implemented AgentController and OrchestratorController unit tests including idempotency replay and tenant enforcement cases.",
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T18:30:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 17,
          "subtaskId": 1
        }
      },
      {
        "id": 3,
        "title": "Add integration test harness",
        "description": "Create an integration test that runs both services in-memory (TestServer) and validates a full intent->workflow flow.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Use Microsoft.AspNetCore.Mvc.Testing WebApplicationFactory to spin both apps and perform a simulated conversation leading to a workflow creation and status check.",
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T12:00:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 17,
          "subtaskId": 2
        }
      },
      {
        "id": 4,
        "title": "Generate OpenAPI specs for both services",
        "description": "Emit complete OpenAPI YAML/JSON for Orchestrator and AgentManager and store under docs/openapi/.",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "details": "Enable Swashbuckle/NSwag in each project, export the swagger.json and save checked-in examples.\n\nUpdate (2025-08-20): Added export-openapi.ps1 script invoking Swashbuckle CLI and committed generated specs under docs/openapi/. README updated with usage instructions.",
        "estimatedHours": 2,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T18:30:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 11,
          "subtaskId": 18
        }
      },
      {
        "id": 5,
        "title": "Add GitHub Actions CI workflow",
        "description": "Add a workflow that builds solution, runs unit and integration tests, and publishes artifacts.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "details": "Create .github/workflows/ci.yml to run on push/PR, use matrix for windows/linux, and include dotnet restore/build/test steps.",
        "estimatedHours": 3,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T12:00:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 3,
          "subtaskId": 2
        }
      },
      {
        "id": 6,
        "title": "Create OpenAPI-based client contracts",
        "description": "Generate strongly-typed clients for internal use from the exported OpenAPI specs.",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "details": "Use NSwag or OpenAPI Generator to produce C# clients and add them to a shared Contracts package.",
        "estimatedHours": 2,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T12:00:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 11,
          "subtaskId": 18
        }
      },
      {
        "id": 7,
        "title": "Scaffold Temporal workflow integration",
        "description": "Add initial Temporal client scaffolding and a sample durable workflow for long-running orchestrations.",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "details": "Add Temporal dependencies and a sample worker project; provide configuration placeholders and README notes for running Temporal locally.\n\nUpdate (2025-08-20): Implemented Temporal worker project with SampleWorkflow & Activities; OrchestratorController executes workflow (conditional skip in tests).",
        "estimatedHours": 6,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T18:30:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 11,
          "subtaskId": 16
        }
      },
      {
        "id": 8,
        "title": "Add LLMAdapter stub and config",
        "description": "Create a minimal LLMAdapter abstraction and config entries to allow swapping providers (OpenAI/Azure/Ollama).",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "details": "Implement an interface ILLMAdapter with a test double; wire to AgentManager for intent resolution.\n\nUpdate (2025-08-20): Added StubLLMAdapter and OpenAIAdapter with DI selection via env vars (OPENAI_API_KEY, LLM_MODEL) and health endpoint reflecting adapter.",
        "estimatedHours": 4,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T18:30:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 11,
          "subtaskId": 2
        }
      },
      {
        "id": 9,
        "title": "Document run & dev steps for agents",
        "description": "Add short README snippets and PS1 helper scripts to start services locally for contributors.",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          1
        ],
        "details": "Place scripts in scripts/ and update the docs/SERVICE_AS_A_SOFTWARE.md quick-start with exact commands.",
        "estimatedHours": 1,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T12:00:00Z",
        "consolidatedInto": {
          "tag": "mvp",
          "taskId": 19,
          "subtaskId": 1
        }
      },
      {
        "id": 10,
        "title": "Taskmaster: verify & sync master list",
        "description": "Review overlapping tasks between existing `master` and this `agent-prepared` tag, and mark duplicates or consolidate where appropriate.",
        "status": "pending",
        "priority": "medium",
        "dependencies": [],
        "details": "Create a short report (docs/task-merge-report.md) listing duplicates and suggested canonical IDs for consolidation.",
        "estimatedHours": 2,
        "actualHours": null,
        "assignee": null,
        "createdAt": "2025-08-20T12:00:00Z",
        "updatedAt": "2025-08-20T12:00:00Z",
        "consolidatedInto": {
          "tag": "master",
          "taskId": 20
        }
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastUpdated": "2025-08-20T18:30:00Z",
      "projectName": "agent-prepared",
      "totalTasks": 10,
      "completedTasks": 0,
      "totalEstimatedHours": 31,
      "created": "2025-08-20T12:00:00Z",
      "description": "Non-destructive agent-prepared follow-up tasks",
      "updated": "2025-08-20T12:00:00Z"
    }
  },
  "feature-ai-service": {
    "tasks": [
      {
        "id": 1,
        "title": "Public AI Service Endpoints",
        "description": "Implement /api/ai/conversation, /api/ai/automate, /api/ai/services/status, /api/ai/outcomes endpoints",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "details": "Create minimal controllers with stub responses returning correlationId and placeholder data; include ProblemDetails examples.",
        "estimatedHours": 4
      },
      {
        "id": 2,
        "title": "Intent Classification & Routing Core",
        "description": "Rule/keyword-based intent classification with fallback to LLMAdapter",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Mapping table of patterns -> agent; confidence scoring merge (rule vs LLM).",
        "estimatedHours": 6
      },
      {
        "id": 3,
        "title": "Inventory Agent Actions",
        "description": "Low stock check, reorder recommendation, auto PO draft stub",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Query stock service (stub client now); compute reorder suggestions based on threshold formula.",
        "estimatedHours": 6
      },
      {
        "id": 4,
        "title": "Sales Agent Actions",
        "description": "Process sale request, generate invoice, send receipt (stub)",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Invoke sales service client; simulate receipt generation.",
        "estimatedHours": 5
      },
      {
        "id": 5,
        "title": "Purchasing Agent Actions",
        "description": "Create PO, receive goods, supplier selection hint",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Use procurement client; heuristic supplier selection score (price, leadTime).",
        "estimatedHours": 5
      },
      {
        "id": 6,
        "title": "Finance Agent Actions",
        "description": "Cash flow snapshot, monthly P&L summary, overdue alerts",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Aggregate accounting service endpoints; compute deltas; stub when service absent.",
        "estimatedHours": 6
      },
      {
        "id": 7,
        "title": "Customer Agent Actions",
        "description": "Lapsed customer follow-ups, FAQ answers",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Segment query + templated outreach suggestions; FAQ retrieval stub.",
        "estimatedHours": 4
      },
      {
        "id": 8,
        "title": "Proactive Monitor Scheduler",
        "description": "Schedules + event hooks (low stock, overdue invoices, churn)",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5,
          6,
          7
        ],
        "details": "Temporal cron & signal workflows to trigger agent checks; maintain last-run state.",
        "estimatedHours": 6
      },
      {
        "id": 9,
        "title": "Automation Scheduler Engine",
        "description": "User-defined recurring tasks (daily/weekly/monthly)",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "details": "Persist schedule definitions; Temporal schedule API integration.",
        "estimatedHours": 6
      },
      {
        "id": 10,
        "title": "Outcome Tracking & Analytics",
        "description": "Persist KPIs (revenue increase, stockouts decrease, time saved) & reporting endpoints",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5,
          6,
          7
        ],
        "details": "Schema for kpi_events + rollups; endpoints for summary + trend; traces correlation.",
        "estimatedHours": 6
      },
      {
        "id": 11,
        "title": "Resilience & Observability Hardening",
        "description": "Idempotency, retries, circuit breakers, enriched tracing spans",
        "status": "in-progress",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "details": "Implemented: Idempotency middleware (POST replay safety); Added custom resilience pipeline (retry x3 exponential + jitter, circuit breaker 50%/30s window/5s break, per-attempt timeout 10s, total client timeout 30s) for OpenAI HttpClient with telemetry logging & Activity tags. Pending: enrich spans with retry/circuit breaker counters, add metrics, integration tests, ProblemDetails mapping.",
        "estimatedHours": 5
      },
      {
        "id": 12,
        "title": "Integration & Load Tests (AI Service)",
        "description": "Happy/edge paths + p95 latency smoke",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "details": "Test orchestrator→agents flows & latency budget assertions.",
        "estimatedHours": 4
      },
      {
        "id": 13,
        "title": "API Documentation & Examples",
        "description": "Swagger annotations + illustrative requests/responses",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          1,
          2
        ],
        "details": "XML comments + example providers; markdown quick-start.",
        "estimatedHours": 3
      }
    ],
    "metadata": {
      "version": "0.1.0",
      "lastUpdated": "2025-08-20T18:30:00Z",
      "projectName": "AI Service Feature",
      "totalTasks": 13,
      "completedTasks": 0,
      "created": "2025-08-20T12:00:00Z",
      "description": "Dedicated context for AI Service orchestration and agents",
      "updated": "2025-08-20T18:30:00Z"
    }
  },
  "clients": {
    "tasks": [
      {
        "id": 1,
        "title": "Core Infrastructure Baseline",
        "description": "Establish foundational services and cross-cutting infrastructure for the MVP",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "complexity": 4,
        "details": "Baseline platform services: identity, gateway, event bus, shared libs, configuration, secrets, local dev env",
        "subtasks": [
          {
            "id": 1,
            "title": "Identity & Auth Service (JWT, tenants, roles)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "API Gateway (reverse proxy, routing, rate limits)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Event Bus (MassTransit + RabbitMQ) shared config",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Shared packages (Contracts, Abstractions, Error model)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Centralized configuration & secrets (appsettings, KeyVault)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Local dev environment (docker-compose, seed data)",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 7,
            "title": "JWT signing keys & refresh token flow",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Tenant resolution middleware + per-tenant RLS",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Gateway rate limiting & request size limits",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Event contracts package + error/retry DLQ policy",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "ProblemDetails + correlation IDs cross-cutting",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Dev bootstrap: RabbitMQ, Postgres, Redis containers",
            "status": "done",
            "complexity": 1
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 2,
        "title": "Observability & Health",
        "description": "Logging, metrics, tracing, health endpoints and dashboards",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "complexity": 3,
        "details": "Serilog, OpenTelemetry, health checks, Prometheus/Grafana dashboards, alerting",
        "subtasks": [
          {
            "id": 1,
            "title": "Structured logging with correlation IDs",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "OpenTelemetry tracing + metrics across services",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Health endpoints + readiness/liveness",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 4,
            "title": "Dashboards + alert rules (Prometheus/Grafana)",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 3,
        "title": "DevOps & CI/CD",
        "description": "Pipelines, containerization, manifests and environment promotion",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 4,
        "details": "GitHub Actions, Dockerfiles, Container registry, K8s manifests, Kustomize/Helm, migration automation",
        "subtasks": [
          {
            "id": 1,
            "title": "Dockerfiles for all services",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "GitHub Actions build/test/publish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Kubernetes manifests + Kustomize overlays",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "DB migration automation per service",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Environment promotion (dev→staging→prod)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Container registry + image versioning (semver)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Supply chain: image scanning + SBOM",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Blue/green or rolling deploy strategy",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 18
      },
      {
        "id": 4,
        "title": "Stock Module Completion (MVP integration)",
        "description": "Finish remaining Stock tasks and integrate with platform baselines",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Leverage existing Stock work; finalize background services, AI hooks, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "LowStockMonitor + SignalR hubs finalized",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock reports (ledger/valuation/movement) polish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "AI reorder recommendations endpoint integration",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 5,
        "title": "Sales/POS Service (MVP)",
        "description": "Sales domain + POS flows, receipts/invoices, payments integration, events",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "complexity": 4,
        "details": "Sales domain/application/infrastructure/API, publish SaleCompleted, basic payments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain model (Sale, SaleItem, Tender, Till)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreateSale, Cancel, GetDailySales)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + validations + Swagger",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Event publishing: SaleCompleted",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 5,
            "title": "Payments gateway integration (MVP set)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Repositories + unit tests (domain/app)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Receipt generation & numbering",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "POS input validation & error codes",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 24
      },
      {
        "id": 6,
        "title": "Buying/Procurement Service (MVP)",
        "description": "Suppliers, purchase orders, receipts, pricing; events to Stock",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5
        ],
        "complexity": 3,
        "details": "Core procurement lifecycle and integration with Stock increments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Supplier, PurchaseOrder, POItem)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreatePO, ReceivePO)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + events (PurchaseOrderReceived)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Basic price list + lead time tracking",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 16
      },
      {
        "id": 7,
        "title": "Accounting (Cash-based MVP)",
        "description": "Cashbook, simple ledgers, P&L summary; integrate with Sales & Stock valuation",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          5,
          6
        ],
        "complexity": 4,
        "details": "Minimal but coherent cash accounting for MVP KPIs.\n\nUpdate 2025-08-20: Reconciliation helpers (auto one-to-one match with amount/date tolerances; manual reconcile/unreconcile) implemented plus standardized monetary rounding via RoundMoney() extension (AwayFromZero, 2dp) applied across reporting & reconciliation. Central package management and layering cleanup performed.",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Cashbook, Entry, Account) + invariants",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Posting rules: SaleCompleted, purchase receipts, adjustments",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Stock valuation snapshot for P&L",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Cashbook UI (web): entries, filters, export CSV",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Reports: P&L summary, cash position, month-over-month",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Reconciliation helpers + rounding rules",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 28
      },
      {
        "id": 8,
        "title": "CRM Service (MVP)",
        "description": "Customers, interactions, simple loyalty and segments",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "complexity": 3,
        "details": "Customer profiles, purchase history, preferences, segments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Customer, Segment, LoyaltyTx)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Queries (TopCustomers, LapsedCustomers)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + basic loyalty accrual",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 9,
        "title": "Notifications Service (MVP)",
        "description": "Channels (SMS/WhatsApp), templates, audits, rate limits",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Unified notifications for alerts, promos, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Channel providers + retries/Polly",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Templates + variables + localization",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Audit log + consent (POPIA)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 10,
        "title": "Collaboration (Group-Buy) Service (MVP)",
        "description": "Campaigns, participant enrollment, supplier quotation, order split & settlement",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          6,
          9
        ],
        "complexity": 4,
        "details": "Enable collaborative procurement to reduce costs",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Campaign, Participant, Allocation)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "Supplier quotation intake + best-price selection",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Participant enrollment + commitment tracking",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Order split + settlement per participant",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Events + integration with Buying/Stock",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Web UI: campaign list/detail, join/leave, progress",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 11,
        "title": "AI Service (Service-as-a-Software)",
        "description": "Conversational orchestrator, agents, background monitors, outcome tracking",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "complexity": 4,
        "details": "MVP orchestration with Inventory, Sales, Purchasing, Finance, Customer agents",
        "subtasks": [
          {
            "id": 1,
            "title": "Public endpoints: /api/ai/conversation, /automate, /services/status, /outcomes",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Intent classification + routing (keyword + rule-based + fallback)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Request validation + authorization policies (per intent)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Inventory agent: low stock check, reorder recs, auto-PO draft",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Sales agent: process sale request, generate invoice, send receipt",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Purchasing agent: create PO, receive goods, supplier selection hint",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 7,
            "title": "Finance agent: cash flow snapshot, monthly P&L summary, overdue alerts",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 8,
            "title": "Customer agent: follow-ups for lapsed customers, answer FAQs",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Proactive monitor: schedules + event hooks (low stock, overdue invoices, churn)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Automation scheduler: cron-like recurring tasks (daily/weekly/monthly)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "Outcome tracker: define KPIs (revenue↑, stockouts↓, time saved), persist",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Outcome analytics: service performance metrics + ROI report endpoints",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 13,
            "title": "Idempotency + retries + circuit breakers on downstream calls",
            "status": "in-progress",
            "complexity": 2,
            "details": "Progress (2025-08-20): Idempotency middleware implemented for AgentManager & Orchestrator (Idempotency-Key + body hash, 10m cache) with tests. Pending: Polly retry & circuit breaker policies on outbound HTTP clients (LLM calls, future service clients) and metrics integration."
          },
          {
            "id": 14,
            "title": "Structured errors + ProblemDetails for all endpoints",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 15,
            "title": "Observability: traces around orchestration spans + agent actions",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 16,
            "title": "Integration tests: orchestrator→agents happy/edge paths",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 17,
            "title": "Load smoke: conversation/automation p95 latency check",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 18,
            "title": "Docs: swagger annotations + examples for every endpoint",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 34
      },
      {
        "id": 12,
        "title": "Flutter Mobile App (MVP)",
        "description": "Auth, stock flows, POS, offline sync, notifications",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          4,
          5,
          11
        ],
        "complexity": 4,
        "details": "Primary field app for SMMEs with offline-first",
        "subtasks": [
          {
            "id": 1,
            "title": "Flutter: Env & flavors (dev/staging/prod)",
            "description": "Configure dev/staging/prod env files and ensure runtime config works in debug/release.",
            "details": "Acceptance:\n- .env/dev, .env/staging, .env/prod loaded via flutter_dotenv (or similar)\n- API base URL, tenant ID, log level switch per flavor\n- Build variants selectable; readme snippet for running each\n- Secrets not committed; .env.example added",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 2,
            "title": "Flutter: API client (Dio + interceptors)",
            "description": "HTTP client with interceptors for auth, idempotency, tracing, and error mapping.",
            "details": "Acceptance:\n- Dio client singleton with interceptors: Authorization, Idempotency-Key (POST/PUT), X-Correlation-ID\n- Retry/backoff for 5xx and network errors\n- RFC9457 ProblemDetails parsed to a typed error\n- Unit tests for interceptor behavior",
            "status": "pending",
            "dependencies": [
              "12.1"
            ],
            "parentTaskId": 12
          },
          {
            "id": 3,
            "title": "Flutter: Auth flow + secure token storage",
            "description": "Username/password auth, token storage, refresh, and lock screen.",
            "details": "Acceptance:\n- Login screen (email+password) → JWT + refresh saved to secure storage\n- Auto-refresh tokens before expiry; logout on 401/invalid\n- Lock screen after inactivity (configurable)\n- Happy/edge path tests for auth service",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 4,
            "title": "Flutter: RBAC guards for routes & UI",
            "description": "Guard routes and features using roles/permissions from JWT/claims.",
            "details": "Acceptance:\n- Permissions model derived from JWT roles/scopes\n- Route guard denies access and shows friendly message\n- Feature flags hide actions when lacking permission\n- Unit tests for guard logic",
            "status": "pending",
            "dependencies": [
              "12.3"
            ],
            "parentTaskId": 12
          },
          {
            "id": 5,
            "title": "Flutter: App shell + GoRouter navigation",
            "description": "Set up app shell, theming, and typed navigation.",
            "details": "Acceptance:\n- GoRouter configured with strongly-typed routes\n- Light/dark theme and brand colors\n- AppScaffold with top-level nav, error boundary, and toast system\n- Navigation tests for deep-links",
            "status": "pending",
            "dependencies": [
              "12.4"
            ],
            "parentTaskId": 12
          },
          {
            "id": 6,
            "title": "Flutter: Offline storage (Drift/Hive) + repositories",
            "description": "Local DB and caching for offline-first flows (stock, sales queue).",
            "details": "Acceptance:\n- Drift/Hive chosen and wired\n- Entities: Item, StockLevel, PendingSale, SyncCursor\n- Repository pattern with online/offline sources\n- Unit tests for repo fallbacks",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 7,
            "title": "Flutter: Offline sync engine + conflict handling",
            "description": "Bidirectional sync engine with conflict handling.",
            "details": "Acceptance:\n- Background sync task with exponential backoff\n- Push PendingSales; pull StockLevels; merge by updatedAt + ETag\n- Conflict policy documented; surfaced in UI review list\n- Telemetry: last sync time, counts",
            "status": "pending",
            "dependencies": [
              "12.6"
            ],
            "parentTaskId": 12
          },
          {
            "id": 8,
            "title": "Flutter: Stock list (server pagination + filters)",
            "description": "Stock list with server-driven pagination, filters, and infinite scroll.",
            "details": "Acceptance:\n- Screen: Stock list with search, filters (brand/category), sort\n- Uses server cursor pagination via API client\n- Infinite scroll with loading states; pull-to-refresh\n- Snapshot tests for UI states",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 9,
            "title": "Flutter: Item detail + ledger/movements",
            "description": "Item detail with stock ledger and recent movements.",
            "details": "Acceptance:\n- Screen: Item detail with tabs (Details, Ledger, Movements)\n- Ledger: paginated; Movement: last 20\n- Error display uses ProblemDetails mapping\n- Unit/component tests",
            "status": "pending",
            "dependencies": [
              "12.8"
            ],
            "parentTaskId": 12
          },
          {
            "id": 10,
            "title": "Flutter: POS flow (cart → tender → receipt)",
            "description": "Point-of-Sale cart, tender, and receipt printing/share.",
            "details": "Acceptance:\n- Screen: POS with scan/add, quantities/discounts\n- Tender: cash/mobile money; validation\n- On submit: CreateSale; show receipt with share/print\n- Offline queue when network down",
            "status": "pending",
            "dependencies": [
              "12.3"
            ],
            "parentTaskId": 12
          },
          {
            "id": 11,
            "title": "Flutter: Notifications (local + push)",
            "description": "In-app notifications and push integration for critical events.",
            "details": "Acceptance:\n- Local notification service abstraction\n- Push via FCM/APNS wired; token registered with backend\n- Handle foreground/background taps\n- E2E happy path with a mock push",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 12,
            "title": "Flutter: Real-time updates (SignalR)",
            "description": "Monitor server-sent events (SignalR) for stock updates and POS outcomes.",
            "details": "Acceptance:\n- SignalR client connected; auto-reconnect/backoff\n- Subscribe to stock update + sale completed channels\n- UI reacts in real-time; unit tests for stream handling",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 13,
            "title": "Flutter: i18n + locale formats",
            "description": "Language packs and runtime language switcher.",
            "details": "Acceptance:\n- intl/arb scaffolding; en + one additional locale\n- Date/number/currency formatting per locale\n- In-app language switch persists\n- i18n tests for key screens",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 14,
            "title": "Flutter: Accessibility (a11y) pass",
            "description": "Accessibility basics for mobile flows.",
            "details": "Acceptance:\n- Semantic labels, focus order, larger fonts support\n- Color contrast validated\n- Screen reader friendly on auth, stock, POS\n- Accessibility checklist completed",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 15,
            "title": "Flutter: Testing harness + coverage",
            "description": "Unit, widget, and integration tests with coverage gates.",
            "details": "Acceptance:\n- Test harness for API client, repos, sync, POS\n- Golden tests for key screens\n- Coverage threshold >= 60%\n- Test docs in README",
            "status": "pending",
            "dependencies": [
              "12.5"
            ],
            "parentTaskId": 12
          },
          {
            "id": 16,
            "title": "Flutter: Analytics + crash reporting",
            "description": "Telemetry and crash reporting for mobile app.",
            "details": "Acceptance:\n- Analytics events for key flows (login, POS submit, sync)\n- Crash reporting hooked (e.g., Sentry/Firebase Crashlytics)\n- Privacy toggle and PII scrubber\n- Dashboard shows events within test project",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 17,
            "title": "Flutter: Settings + profile screens",
            "description": "Basic settings and profile pages.",
            "details": "Acceptance:\n- Settings: env switch (dev/staging), theme, language\n- Profile: view claims/roles; logout\n- Unit tests for settings persistence",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 18,
            "title": "Flutter: Docker image (web) + nginx config",
            "description": "Dockerfile for Flutter web build and nginx runtime.",
            "details": "Acceptance:\n- Multi-stage Dockerfile: flutter build web → nginx\n- nginx.conf sets security headers; gzip/brotli\n- Image built locally; serves PWA with correct base href",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 19,
            "title": "Flutter: Release packaging (Android/iOS)",
            "description": "Play Store/TestFlight packaging setup.",
            "details": "Acceptance:\n- App icons/splash; package IDs and signing configs\n- Dev and prod distribution tracks\n- Store metadata placeholders\n- Checklist for release steps",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 20,
            "title": "Flutter: Docs + CI wiring",
            "description": "Docs and CI steps to build/test/lint the mobile app.",
            "details": "Acceptance:\n- README: run, test, build, env setup\n- CI: flutter analyze + test + build web\n- Badges and coverage upload\n- Troubleshooting tips",
            "status": "pending",
            "dependencies": [
              "12.15"
            ],
            "parentTaskId": 12
          }
        ],
        "estimatedHours": 36
      },
      {
        "id": 13,
        "title": "Nuxt 3 Web App (MVP)",
        "description": "Admin dashboards, advanced stock, sales back-office, customers",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          4,
          5,
          7,
          8,
          11
        ],
        "complexity": 4,
        "details": "Back-office web for management and reporting",
        "subtasks": [
          {
            "id": 1,
            "title": "Nuxt: Env & runtime config (dev/staging/prod)",
            "description": "Runtime config per environment with safe public/private vars.",
            "details": "Acceptance:\n- .env files for dev/staging/prod; .env.example added\n- nuxt.config.ts uses runtimeConfig/public for API base, tenant, log level\n- NUXT_PUBLIC_* only for safe values; secrets not committed\n- Docs: how to run with each env",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 2,
            "title": "Nuxt: API client (ofetch/axios) + interceptors",
            "description": "HTTP client with interceptors and typed errors.",
            "details": "Acceptance:\n- ofetch/axios wrapper with interceptors: Authorization, Idempotency-Key (POST/PUT), X-Correlation-ID\n- Retry/backoff on 5xx/network\n- RFC9457 ProblemDetails mapped to typed error (+toasts)\n- Unit tests for interceptor logic",
            "status": "pending",
            "dependencies": [
              "13.1"
            ],
            "parentTaskId": 13
          },
          {
            "id": 3,
            "title": "Nuxt: Auth/session + refresh",
            "description": "Login, session persistence, refresh, and logout.",
            "details": "Acceptance:\n- Login page → stores JWT + refresh securely (httpOnly cookie if feasible)\n- Auto-refresh; 401 leads to logout and redirect\n- Me endpoint on boot; skeleton while loading\n- Tests for happy/edge paths",
            "status": "pending",
            "dependencies": [
              "13.2"
            ],
            "parentTaskId": 13
          },
          {
            "id": 4,
            "title": "Nuxt: RBAC route middleware + v-can directive",
            "description": "Protect routes and conditionally render actions based on permissions.",
            "details": "Acceptance:\n- Route middleware checks roles/scopes; denies with friendly page\n- v-can directive/composable hides disabled actions\n- Tests for middleware and directive",
            "status": "pending",
            "dependencies": [
              "13.3"
            ],
            "parentTaskId": 13
          },
          {
            "id": 5,
            "title": "Nuxt: App shell/layout + navigation + error boundary",
            "description": "Global layout, navigation, and error boundary.",
            "details": "Acceptance:\n- Default layout with nav/sidebar, breadcrumbs, user menu\n- Global error boundary surfaces ProblemDetails nicely\n- Toast/notification plugin and loading bar\n- Snapshot tests for layout",
            "status": "pending",
            "dependencies": [
              "13.4"
            ],
            "parentTaskId": 13
          },
          {
            "id": 6,
            "title": "Nuxt: Stock management data table (server-side)",
            "description": "Server-side data table with filters, sorts, and bulk actions.",
            "details": "Acceptance:\n- Stock list page with server pagination, filter chips, sort\n- Bulk select + export CSV\n- Column show/hide + saved views\n- Component tests and API mocks",
            "status": "pending",
            "dependencies": [
              "13.2"
            ],
            "parentTaskId": 13
          },
          {
            "id": 7,
            "title": "Nuxt: Bulk import/export via Jobs API",
            "description": "Import/export flows for stock and customers using Jobs API.",
            "details": "Acceptance:\n- Import wizard (CSV/XLSX) starts async job; poll status; show errors\n- Export current view to CSV via Jobs API\n- File validation + sample templates\n- E2E tests with Cypress",
            "status": "pending",
            "dependencies": [
              "13.6"
            ],
            "parentTaskId": 13
          },
          {
            "id": 8,
            "title": "Nuxt: Stock ledger + movements views",
            "description": "Stock ledger and movement views with filtering and drill-down.",
            "details": "Acceptance:\n- Ledger view: date range, warehouse, item filters\n- Movement view: recent movements; link to item/sale/PO\n- Pagination + export\n- Tests for filters and navigation",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 9,
            "title": "Nuxt: Refunds flow (back office)",
            "description": "Refunds flow for sales back office.",
            "details": "Acceptance:\n- Refund initiation from sale detail; validations\n- CreateRefund API call with idempotency; shows updated receipt\n- Audit trail shown; ProblemDetails when forbidden\n- Component + e2e tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 10,
            "title": "Nuxt: Day-end reports dashboard",
            "description": "Day-end reports with export and schedule.",
            "details": "Acceptance:\n- Dashboard: sales summary, cash position, top items\n- Export CSV/PDF via Jobs API\n- Schedule daily email via Notifications\n- Cypress tests for widgets and exports",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 11,
            "title": "Nuxt: Customer management + segments",
            "description": "Customer CRUD and segments with saved filters.",
            "details": "Acceptance:\n- Customers list/detail/edit\n- Segments: create/edit, saved filters applied to list\n- Bulk actions: export, notify segment via Notifications\n- Component + e2e tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 12,
            "title": "Nuxt: AI insights panel wiring",
            "description": "AI panel that surfaces insights and suggested actions.",
            "details": "Acceptance:\n- Right-side AI insights drawer on stock/sales pages\n- Calls AI service; shows insight cards + quick actions\n- Track outcomes with /outcomes API\n- Tests with mocked AI responses",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 13,
            "title": "Nuxt: Real-time updates (SignalR)",
            "description": "Real-time updates using SignalR for web.",
            "details": "Acceptance:\n- SignalR client plugin; auto-reconnect\n- Subscriptions to stock changes and sale completed\n- UI updates via Pinia stores\n- Tests for stream handling",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 14,
            "title": "Nuxt: Design system + shared components",
            "description": "Shared design system with Tailwind and component library.",
            "details": "Acceptance:\n- Tailwind config + base styles\n- Shared UI components: DataTable, Modal, FormField, Badge\n- Storybook or Histoire docs\n- Visual regression on core components",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 15,
            "title": "Nuxt: Accessibility + keyboard nav",
            "description": "Keyboard navigation and accessibility.",
            "details": "Acceptance:\n- Focus traps, skip links, ARIA roles\n- Keyboard shortcuts for table nav and actions\n- Axe checks in CI; color contrast validated\n- E2E tests for keyboard flows",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 16,
            "title": "Nuxt: Testing (Vitest + Cypress) + coverage",
            "description": "Unit, component, and e2e testing setup and coverage gate.",
            "details": "Acceptance:\n- Vitest + Vue Test Utils configured\n- Cypress e2e with login helper and API mocks\n- Coverage >= 60%; reports uploaded in CI\n- Test docs in README",
            "status": "pending",
            "dependencies": [
              "13.5"
            ],
            "parentTaskId": 13
          },
          {
            "id": 17,
            "title": "Nuxt: CI + Docker image + nginx",
            "description": "CI pipeline and Docker image for web client.",
            "details": "Acceptance:\n- CI: install, typecheck, lint, unit, e2e (smoke), build\n- Dockerfile for Nuxt server/static as appropriate\n- Nginx config for static/cdn; headers and gzip/brotli\n- Deploy artifact ready",
            "status": "pending",
            "dependencies": [
              "13.16"
            ],
            "parentTaskId": 13
          },
          {
            "id": 18,
            "title": "Nuxt: Performance analytics + error tracking",
            "description": "Performance, analytics, and Sentry.",
            "details": "Acceptance:\n- Web vitals reporting; route timings\n- Sentry or alternative for error tracking\n- Consent toggle and PII scrubber\n- Dashboard shows captured events",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 19,
            "title": "Nuxt: Docs + deployment guide",
            "description": "Docs and deployment steps.",
            "details": "Acceptance:\n- README: env vars, scripts, dev workflow\n- Deploy guide: docker, k8s ingress hints\n- Troubleshooting and FAQ\n- Badges on README",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 20,
            "title": "Nuxt: Feature flags + settings page",
            "description": "Feature toggles and settings page.",
            "details": "Acceptance:\n- Feature flags plumbed via runtimeConfig/public or backend\n- Settings page for user-level prefs (theme, table density)\n- Persist to localStorage/cookies\n- Unit tests for feature flag logic",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 14,
        "title": "Offline Sync Platform (Cross-Module)",
        "description": "Generic sync protocol and services extended beyond Stock",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          8,
          12,
          13
        ],
        "complexity": 4,
        "details": "Sync engine, conflict resolution, batching and retries for Sales/CRM/Buying",
        "subtasks": [
          {
            "id": 1,
            "title": "Sync protocol v1 + payload versioning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Module adapters (Sales, CRM, Buying) for local ops",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Conflict resolution strategies per module",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "Batching, backoff & retry with jitter",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Telemetry (success, failure, duration, last sync)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Admin UI: sync status, retry, conflict review (web)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 26
      },
      {
        "id": 15,
        "title": "Security & Compliance (POPIA)",
        "description": "RBAC, tenant isolation, encryption, consent & audit",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          2,
          5,
          8,
          9
        ],
        "complexity": 3,
        "details": "Harden services and ensure compliance",
        "subtasks": [
          {
            "id": 1,
            "title": "RBAC policies + enforcement in APIs",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Row-level security by TenantId",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Encryption at rest + TLS everywhere",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Consent + unsubscribe + audit trail",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 16,
        "title": "Performance & Scalability",
        "description": "Indexes, pagination, caching, stress tests",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          11
        ],
        "complexity": 3,
        "details": "Meet PRD performance targets under load",
        "subtasks": [
          {
            "id": 1,
            "title": "DB indexes + query tuning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Pagination everywhere + projections",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Cache hotspots with Redis (where safe)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Load/stress tests + fixes",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 17,
        "title": "Testing Strategy Execution",
        "description": "Unit, integration, E2E across modules with coverage targets",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "complexity": 3,
        "details": "Automated tests integrated into CI with coverage reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Unit tests domain/app for each service",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Integration tests API/repo/events",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "E2E (mobile/web) critical flows",
            "status": "pending",
            "complexity": 3
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 18,
        "title": "Deployment to Production",
        "description": "Infra provisioning, DNS/TLS, backups, runbooks",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2,
          3,
          16
        ],
        "complexity": 3,
        "details": "Reliable prod rollout with monitoring and rollback",
        "subtasks": [
          {
            "id": 1,
            "title": "Provision K8s cluster + managed DB/Redis",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "DNS, TLS, WAF/rate limits",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Backups + restore procedures",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Runbooks + on-call rotation",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 19,
        "title": "Documentation & Training",
        "description": "Finalize docs (API, user, dev, ops) and training materials",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11,
          12,
          13,
          18
        ],
        "complexity": 2,
        "details": "Ensure stakeholders can adopt and operate the platform",
        "subtasks": [
          {
            "id": 1,
            "title": "API refs + SDK snippets",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "User guides + videos (mobile/web)",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Dev/ops guides + troubleshooting",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 20,
        "title": "Go-Live Readiness & UAT",
        "description": "UAT cycles, smoke tests, cutover checklist, launch",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          17,
          18,
          19
        ],
        "complexity": 2,
        "details": "Final checks and stakeholder sign-off for MVP",
        "subtasks": [
          {
            "id": 1,
            "title": "UAT planning + execution + fixes",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "Cutover plan + rollback",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Launch communications",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 8
      }
    ],
    "metadata": {
      "created": "2025-08-23T15:52:48.503Z",
      "updated": "2025-08-23T15:58:24.589Z",
      "description": "Tag created on 23/8/2025"
    }
  },
  "full-app": {
    "tasks": [
      {
        "id": 1,
        "title": "Core Infrastructure Baseline",
        "description": "Establish foundational services and cross-cutting infrastructure for the MVP",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "complexity": 4,
        "details": "Baseline platform services: identity, gateway, event bus, shared libs, configuration, secrets, local dev env",
        "subtasks": [
          {
            "id": 1,
            "title": "Identity & Auth Service (JWT, tenants, roles)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "API Gateway (reverse proxy, routing, rate limits)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Event Bus (MassTransit + RabbitMQ) shared config",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Shared packages (Contracts, Abstractions, Error model)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Centralized configuration & secrets (appsettings, KeyVault)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Local dev environment (docker-compose, seed data)",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 7,
            "title": "JWT signing keys & refresh token flow",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Tenant resolution middleware + per-tenant RLS",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Gateway rate limiting & request size limits",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Event contracts package + error/retry DLQ policy",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "ProblemDetails + correlation IDs cross-cutting",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Dev bootstrap: RabbitMQ, Postgres, Redis containers",
            "status": "done",
            "complexity": 1
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 2,
        "title": "Observability & Health",
        "description": "Logging, metrics, tracing, health endpoints and dashboards",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "complexity": 3,
        "details": "Serilog, OpenTelemetry, health checks, Prometheus/Grafana dashboards, alerting",
        "subtasks": [
          {
            "id": 1,
            "title": "Structured logging with correlation IDs",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "OpenTelemetry tracing + metrics across services",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Health endpoints + readiness/liveness",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 4,
            "title": "Dashboards + alert rules (Prometheus/Grafana)",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 3,
        "title": "DevOps & CI/CD",
        "description": "Pipelines, containerization, manifests and environment promotion",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 4,
        "details": "GitHub Actions, Dockerfiles, Container registry, K8s manifests, Kustomize/Helm, migration automation",
        "subtasks": [
          {
            "id": 1,
            "title": "Dockerfiles for all services",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "GitHub Actions build/test/publish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Kubernetes manifests + Kustomize overlays",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "DB migration automation per service",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Environment promotion (dev→staging→prod)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Container registry + image versioning (semver)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Supply chain: image scanning + SBOM",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "Blue/green or rolling deploy strategy",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 18
      },
      {
        "id": 4,
        "title": "Stock Module Completion (MVP integration)",
        "description": "Finish remaining Stock tasks and integrate with platform baselines",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Leverage existing Stock work; finalize background services, AI hooks, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "LowStockMonitor + SignalR hubs finalized",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Stock reports (ledger/valuation/movement) polish",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "AI reorder recommendations endpoint integration",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 5,
        "title": "Sales/POS Service (MVP)",
        "description": "Sales domain + POS flows, receipts/invoices, payments integration, events",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "complexity": 4,
        "details": "Sales domain/application/infrastructure/API, publish SaleCompleted, basic payments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain model (Sale, SaleItem, Tender, Till)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreateSale, Cancel, GetDailySales)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + validations + Swagger",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Event publishing: SaleCompleted",
            "status": "done",
            "complexity": 1
          },
          {
            "id": 5,
            "title": "Payments gateway integration (MVP set)",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Repositories + unit tests (domain/app)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 7,
            "title": "Receipt generation & numbering",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 8,
            "title": "POS input validation & error codes",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 24
      },
      {
        "id": 6,
        "title": "Buying/Procurement Service (MVP)",
        "description": "Suppliers, purchase orders, receipts, pricing; events to Stock",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5
        ],
        "complexity": 3,
        "details": "Core procurement lifecycle and integration with Stock increments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Supplier, PurchaseOrder, POItem)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Commands/Queries (CreatePO, ReceivePO)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + events (PurchaseOrderReceived)",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Basic price list + lead time tracking",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 16
      },
      {
        "id": 7,
        "title": "Accounting (Cash-based MVP)",
        "description": "Cashbook, simple ledgers, P&L summary; integrate with Sales & Stock valuation",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          5,
          6
        ],
        "complexity": 4,
        "details": "Minimal but coherent cash accounting for MVP KPIs.\n\nUpdate 2025-08-20: Reconciliation helpers (auto one-to-one match with amount/date tolerances; manual reconcile/unreconcile) implemented plus standardized monetary rounding via RoundMoney() extension (AwayFromZero, 2dp) applied across reporting & reconciliation. Central package management and layering cleanup performed.",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Cashbook, Entry, Account) + invariants",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Posting rules: SaleCompleted, purchase receipts, adjustments",
            "status": "done",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Stock valuation snapshot for P&L",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Cashbook UI (web): entries, filters, export CSV",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Reports: P&L summary, cash position, month-over-month",
            "status": "done",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Reconciliation helpers + rounding rules",
            "status": "done",
            "complexity": 2
          }
        ],
        "estimatedHours": 28
      },
      {
        "id": 8,
        "title": "CRM Service (MVP)",
        "description": "Customers, interactions, simple loyalty and segments",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "complexity": 3,
        "details": "Customer profiles, purchase history, preferences, segments",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Customer, Segment, LoyaltyTx)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Queries (TopCustomers, LapsedCustomers)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "API endpoints + basic loyalty accrual",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 9,
        "title": "Notifications Service (MVP)",
        "description": "Channels (SMS/WhatsApp), templates, audits, rate limits",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "complexity": 3,
        "details": "Unified notifications for alerts, promos, reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Channel providers + retries/Polly",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Templates + variables + localization",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Audit log + consent (POPIA)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 10,
        "title": "Collaboration (Group-Buy) Service (MVP)",
        "description": "Campaigns, participant enrollment, supplier quotation, order split & settlement",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          1,
          6,
          9
        ],
        "complexity": 4,
        "details": "Enable collaborative procurement to reduce costs",
        "subtasks": [
          {
            "id": 1,
            "title": "Domain (Campaign, Participant, Allocation)",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 2,
            "title": "Supplier quotation intake + best-price selection",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Participant enrollment + commitment tracking",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Order split + settlement per participant",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Events + integration with Buying/Stock",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Web UI: campaign list/detail, join/leave, progress",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 11,
        "title": "AI Service (Service-as-a-Software)",
        "description": "Conversational orchestrator, agents, background monitors, outcome tracking",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          "27",
          "28"
        ],
        "complexity": 4,
        "details": "MVP orchestration with Inventory, Sales, Purchasing, Finance, Customer agents",
        "subtasks": [
          {
            "id": 1,
            "title": "Public endpoints: /api/ai/conversation, /automate, /services/status, /outcomes",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Intent classification + routing (keyword + rule-based + fallback)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Request validation + authorization policies (per intent)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Inventory agent: low stock check, reorder recs, auto-PO draft",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 5,
            "title": "Sales agent: process sale request, generate invoice, send receipt",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 6,
            "title": "Purchasing agent: create PO, receive goods, supplier selection hint",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 7,
            "title": "Finance agent: cash flow snapshot, monthly P&L summary, overdue alerts",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 8,
            "title": "Customer agent: follow-ups for lapsed customers, answer FAQs",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 9,
            "title": "Proactive monitor: schedules + event hooks (low stock, overdue invoices, churn)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 10,
            "title": "Automation scheduler: cron-like recurring tasks (daily/weekly/monthly)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 11,
            "title": "Outcome tracker: define KPIs (revenue↑, stockouts↓, time saved), persist",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 12,
            "title": "Outcome analytics: service performance metrics + ROI report endpoints",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 13,
            "title": "Idempotency + retries + circuit breakers on downstream calls",
            "status": "in-progress",
            "complexity": 2,
            "details": "Progress (2025-08-20): Idempotency middleware implemented for AgentManager & Orchestrator (Idempotency-Key + body hash, 10m cache) with tests. Pending: Polly retry & circuit breaker policies on outbound HTTP clients (LLM calls, future service clients) and metrics integration."
          },
          {
            "id": 14,
            "title": "Structured errors + ProblemDetails for all endpoints",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 15,
            "title": "Observability: traces around orchestration spans + agent actions",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 16,
            "title": "Integration tests: orchestrator→agents happy/edge paths",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 17,
            "title": "Load smoke: conversation/automation p95 latency check",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 18,
            "title": "Docs: swagger annotations + examples for every endpoint",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 34
      },
      {
        "id": 12,
        "title": "Flutter Mobile App (MVP)",
        "description": "Auth, stock flows, POS, offline sync, notifications",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          4,
          5,
          11
        ],
        "complexity": 4,
        "details": "Primary field app for SMMEs with offline-first",
        "subtasks": [
          {
            "id": 1,
            "title": "Flutter: Env & flavors (dev/staging/prod)",
            "description": "Configure dev/staging/prod env files and ensure runtime config works in debug/release.",
            "details": "Acceptance:\n- .env/dev, .env/staging, .env/prod loaded via flutter_dotenv (or similar)\n- API base URL, tenant ID, log level switch per flavor\n- Build variants selectable; readme snippet for running each\n- Secrets not committed; .env.example added",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 2,
            "title": "Flutter: API client (Dio + interceptors)",
            "description": "HTTP client with interceptors for auth, idempotency, tracing, and error mapping.",
            "details": "Acceptance:\n- Dio client singleton with interceptors: Authorization, Idempotency-Key (POST/PUT), X-Correlation-ID\n- Retry/backoff for 5xx and network errors\n- RFC9457 ProblemDetails parsed to a typed error\n- Unit tests for interceptor behavior",
            "status": "pending",
            "dependencies": [
              "12.1"
            ],
            "parentTaskId": 12
          },
          {
            "id": 3,
            "title": "Flutter: Auth flow + secure token storage",
            "description": "Username/password auth, token storage, refresh, and lock screen.",
            "details": "Acceptance:\n- Login screen (email+password) → JWT + refresh saved to secure storage\n- Auto-refresh tokens before expiry; logout on 401/invalid\n- Lock screen after inactivity (configurable)\n- Happy/edge path tests for auth service",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 4,
            "title": "Flutter: RBAC guards for routes & UI",
            "description": "Guard routes and features using roles/permissions from JWT/claims.",
            "details": "Acceptance:\n- Permissions model derived from JWT roles/scopes\n- Route guard denies access and shows friendly message\n- Feature flags hide actions when lacking permission\n- Unit tests for guard logic",
            "status": "pending",
            "dependencies": [
              "12.3"
            ],
            "parentTaskId": 12
          },
          {
            "id": 5,
            "title": "Flutter: App shell + GoRouter navigation",
            "description": "Set up app shell, theming, and typed navigation.",
            "details": "Acceptance:\n- GoRouter configured with strongly-typed routes\n- Light/dark theme and brand colors\n- AppScaffold with top-level nav, error boundary, and toast system\n- Navigation tests for deep-links",
            "status": "pending",
            "dependencies": [
              "12.4"
            ],
            "parentTaskId": 12
          },
          {
            "id": 6,
            "title": "Flutter: Offline storage (Drift/Hive) + repositories",
            "description": "Local DB and caching for offline-first flows (stock, sales queue).",
            "details": "Acceptance:\n- Drift/Hive chosen and wired\n- Entities: Item, StockLevel, PendingSale, SyncCursor\n- Repository pattern with online/offline sources\n- Unit tests for repo fallbacks",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 7,
            "title": "Flutter: Offline sync engine + conflict handling",
            "description": "Bidirectional sync engine with conflict handling.",
            "details": "Acceptance:\n- Background sync task with exponential backoff\n- Push PendingSales; pull StockLevels; merge by updatedAt + ETag\n- Conflict policy documented; surfaced in UI review list\n- Telemetry: last sync time, counts",
            "status": "pending",
            "dependencies": [
              "12.6"
            ],
            "parentTaskId": 12
          },
          {
            "id": 8,
            "title": "Flutter: Stock list (server pagination + filters)",
            "description": "Stock list with server-driven pagination, filters, and infinite scroll.",
            "details": "Acceptance:\n- Screen: Stock list with search, filters (brand/category), sort\n- Uses server cursor pagination via API client\n- Infinite scroll with loading states; pull-to-refresh\n- Snapshot tests for UI states",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 9,
            "title": "Flutter: Item detail + ledger/movements",
            "description": "Item detail with stock ledger and recent movements.",
            "details": "Acceptance:\n- Screen: Item detail with tabs (Details, Ledger, Movements)\n- Ledger: paginated; Movement: last 20\n- Error display uses ProblemDetails mapping\n- Unit/component tests",
            "status": "pending",
            "dependencies": [
              "12.8"
            ],
            "parentTaskId": 12
          },
          {
            "id": 10,
            "title": "Flutter: POS flow (cart → tender → receipt)",
            "description": "Point-of-Sale cart, tender, and receipt printing/share.",
            "details": "Acceptance:\n- Screen: POS with scan/add, quantities/discounts\n- Tender: cash/mobile money; validation\n- On submit: CreateSale; show receipt with share/print\n- Offline queue when network down",
            "status": "pending",
            "dependencies": [
              "12.3"
            ],
            "parentTaskId": 12
          },
          {
            "id": 11,
            "title": "Flutter: Notifications (local + push)",
            "description": "In-app notifications and push integration for critical events.",
            "details": "Acceptance:\n- Local notification service abstraction\n- Push via FCM/APNS wired; token registered with backend\n- Handle foreground/background taps\n- E2E happy path with a mock push",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 12,
            "title": "Flutter: Real-time updates (SignalR)",
            "description": "Monitor server-sent events (SignalR) for stock updates and POS outcomes.",
            "details": "Acceptance:\n- SignalR client connected; auto-reconnect/backoff\n- Subscribe to stock update + sale completed channels\n- UI reacts in real-time; unit tests for stream handling",
            "status": "pending",
            "dependencies": [
              "12.2"
            ],
            "parentTaskId": 12
          },
          {
            "id": 13,
            "title": "Flutter: i18n + locale formats",
            "description": "Language packs and runtime language switcher.",
            "details": "Acceptance:\n- intl/arb scaffolding; en + one additional locale\n- Date/number/currency formatting per locale\n- In-app language switch persists\n- i18n tests for key screens",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 14,
            "title": "Flutter: Accessibility (a11y) pass",
            "description": "Accessibility basics for mobile flows.",
            "details": "Acceptance:\n- Semantic labels, focus order, larger fonts support\n- Color contrast validated\n- Screen reader friendly on auth, stock, POS\n- Accessibility checklist completed",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 15,
            "title": "Flutter: Testing harness + coverage",
            "description": "Unit, widget, and integration tests with coverage gates.",
            "details": "Acceptance:\n- Test harness for API client, repos, sync, POS\n- Golden tests for key screens\n- Coverage threshold >= 60%\n- Test docs in README",
            "status": "pending",
            "dependencies": [
              "12.5"
            ],
            "parentTaskId": 12
          },
          {
            "id": 16,
            "title": "Flutter: Analytics + crash reporting",
            "description": "Telemetry and crash reporting for mobile app.",
            "details": "Acceptance:\n- Analytics events for key flows (login, POS submit, sync)\n- Crash reporting hooked (e.g., Sentry/Firebase Crashlytics)\n- Privacy toggle and PII scrubber\n- Dashboard shows events within test project",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 17,
            "title": "Flutter: Settings + profile screens",
            "description": "Basic settings and profile pages.",
            "details": "Acceptance:\n- Settings: env switch (dev/staging), theme, language\n- Profile: view claims/roles; logout\n- Unit tests for settings persistence",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 18,
            "title": "Flutter: Docker image (web) + nginx config",
            "description": "Dockerfile for Flutter web build and nginx runtime.",
            "details": "Acceptance:\n- Multi-stage Dockerfile: flutter build web → nginx\n- nginx.conf sets security headers; gzip/brotli\n- Image built locally; serves PWA with correct base href",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 19,
            "title": "Flutter: Release packaging (Android/iOS)",
            "description": "Play Store/TestFlight packaging setup.",
            "details": "Acceptance:\n- App icons/splash; package IDs and signing configs\n- Dev and prod distribution tracks\n- Store metadata placeholders\n- Checklist for release steps",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 20,
            "title": "Flutter: Docs + CI wiring",
            "description": "Docs and CI steps to build/test/lint the mobile app.",
            "details": "Acceptance:\n- README: run, test, build, env setup\n- CI: flutter analyze + test + build web\n- Badges and coverage upload\n- Troubleshooting tips",
            "status": "pending",
            "dependencies": [
              "12.15"
            ],
            "parentTaskId": 12
          }
        ],
        "estimatedHours": 36
      },
      {
        "id": 13,
        "title": "Nuxt 3 Web App (MVP)",
        "description": "Admin dashboards, advanced stock, sales back-office, customers",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          4,
          5,
          7,
          8,
          11
        ],
        "complexity": 4,
        "details": "Back-office web for management and reporting",
        "subtasks": [
          {
            "id": 1,
            "title": "Nuxt: Env & runtime config (dev/staging/prod)",
            "description": "Runtime config per environment with safe public/private vars.",
            "details": "Acceptance:\n- .env files for dev/staging/prod; .env.example added\n- nuxt.config.ts uses runtimeConfig/public for API base, tenant, log level\n- NUXT_PUBLIC_* only for safe values; secrets not committed\n- Docs: how to run with each env",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 2,
            "title": "Nuxt: API client (ofetch/axios) + interceptors",
            "description": "HTTP client with interceptors and typed errors.",
            "details": "Acceptance:\n- ofetch/axios wrapper with interceptors: Authorization, Idempotency-Key (POST/PUT), X-Correlation-ID\n- Retry/backoff on 5xx/network\n- RFC9457 ProblemDetails mapped to typed error (+toasts)\n- Unit tests for interceptor logic",
            "status": "pending",
            "dependencies": [
              "13.1"
            ],
            "parentTaskId": 13
          },
          {
            "id": 3,
            "title": "Nuxt: Auth/session + refresh",
            "description": "Login, session persistence, refresh, and logout.",
            "details": "Acceptance:\n- Login page → stores JWT + refresh securely (httpOnly cookie if feasible)\n- Auto-refresh; 401 leads to logout and redirect\n- Me endpoint on boot; skeleton while loading\n- Tests for happy/edge paths",
            "status": "pending",
            "dependencies": [
              "13.2"
            ],
            "parentTaskId": 13
          },
          {
            "id": 4,
            "title": "Nuxt: RBAC route middleware + v-can directive",
            "description": "Protect routes and conditionally render actions based on permissions.",
            "details": "Acceptance:\n- Route middleware checks roles/scopes; denies with friendly page\n- v-can directive/composable hides disabled actions\n- Tests for middleware and directive",
            "status": "pending",
            "dependencies": [
              "13.3"
            ],
            "parentTaskId": 13
          },
          {
            "id": 5,
            "title": "Nuxt: App shell/layout + navigation + error boundary",
            "description": "Global layout, navigation, and error boundary.",
            "details": "Acceptance:\n- Default layout with nav/sidebar, breadcrumbs, user menu\n- Global error boundary surfaces ProblemDetails nicely\n- Toast/notification plugin and loading bar\n- Snapshot tests for layout",
            "status": "pending",
            "dependencies": [
              "13.4"
            ],
            "parentTaskId": 13
          },
          {
            "id": 6,
            "title": "Nuxt: Stock management data table (server-side)",
            "description": "Server-side data table with filters, sorts, and bulk actions.",
            "details": "Acceptance:\n- Stock list page with server pagination, filter chips, sort\n- Bulk select + export CSV\n- Column show/hide + saved views\n- Component tests and API mocks",
            "status": "pending",
            "dependencies": [
              "13.2"
            ],
            "parentTaskId": 13
          },
          {
            "id": 7,
            "title": "Nuxt: Bulk import/export via Jobs API",
            "description": "Import/export flows for stock and customers using Jobs API.",
            "details": "Acceptance:\n- Import wizard (CSV/XLSX) starts async job; poll status; show errors\n- Export current view to CSV via Jobs API\n- File validation + sample templates\n- E2E tests with Cypress",
            "status": "pending",
            "dependencies": [
              "13.6"
            ],
            "parentTaskId": 13
          },
          {
            "id": 8,
            "title": "Nuxt: Stock ledger + movements views",
            "description": "Stock ledger and movement views with filtering and drill-down.",
            "details": "Acceptance:\n- Ledger view: date range, warehouse, item filters\n- Movement view: recent movements; link to item/sale/PO\n- Pagination + export\n- Tests for filters and navigation",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 9,
            "title": "Nuxt: Refunds flow (back office)",
            "description": "Refunds flow for sales back office.",
            "details": "Acceptance:\n- Refund initiation from sale detail; validations\n- CreateRefund API call with idempotency; shows updated receipt\n- Audit trail shown; ProblemDetails when forbidden\n- Component + e2e tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 10,
            "title": "Nuxt: Day-end reports dashboard",
            "description": "Day-end reports with export and schedule.",
            "details": "Acceptance:\n- Dashboard: sales summary, cash position, top items\n- Export CSV/PDF via Jobs API\n- Schedule daily email via Notifications\n- Cypress tests for widgets and exports",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 11,
            "title": "Nuxt: Customer management + segments",
            "description": "Customer CRUD and segments with saved filters.",
            "details": "Acceptance:\n- Customers list/detail/edit\n- Segments: create/edit, saved filters applied to list\n- Bulk actions: export, notify segment via Notifications\n- Component + e2e tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 12,
            "title": "Nuxt: AI insights panel wiring",
            "description": "AI panel that surfaces insights and suggested actions.",
            "details": "Acceptance:\n- Right-side AI insights drawer on stock/sales pages\n- Calls AI service; shows insight cards + quick actions\n- Track outcomes with /outcomes API\n- Tests with mocked AI responses",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 13,
            "title": "Nuxt: Real-time updates (SignalR)",
            "description": "Real-time updates using SignalR for web.",
            "details": "Acceptance:\n- SignalR client plugin; auto-reconnect\n- Subscriptions to stock changes and sale completed\n- UI updates via Pinia stores\n- Tests for stream handling",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 14,
            "title": "Nuxt: Design system + shared components",
            "description": "Shared design system with Tailwind and component library.",
            "details": "Acceptance:\n- Tailwind config + base styles\n- Shared UI components: DataTable, Modal, FormField, Badge\n- Storybook or Histoire docs\n- Visual regression on core components",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 15,
            "title": "Nuxt: Accessibility + keyboard nav",
            "description": "Keyboard navigation and accessibility.",
            "details": "Acceptance:\n- Focus traps, skip links, ARIA roles\n- Keyboard shortcuts for table nav and actions\n- Axe checks in CI; color contrast validated\n- E2E tests for keyboard flows",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 16,
            "title": "Nuxt: Testing (Vitest + Cypress) + coverage",
            "description": "Unit, component, and e2e testing setup and coverage gate.",
            "details": "Acceptance:\n- Vitest + Vue Test Utils configured\n- Cypress e2e with login helper and API mocks\n- Coverage >= 60%; reports uploaded in CI\n- Test docs in README",
            "status": "pending",
            "dependencies": [
              "13.5"
            ],
            "parentTaskId": 13
          },
          {
            "id": 17,
            "title": "Nuxt: CI + Docker image + nginx",
            "description": "CI pipeline and Docker image for web client.",
            "details": "Acceptance:\n- CI: install, typecheck, lint, unit, e2e (smoke), build\n- Dockerfile for Nuxt server/static as appropriate\n- Nginx config for static/cdn; headers and gzip/brotli\n- Deploy artifact ready",
            "status": "pending",
            "dependencies": [
              "13.16"
            ],
            "parentTaskId": 13
          },
          {
            "id": 18,
            "title": "Nuxt: Performance analytics + error tracking",
            "description": "Performance, analytics, and Sentry.",
            "details": "Acceptance:\n- Web vitals reporting; route timings\n- Sentry or alternative for error tracking\n- Consent toggle and PII scrubber\n- Dashboard shows captured events",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 19,
            "title": "Nuxt: Docs + deployment guide",
            "description": "Docs and deployment steps.",
            "details": "Acceptance:\n- README: env vars, scripts, dev workflow\n- Deploy guide: docker, k8s ingress hints\n- Troubleshooting and FAQ\n- Badges on README",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 20,
            "title": "Nuxt: Feature flags + settings page",
            "description": "Feature toggles and settings page.",
            "details": "Acceptance:\n- Feature flags plumbed via runtimeConfig/public or backend\n- Settings page for user-level prefs (theme, table density)\n- Persist to localStorage/cookies\n- Unit tests for feature flag logic",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          }
        ],
        "estimatedHours": 32
      },
      {
        "id": 14,
        "title": "Offline Sync Platform (Cross-Module)",
        "description": "Generic sync protocol and services extended beyond Stock",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          8,
          12,
          13
        ],
        "complexity": 4,
        "details": "Sync engine, conflict resolution, batching and retries for Sales/CRM/Buying",
        "subtasks": [
          {
            "id": 1,
            "title": "Sync protocol v1 + payload versioning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Module adapters (Sales, CRM, Buying) for local ops",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 3,
            "title": "Conflict resolution strategies per module",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "Batching, backoff & retry with jitter",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 5,
            "title": "Telemetry (success, failure, duration, last sync)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 6,
            "title": "Admin UI: sync status, retry, conflict review (web)",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 26
      },
      {
        "id": 15,
        "title": "Security & Compliance (POPIA)",
        "description": "RBAC, tenant isolation, encryption, consent & audit",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1,
          2,
          5,
          8,
          9
        ],
        "complexity": 3,
        "details": "Harden services and ensure compliance",
        "subtasks": [
          {
            "id": 1,
            "title": "RBAC policies + enforcement in APIs",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Row-level security by TenantId",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Encryption at rest + TLS everywhere",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Consent + unsubscribe + audit trail",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 16,
        "title": "Performance & Scalability",
        "description": "Indexes, pagination, caching, stress tests",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          11
        ],
        "complexity": 3,
        "details": "Meet PRD performance targets under load",
        "subtasks": [
          {
            "id": 1,
            "title": "DB indexes + query tuning",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Pagination everywhere + projections",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Cache hotspots with Redis (where safe)",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Load/stress tests + fixes",
            "status": "pending",
            "complexity": 2
          }
        ],
        "estimatedHours": 12
      },
      {
        "id": 17,
        "title": "Testing Strategy Execution",
        "description": "Unit, integration, E2E across modules with coverage targets",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "complexity": 3,
        "details": "Automated tests integrated into CI with coverage reports",
        "subtasks": [
          {
            "id": 1,
            "title": "Unit tests domain/app for each service",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "Integration tests API/repo/events",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "E2E (mobile/web) critical flows",
            "status": "pending",
            "complexity": 3
          },
          {
            "id": 4,
            "title": "Contract tests across services",
            "description": "Cross-service contract tests covering Accounting, Sales, Stock, Notifications, Webhooks. Spin up minimal env and verify API and event schemas.",
            "details": "- Spin up Accounting, Sales, Stock, Notifications, Webhooks against ephemeral Postgres and RabbitMQ.\n- Validate OpenAPI schemas via contract tests; fail build on breaking changes.\n- Verify event contracts with consumer-driven tests (Pact or equivalent) for SaleCompleted, PurchaseOrderReceived, WebhookDelivered.\n- Add CI job to run contract tests on PR.\n- Gate merges when contract tests fail.",
            "status": "pending",
            "dependencies": [
              27,
              28
            ],
            "parentTaskId": 17
          }
        ],
        "estimatedHours": 20
      },
      {
        "id": 18,
        "title": "Deployment to Production",
        "description": "Infra provisioning, DNS/TLS, backups, runbooks",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2,
          3,
          16
        ],
        "complexity": 3,
        "details": "Reliable prod rollout with monitoring and rollback",
        "subtasks": [
          {
            "id": 1,
            "title": "Provision K8s cluster + managed DB/Redis",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 2,
            "title": "DNS, TLS, WAF/rate limits",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 3,
            "title": "Backups + restore procedures",
            "status": "pending",
            "complexity": 2
          },
          {
            "id": 4,
            "title": "Runbooks + on-call rotation",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 14
      },
      {
        "id": 19,
        "title": "Documentation & Training",
        "description": "Finalize docs (API, user, dev, ops) and training materials",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          11,
          12,
          13,
          18
        ],
        "complexity": 2,
        "details": "Ensure stakeholders can adopt and operate the platform",
        "subtasks": [
          {
            "id": 1,
            "title": "API refs + SDK snippets",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "User guides + videos (mobile/web)",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Dev/ops guides + troubleshooting",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 10
      },
      {
        "id": 20,
        "title": "Go-Live Readiness & UAT",
        "description": "UAT cycles, smoke tests, cutover checklist, launch",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          17,
          18,
          19
        ],
        "complexity": 2,
        "details": "Final checks and stakeholder sign-off for MVP",
        "subtasks": [
          {
            "id": 1,
            "title": "UAT planning + execution + fixes",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 2,
            "title": "Cutover plan + rollback",
            "status": "pending",
            "complexity": 1
          },
          {
            "id": 3,
            "title": "Launch communications",
            "status": "pending",
            "complexity": 1
          }
        ],
        "estimatedHours": 8
      },
      {
        "id": 21,
        "title": "HR/Payroll Service (MVP)",
        "description": "Employees, payroll runs, leave/attendance, statutory deductions; integrates with Accounting.",
        "details": "Scope: Employee, Department, Role, Leave, Attendance, PayrollRun, Payslip, Deduction, Benefit. APIs for CRUD and processes; events to Accounting (payroll expense, cash out).",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          7,
          "27",
          "28",
          "31"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "HR: Database schema + migrations",
            "description": "Schema design (Employee, Department, Leave, Attendance, PayrollRun, Payslip, Deduction, Benefit) with constraints.",
            "details": "Acceptance:\n- Postgres DDL with RLS by TenantId\n- Foreign keys, unique constraints, indexes on lookups and dates\n- Liquibase/EF migrations ready\n- ER diagram updated in docs",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 2,
            "title": "HR: Domain + API endpoints",
            "description": "CRUD and processes for Employee, Leave, Attendance, PayrollRun, Payslip with validations",
            "details": "Acceptance:\n- CQRS handlers + validators\n- REST endpoints with scopes, idempotency, RFC9457\n- Payroll run creates payslips; locking rules\n- Swagger examples + tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 3,
            "title": "HR: Payroll calculations engine",
            "description": "Rules for earnings, deductions, taxes, benefits; country overrides",
            "details": "Acceptance:\n- Pluggable rules; unit tests for scenarios\n- Rounding and retro adjustments\n- Audit trail for calculations\n- Performance baseline for 1k payslips",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 4,
            "title": "HR: Integrations (Accounting, Notifications)",
            "description": "Post payroll journal entries; notify employees; download payslips",
            "details": "Acceptance:\n- Events to Accounting (expense, payable)\n- Notification templates for payslips\n- PDF payslip generation + secure download\n- E2E tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 5,
            "title": "HR: Admin UI (web)",
            "description": "Admin screens for employees, leave/attendance, payroll setup",
            "details": "Acceptance:\n- CRUD pages; filters; bulk import/export via Jobs API\n- Access control per role\n- Cypress tests for critical flows",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 6,
            "title": "HR: Tests + docs",
            "description": "Unit/integration/API tests and documentation",
            "details": "Acceptance:\n- Unit tests coverage ≥ 70%\n- Integration tests for payroll run\n- API docs with examples; runbook for payroll month-end",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          }
        ]
      },
      {
        "id": 22,
        "title": "Project Management Service (MVP)",
        "description": "Projects, tasks, timesheets, budgets; integrates with Sales/Accounting.",
        "details": "Scope: Project, Task, Milestone, Timesheet, Assignment, Budget. APIs for CRUD; time capture; cost rollups to Accounting; basic Gantt data endpoints.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          7,
          "27",
          "28",
          "31"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Projects: Database schema + migrations",
            "description": "Schema for Project, Task, Milestone, Timesheet, Assignment, Budget",
            "details": "Acceptance:\n- DDL with RLS; FK and indexes\n- Migrations scripted\n- ER diagram",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 2,
            "title": "Projects: Domain + API endpoints",
            "description": "CRUD and flows for projects, tasks, timesheets, budgets",
            "details": "Acceptance:\n- CQRS; validations; ProblemDetails\n- Timesheet approvals; budget checks\n- Swagger examples + tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 3,
            "title": "Projects: Integrations (Accounting, Sales)",
            "description": "Billable time to invoices; cost rollups",
            "details": "Acceptance:\n- Sales invoice creation from approved timesheets\n- Cost rollups to Accounting\n- E2E tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 4,
            "title": "Projects: Web UI",
            "description": "Project board, task list, timesheet entry",
            "details": "Acceptance:\n- Kanban/sprints basics\n- Timesheet capture UI\n- Cypress tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 5,
            "title": "Projects: Tests + docs",
            "description": "Coverage and docs",
            "details": "Acceptance:\n- Unit/integration tests; >=70%\n- API docs; user guide for time tracking",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 22
          }
        ]
      },
      {
        "id": 23,
        "title": "Logistics/Delivery Service (MVP)",
        "description": "Shipments, carriers, tracking, delivery confirmations; integrates with Sales and Stock.",
        "details": "Scope: Shipment, Package, Carrier, TrackingEvent, DeliveryProof. APIs to create/label/track; events to Stock for dispatch/receipt; webhook intake from carriers.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          4,
          5,
          "27",
          "28",
          "31"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Logistics: Database schema + migrations",
            "description": "Shipment, Package, Carrier, TrackingEvent, DeliveryProof",
            "details": "Acceptance:\n- DDL with RLS; constraints; indexes\n- Migrations scripted; ER diagram",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 2,
            "title": "Logistics: Carrier webhooks intake",
            "description": "Webhook endpoints for carrier status updates with HMAC verification",
            "details": "Acceptance:\n- Endpoints for status updates; signature verification\n- Retry, DLQ; idempotent processing\n- Audit log entries; tests with sample payloads",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 3,
            "title": "Logistics: Domain + API endpoints",
            "description": "Create shipment/labels, track, confirm delivery",
            "details": "Acceptance:\n- Endpoints CRUD + actions; ProblemDetails\n- Integration with Sales dispatch + Stock\n- Swagger examples + tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 4,
            "title": "Logistics: Web UI + tracking page",
            "description": "Internal admin UI and public tracking page",
            "details": "Acceptance:\n- Admin: shipments list/detail; filters; export\n- Public: tracking by code; events timeline\n- Cypress tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 5,
            "title": "Logistics: Tests + docs",
            "description": "Coverage and documentation",
            "details": "Acceptance:\n- Unit/integration tests ≥70%\n- Webhook payload docs; troubleshooting\n- Runbook for carrier outages",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 23
          }
        ]
      },
      {
        "id": 24,
        "title": "Pooled Credit Service (MVP)",
        "description": "Pools, contributions, loans, repayments, approvals; cooperative finance flows.",
        "details": "Scope: CreditPool, Contribution, Loan, Repayment, Approval. Align to pooledcredit.openapi; webhooks; ETag/If-Match on updates; async approvals via Jobs API.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          7,
          "27",
          "28",
          "31"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Pooled Credit: Database schema + migrations",
            "description": "Pools, Contributions, Drawdowns, Repayments, Member, Ledger",
            "details": "Acceptance:\n- DDL with RLS & tenant keys; constraints; indexes\n- Migrations scripted; ER diagram",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 2,
            "title": "Pooled Credit: Domain + API endpoints",
            "description": "Create/Manage pools, contribute, request drawdown, approve, repay",
            "details": "Acceptance:\n- Endpoints with scopes, idempotency, ETag/If-Match\n- Webhook events (contribution.created, drawdown.approved)\n- Tests + examples",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 3,
            "title": "Pooled Credit: Accounting integration",
            "description": "Post journal entries to Finance on contribution/drawdown/repayment",
            "details": "Acceptance:\n- Events to Accounting; reconciliation report\n- Failure handling + retries; idempotent consumers\n- Test harness with fake finance",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 4,
            "title": "Pooled Credit: Web UI",
            "description": "Pool admin, member portal (balance, contribute, request)",
            "details": "Acceptance:\n- Admin: create/manage pools; approvals\n- Member: view balance, contribute, request drawdown\n- E2E tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 5,
            "title": "Pooled Credit: Tests + docs",
            "description": "Coverage and documentation",
            "details": "Acceptance:\n- Unit/integration tests ≥70%\n- API and webhook docs; runbook\n- Security review (abuse prevention)",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          }
        ]
      },
      {
        "id": 25,
        "title": "Credit Engine Service (MVP)",
        "description": "Credit profiles and decisions; integrates with Sales/CRM/Accounting.",
        "details": "Scope: CreditProfile, Evaluation, Decision, Limit. Align to creditengine.openapi; idempotent decisioning; webhook notifications; audit & explainability.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          7,
          8,
          "27",
          "28",
          "31"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Credit Engine: Database schema + migrations",
            "description": "CreditPolicy, Rule, Scorecard, Decision, Application, BureauReport",
            "details": "Acceptance:\n- DDL with RLS; constraints; indexes\n- Migrations scripted; seed reference policies",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 2,
            "title": "Credit Engine: Decisioning API",
            "description": "Score and decision endpoints; async if long-running",
            "details": "Acceptance:\n- /applications, /score, /decisions with scopes\n- Async job for long-running bureau calls\n- RFC9457 errors; examples; tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 3,
            "title": "Credit Engine: Bureau and data integrations",
            "description": "Pluggable providers; sandbox fakes; retries and backoff",
            "details": "Acceptance:\n- Provider interface; mock and 1 real provider adapter stub\n- Circuit breaker; backoff; observability\n- Contract tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 4,
            "title": "Credit Engine: Web UI",
            "description": "Policy editor, rule testing, decision audit trails",
            "details": "Acceptance:\n- Edit policies/rules; simulate scores\n- Decision log with filters; export\n- E2E tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 5,
            "title": "Credit Engine: Tests + docs",
            "description": "Coverage and documentation",
            "details": "Acceptance:\n- Unit/integration tests ≥70%\n- Provider guide; policy authoring docs\n- Runbook for provider outages",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          }
        ]
      },
      {
        "id": 26,
        "title": "Asset Sharing Service (MVP)",
        "description": "Assets, bookings, usage, settlements among participants.",
        "details": "Scope: Asset, Booking, UsageRecord, Settlement. Align to assetshare.openapi; payments integration; calendar views; events to Accounting.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          6,
          7,
          "27",
          "28",
          "31"
        ],
        "priority": "low",
        "subtasks": [
          {
            "id": 1,
            "title": "Asset Sharing: Database schema + migrations",
            "description": "Assets, Listings, Reservations, Usage, Pricing, Disputes",
            "details": "Acceptance:\n- DDL with RLS; constraints; indexes\n- Migrations scripted; ER diagram",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          },
          {
            "id": 2,
            "title": "Asset Sharing: Domain + API endpoints",
            "description": "List asset, request/approve reservation, usage log, settle",
            "details": "Acceptance:\n- Endpoints with scopes, idempotency, ETag/If-Match\n- Webhooks (reservation.approved, usage.closed)\n- Tests + examples",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          },
          {
            "id": 3,
            "title": "Asset Sharing: Payments & Accounting integration",
            "description": "Calculate fees, payouts; post journals to Finance",
            "details": "Acceptance:\n- Fee engine; payout schedule\n- Events to Finance; reconciliation report\n- Idempotent consumers; retry logic",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          },
          {
            "id": 4,
            "title": "Asset Sharing: Web UI",
            "description": "Owner dashboard, renter portal",
            "details": "Acceptance:\n- Owner: list/manage assets; calendar view\n- Renter: search, reserve, pay\n- E2E tests",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          },
          {
            "id": 5,
            "title": "Asset Sharing: Tests + docs",
            "description": "Coverage and documentation",
            "details": "Acceptance:\n- Unit/integration tests ≥70%\n- API/webhook docs; runbook; fraud/abuse guidelines",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          }
        ]
      },
      {
        "id": 27,
        "title": "Database Platform & Operations",
        "description": "Postgres schema standards, migrations, HA/backup, performance, multi-tenant controls",
        "details": "Owns DB conventions: naming, schemas, RLS; migration process; backups; HA; perf; data retention and privacy.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          2,
          3
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Database Platform: Standards & migrations",
            "description": "Migration conventions, naming, RLS templates, seed flows",
            "details": "Acceptance:\n- Conventions doc; migration templates\n- RLS policy templates for multi-tenant\n- Seed data flow per environment",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 2,
            "title": "Database Platform: HA, backups, retention",
            "description": "Backups (full+incremental), PITR, restore runbooks",
            "details": "Acceptance:\n- Scheduled backups with verification\n- PITR tested; RPO/RTO documented\n- Restore drills documented",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 3,
            "title": "Database Platform: Performance & indexing",
            "description": "Index strategy, query review, partitioning where needed",
            "details": "Acceptance:\n- Index playbook; slow query review\n- Partitioning policy for large tables\n- Monitoring dashboards & alerts",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          }
        ]
      },
      {
        "id": 28,
        "title": "API Contracts & SDKs",
        "description": "OpenAPI specs, NSwag generation, versioning, deprecation, samples",
        "details": "Centralize OpenAPI; enforce standards; SDK generation for web/mobile; samples; versioning strategy.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          "27"
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "API Contracts: Linting & CI validation",
            "description": "OpenAPI lint rules, CI gating, examples coverage",
            "details": "Acceptance:\n- Spectral ruleset; CI fails on violations\n- Examples for all endpoints; schemas validated\n- Versioning policy doc",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 28
          },
          {
            "id": 2,
            "title": "SDKs: Generation & publishing",
            "description": "NSwag/Autorest pipeline; npm/nuget packages; samples",
            "details": "Acceptance:\n- Generate TS/.NET clients from specs\n- Publish prerelease packages; changelogs\n- Samples and quickstarts",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 28
          }
        ]
      },
      {
        "id": 29,
        "title": "Reporting & Exports Service (MVP)",
        "description": "Jobs API-based report generation, CSV/PDF exports, scheduling",
        "details": "Endpoints for standard reports; long-running jobs; async polling; export templates; schedules and delivery.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          7,
          "27",
          "28",
          "30"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Reporting: Jobs-based exports",
            "description": "Async export endpoints (CSV, XLSX, PDF) via Jobs API",
            "details": "Acceptance:\n- /exports create → 202 + Location\n- Progress polling; result download with ETag\n- Templates and sample reports",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 29
          },
          {
            "id": 2,
            "title": "Reporting: Schedules & delivery",
            "description": "Saved reports, schedules, email/webhook delivery",
            "details": "Acceptance:\n- CRON-like schedules with pause/resume\n- Email with attachments; webhook delivery\n- Audit logs; retry policy",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 29
          }
        ]
      },
      {
        "id": 30,
        "title": "Webhooks Platform & Subscription Management",
        "description": "Tenant-scoped webhook subscriptions, HMAC signing, retries, dead-letter",
        "details": "Manage webhooks: subscribe, deliver with signatures, retry & DLQ, replay; dashboards and audits.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          2,
          3,
          "27"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Webhooks Platform: Subscription CRUD + verification",
            "description": "Manage subscriptions, secret rotation, endpoint verification",
            "details": "Acceptance:\n- CRUD with scopes; secret rotation\n- Verify endpoint handshake\n- Docs and examples",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 30
          },
          {
            "id": 2,
            "title": "Webhooks Platform: Delivery, retries, replay, DLQ",
            "description": "Exponential backoff, DLQ, replay UI",
            "details": "Acceptance:\n- Delivery with signature; backoff & DLQ\n- Replay with reason; audit trails\n- Metrics/dashboards",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 30
          }
        ]
      },
      {
        "id": 31,
        "title": "Scaffold remaining domain services (HR, Projects, Logistics, PooledCredit, CreditEngine, AssetSharing)",
        "description": "Create .NET service skeletons following Stock/Sales layout (Domain, Application, Infrastructure, API). Add Program.cs with RFC9457 ProblemDetails, Serilog, OpenTelemetry, Health checks, Swagger; Dockerfile; appsettings; baseline csproj wiring to ServiceDefaults and Contracts. Prepare initial EF Core migrations and docker-compose entries.",
        "details": "Deliverables:\n- Folders: src/Services/{hr,projects,logistics,pooledcredit,creditengine,assetsharing}/ with Domain, Application, Infrastructure, API projects\n- API: Minimal endpoints (/health, /_status) and Swagger; ProblemDetails per RFC9457; Serilog request logging; OpenTelemetry tracing/metrics\n- Infrastructure: DbContext + initial migration stubs; connection string via env; RLS template hooks\n- Docker: Multistage build, non-root run, healthcheck\n- Compose: Add each service with ports and dependencies (postgres, rabbitmq)\n- Solution: Add projects to TossErp.sln under Services folder\nAcceptance:\n- dotnet build succeeds for all new projects\n- docker build works per service\n- GET /health returns 200\n- Basic OpenAPI served at /swagger",
        "testStrategy": "Build and smoke test each service: dotnet build; dotnet run; curl /health; verify Swagger UI loads.",
        "status": "pending",
        "dependencies": [
          27,
          28
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "HR service skeleton",
            "description": "Create src/Services/hr/{Domain,Application,Infrastructure,API} with baseline wiring and health endpoints.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 2,
            "title": "Projects service skeleton",
            "description": "Create src/Services/projects/{Domain,Application,Infrastructure,API} with baseline wiring and health endpoints.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 3,
            "title": "Logistics service skeleton",
            "description": "Create src/Services/logistics/{Domain,Application,Infrastructure,API} with baseline wiring and health endpoints.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 4,
            "title": "PooledCredit service skeleton",
            "description": "Create src/Services/pooledcredit/{Domain,Application,Infrastructure,API} with baseline wiring and health endpoints.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 5,
            "title": "CreditEngine service skeleton",
            "description": "Create src/Services/creditengine/{Domain,Application,Infrastructure,API} with baseline wiring and health endpoints.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 6,
            "title": "AssetSharing service skeleton",
            "description": "Create src/Services/assetsharing/{Domain,Application,Infrastructure,API} with baseline wiring and health endpoints.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 7,
            "title": "Solution & compose wiring",
            "description": "Add new projects to TossErp.sln and docker-compose.yml with healthchecks and dependencies.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          },
          {
            "id": 8,
            "title": "CI build matrix update",
            "description": "Extend GitHub Actions to build/test new services and push images.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 31
          }
        ]
      },
      {
        "id": 32,
        "title": "Monorepo cleanup: remove stale root Node artifacts; align to clients/web",
        "description": "Audit root and src-level Node artifacts (package.json, lockfiles) and remove or migrate to src/clients/web. Ensure web client is the only Node workspace unless additional clients exist.",
        "details": "- Identify stray package.json files at repo root or src/ that are not part of clients.\n- Remove or archive deprecated Node projects; update docs accordingly.\n- Ensure src/clients/web has complete setup (postcss, tailwind, eslint, tsconfig) and runs.\n- Add a root-level .nvmrc (Node 20) and optional Volta config for consistency.\nAcceptance: npm scripts run only under src/clients/web; docs updated; CI uses correct path.",
        "testStrategy": "Run npm ci && npm run dev from src/clients/web; verify no root-level npm scripts are required.",
        "status": "pending",
        "dependencies": [
          13
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-23T16:02:37.798Z",
      "updated": "2025-08-23T16:22:16.191Z",
      "description": "Tag created on 23/8/2025"
    }
  }
}