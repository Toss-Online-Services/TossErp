# Task ID: 2
# Title: Implement Stock Domain Model
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create domain entities, value objects, and aggregates for the Stock module
# Details:
Implement domain model:
- Item aggregate with ItemId, SKU, Name, etc.
- Warehouse entity
- StockLevel entity
- StockMovement entity
- Value objects: Quantity, Money, SKU, MovementType
- Domain events: ItemCreated, StockReceived, StockLevelLow, etc.
- Business rules and validations

# Test Strategy:


# Subtasks:
## 1. Create Base Domain Classes [done]
### Dependencies: None
### Description: Set up base classes for Entity, AggregateRoot, ValueObject, and DomainEvent
### Details:
Create foundational domain classes:\n- Entity<T> base class with Id property\n- AggregateRoot base class extending Entity\n- ValueObject base class with equality implementation\n- IDomainEvent interface\n- DomainEvent base class with timestamp

## 2. Implement Value Objects [done]
### Dependencies: None
### Description: Create value objects for Quantity, Money, SKU, and MovementType
### Details:
Implement value objects:\n- Quantity: Value, Unit, conversion logic\n- Money: Amount, Currency (ZAR default)\n- SKU: Value with validation (alphanumeric, max length)\n- MovementType: Enum (Receipt, Issue, Adjustment, Transfer)

## 3. Create Item Aggregate [done]
### Dependencies: None
### Description: Implement the Item aggregate root with properties and business logic
### Details:
Create Item aggregate:\n- Properties: ItemId, TenantId, SKU, Barcode, Name, Description, Category, Unit, SellingPrice, CostPrice, ReorderLevel, ReorderQty, IsActive\n- Methods: Create, Update, Deactivate, UpdatePricing, SetReorderLevels\n- Validations: Required fields, price ranges, reorder logic\n- Events: ItemCreated, ItemUpdated, ItemDeactivated

## 4. Implement Warehouse Entity [done]
### Dependencies: None
### Description: Create Warehouse entity with location and status management
### Details:
Implement Warehouse entity:\n- Properties: WarehouseId, TenantId, Code, Name, Address, IsDefault, IsActive\n- Methods: Create, Update, SetAsDefault, Deactivate\n- Business rules: Only one default warehouse per tenant\n- Validations: Unique code per tenant

## 5. Create Stock Movement Entities [done]
### Dependencies: None
### Description: Implement StockLevel and StockMovement entities for tracking inventory
### Details:
Create stock tracking entities:\n- StockLevel: ItemId, WarehouseId, OnHand, Available, OnOrder, Reserved\n- StockMovement: MovementId, TenantId, ItemId, WarehouseId, Type, Qty, RefType, RefId, Reason, CreatedBy, CreatedAt\n- Methods: RecordMovement, CalculateAvailable\n- Validations: Prevent negative stock (configurable)

## 6. Define Domain Events [done]
### Dependencies: None
### Description: Create all domain events for stock-related operations
### Details:
Implement domain events:\n- ItemCreated, ItemUpdated, ItemDeactivated\n- StockReceived, StockIssued, StockAdjusted, StockTransferred\n- StockLevelLow (when stock < reorder level)\n- WarehouseCreated, WarehouseUpdated\n- Include relevant data in each event for downstream consumers

