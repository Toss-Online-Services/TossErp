name: Security Scanning and SBOM Generation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly scan on Mondays at 2 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Dependency scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run .NET security audit
        run: dotnet list package --vulnerable --include-transitive

      - name: Setup Node.js for web client
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Audit npm dependencies
        working-directory: src/clients/web
        run: |
          npm ci
          npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Container image scanning
  image-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    strategy:
      matrix:
        service: [gateway, identity, ai, web, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: |
            ${{ matrix.service == 'gateway' && 'src/Gateway/Dockerfile' || 
                matrix.service == 'identity' && 'src/Services/identity/Dockerfile' ||
                matrix.service == 'ai' && 'src/Services/ai/Dockerfile' ||
                matrix.service == 'web' && 'src/clients/web/Dockerfile' ||
                matrix.service == 'mobile' && 'src/clients/mobile/Dockerfile' }}
          tags: toss-erp-${{ matrix.service }}:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: toss-erp-${{ matrix.service }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: toss-erp-${{ matrix.service }}:scan
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}
          category: 'grype-${{ matrix.service }}'

      - name: Run Syft SBOM generation
        uses: anchore/sbom-action@v0
        with:
          image: toss-erp-${{ matrix.service }}:scan
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json
          retention-days: 30

      - name: Sign SBOM with Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign SBOM
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign-blob --key cosign.key sbom-${{ matrix.service }}.spdx.json --output-signature sbom-${{ matrix.service }}.sig
          rm cosign.key

      - name: Upload signed SBOM
        uses: actions/upload-artifact@v4
        with:
          name: signed-sbom-${{ matrix.service }}
          path: |
            sbom-${{ matrix.service }}.spdx.json
            sbom-${{ matrix.service }}.sig
          retention-days: 90

  # License compliance check
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install license scanner
        run: dotnet tool install --global dotnet-project-licenses

      - name: Scan .NET licenses
        run: dotnet-project-licenses -i . -f json -o licenses-dotnet.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Scan npm licenses
        working-directory: src/clients/web
        run: |
          npm ci
          license-checker --json --out ../../licenses-npm.json

      - name: Check for prohibited licenses
        run: |
          # Define prohibited licenses
          prohibited_licenses=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "CPAL-1.0" "OSL-3.0")
          
          # Check .NET licenses
          if [ -f "licenses-dotnet.json" ]; then
            for license in "${prohibited_licenses[@]}"; do
              if grep -q "$license" licenses-dotnet.json; then
                echo "ERROR: Prohibited license found: $license"
                exit 1
              fi
            done
          fi
          
          # Check npm licenses
          if [ -f "licenses-npm.json" ]; then
            for license in "${prohibited_licenses[@]}"; do
              if grep -q "$license" licenses-npm.json; then
                echo "ERROR: Prohibited license found: $license"
                exit 1
              fi
            done
          fi
          
          echo "License compliance check passed"

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses-dotnet.json
            licenses-npm.json
          retention-days: 30

  # Supply chain security summary
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, image-scan, license-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check if any scans failed
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            echo "❌ Dependency scan failed" >> security-summary.md
          else
            echo "✅ Dependency scan passed" >> security-summary.md
          fi
          
          if [ "${{ needs.image-scan.result }}" != "success" ]; then
            echo "❌ Image scan failed" >> security-summary.md
          else
            echo "✅ Image scan passed" >> security-summary.md
          fi
          
          if [ "${{ needs.license-scan.result }}" != "success" ]; then
            echo "❌ License scan failed" >> security-summary.md
          else
            echo "✅ License scan passed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## SBOM Files Generated" >> security-summary.md
          echo "" >> security-summary.md
          
          # List SBOM files
          find . -name "sbom-*.spdx.json" -exec basename {} \; | while read file; do
            echo "- $file" >> security-summary.md
          done
          
          echo "" >> security-summary.md
          echo "Generated on: $(date -u)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Notify security team on critical vulnerabilities
  security-notification:
    name: Security Team Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, image-scan]
    if: failure()
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "🚨 Critical security vulnerabilities detected in TOSS ERP",
              attachments: [{
                color: 'danger',
                fields: [{
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }, {
                  title: 'Action',
                  value: 'Security scan failed - immediate attention required',
                  short: false
                }]
              }]
            }
