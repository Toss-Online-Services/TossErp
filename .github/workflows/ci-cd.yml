name: TOSS ERP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Code quality and security scanning
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=tests.trx"

      - name: Export OpenAPI Specs (AgentManager & Orchestrator)
        run: |
          pwsh -File scripts/export-openapi.ps1 -Verbose
        shell: pwsh

      - name: Upload OpenAPI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specs
          path: docs/openapi/*.json

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: '**/TestResults/*.trx'

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run security scan with CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          languages: 'csharp,javascript'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test .NET services
  build-dotnet:
    name: Build .NET Services
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [gateway, identity, ai, stock, sales, buying, accounts, crm, notifications, collaboration, hr, logistics, pooledcredit, creditengine, assetsharing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build service
        run: |
          if [ "${{ matrix.service }}" = "gateway" ]; then
            dotnet build src/Gateway/Gateway.csproj --no-restore --configuration Release
          elif [ "${{ matrix.service }}" = "stock" ]; then
            dotnet build src/Services/Stock/Stock.API/Stock.API.csproj --no-restore --configuration Release
          elif [ "${{ matrix.service }}" = "hr" ]; then
            dotnet build src/Services/hr/HR.API/HR.API.csproj --no-restore --configuration Release
          elif [ "${{ matrix.service }}" = "logistics" ]; then
            dotnet build src/Services/logistics/Logistics.API/Logistics.API.csproj --no-restore --configuration Release
          elif [ "${{ matrix.service }}" = "pooledcredit" ]; then
            dotnet build src/Services/pooledcredit/PooledCredit.API/PooledCredit.API.csproj --no-restore --configuration Release
          elif [ "${{ matrix.service }}" = "creditengine" ]; then
            dotnet build src/Services/creditengine/CreditEngine.API/CreditEngine.API.csproj --no-restore --configuration Release
          elif [ "${{ matrix.service }}" = "assetsharing" ]; then
            dotnet build src/Services/assetsharing/AssetSharing.API/AssetSharing.API.csproj --no-restore --configuration Release
          else
            dotnet build src/Services/${{ matrix.service }}/${{ matrix.service }}.API.csproj --no-restore --configuration Release
          fi

      - name: Run service tests
        run: |
          if [ "${{ matrix.service }}" = "gateway" ]; then
            echo "No tests for gateway yet"
          elif [ "${{ matrix.service }}" = "stock" ]; then
            find . -name "*Stock*Tests*.csproj" -exec dotnet test {} --no-build --configuration Release \;
          else
            find . -name "*${{ matrix.service }}*Tests*.csproj" -exec dotnet test {} --no-build --configuration Release \;
          fi

  # Build and test web client
  build-web:
    name: Build Web Client
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/clients/web/package-lock.json

      - name: Install dependencies
        working-directory: src/clients/web
        run: npm ci

      - name: Lint code
        working-directory: src/clients/web
        run: npm run lint

      - name: Type check
        working-directory: src/clients/web
        run: npm run typecheck

      - name: Run tests
        working-directory: src/clients/web
        run: npm run test

      - name: Build application
        working-directory: src/clients/web
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: src/clients/web/.output

  # Build and test mobile client
  build-mobile:
    name: Build Mobile Client
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get Flutter dependencies
        working-directory: src/clients/mobile
        run: flutter pub get

      - name: Analyze code
        working-directory: src/clients/mobile
        run: flutter analyze

      - name: Run tests
        working-directory: src/clients/mobile
        run: flutter test

      - name: Build web app
        working-directory: src/clients/mobile
        run: flutter build web --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-web-build
          path: src/clients/mobile/build/web

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-dotnet, build-web, build-mobile]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [gateway, identity, ai, web, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: |
            ${{ matrix.service == 'gateway' && 'src/Gateway/Dockerfile' || 
                matrix.service == 'identity' && 'src/Services/identity/Dockerfile' ||
                matrix.service == 'ai' && 'src/Services/ai/Dockerfile' ||
                matrix.service == 'web' && 'src/clients/web/Dockerfile' ||
                matrix.service == 'mobile' && 'src/clients/mobile/Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json

  # Security scanning of Docker images
  security-scan:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [gateway, identity, ai, web, mobile]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-${{ matrix.service }}.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: Deploy to staging
        run: |
          kubectl apply -k k8s/overlays/staging
          kubectl rollout status deployment/gateway -n toss-staging
          kubectl rollout status deployment/identity -n toss-staging
          kubectl rollout status deployment/ai -n toss-staging

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Deploy to production
        run: |
          kubectl apply -k k8s/overlays/production
          kubectl rollout status deployment/gateway -n toss-production
          kubectl rollout status deployment/identity -n toss-production
          kubectl rollout status deployment/ai -n toss-production

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          # Run basic smoke tests
          curl -f https://api.toss-erp.com/health || exit 1
          curl -f https://identity.toss-erp.com/health || exit 1

  # Notify on completion
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Microsoft Teams
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
