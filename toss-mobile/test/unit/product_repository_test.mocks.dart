// Mocks generated by Mockito 5.4.6 from annotations
// in toss_mobile/test/unit/product_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:toss_mobile/data/datasources/local/product_local_datasource_impl.dart'
    as _i2;
import 'package:toss_mobile/data/datasources/local/queued_action_local_datasource_impl.dart'
    as _i6;
import 'package:toss_mobile/data/datasources/remote/product_remote_datasource_impl.dart'
    as _i5;
import 'package:toss_mobile/data/models/product_model.dart' as _i4;
import 'package:toss_mobile/data/models/queued_action_model.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProductLocalDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDatasourceImpl extends _i1.Mock
    implements _i2.ProductLocalDatasourceImpl {
  MockProductLocalDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> createProduct(_i4.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> updateProduct(_i4.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.ProductModel?> getProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProduct, [id]),
            returnValue: _i3.Future<_i4.ProductModel?>.value(),
          )
          as _i3.Future<_i4.ProductModel?>);

  @override
  _i3.Future<List<_i4.ProductModel>> getAllUserProducts(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getAllUserProducts, [userId]),
            returnValue: _i3.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[],
            ),
          )
          as _i3.Future<List<_i4.ProductModel>>);

  @override
  _i3.Future<List<_i4.ProductModel>> getUserProducts(
    String? userId, {
    String? orderBy = 'createdAt',
    String? sortBy = 'DESC',
    int? limit = 10,
    int? offset,
    String? contains,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUserProducts,
              [userId],
              {
                #orderBy: orderBy,
                #sortBy: sortBy,
                #limit: limit,
                #offset: offset,
                #contains: contains,
              },
            ),
            returnValue: _i3.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[],
            ),
          )
          as _i3.Future<List<_i4.ProductModel>>);

  @override
  _i3.Future<void> seedSampleProducts() =>
      (super.noSuchMethod(
            Invocation.method(#seedSampleProducts, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [ProductRemoteDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDatasourceImpl extends _i1.Mock
    implements _i5.ProductRemoteDatasourceImpl {
  MockProductRemoteDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> createProduct(_i4.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> updateProduct(_i4.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.ProductModel?> getProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProduct, [id]),
            returnValue: _i3.Future<_i4.ProductModel?>.value(),
          )
          as _i3.Future<_i4.ProductModel?>);

  @override
  _i3.Future<List<_i4.ProductModel>> getAllUserProducts(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getAllUserProducts, [userId]),
            returnValue: _i3.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[],
            ),
          )
          as _i3.Future<List<_i4.ProductModel>>);

  @override
  _i3.Future<List<_i4.ProductModel>> getUserProducts(
    String? userId, {
    String? orderBy = 'createdAt',
    String? sortBy = 'DESC',
    int? limit = 10,
    int? offset,
    String? contains,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUserProducts,
              [userId],
              {
                #orderBy: orderBy,
                #sortBy: sortBy,
                #limit: limit,
                #offset: offset,
                #contains: contains,
              },
            ),
            returnValue: _i3.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[],
            ),
          )
          as _i3.Future<List<_i4.ProductModel>>);
}

/// A class which mocks [QueuedActionLocalDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueuedActionLocalDatasourceImpl extends _i1.Mock
    implements _i6.QueuedActionLocalDatasourceImpl {
  MockQueuedActionLocalDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> createQueuedAction(_i7.QueuedActionModel? queue) =>
      (super.noSuchMethod(
            Invocation.method(#createQueuedAction, [queue]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> deleteQueuedAction(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteQueuedAction, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i7.QueuedActionModel?> getQueuedAction(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getQueuedAction, [id]),
            returnValue: _i3.Future<_i7.QueuedActionModel?>.value(),
          )
          as _i3.Future<_i7.QueuedActionModel?>);

  @override
  _i3.Future<List<_i7.QueuedActionModel>> getAllUserQueuedAction() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUserQueuedAction, []),
            returnValue: _i3.Future<List<_i7.QueuedActionModel>>.value(
              <_i7.QueuedActionModel>[],
            ),
          )
          as _i3.Future<List<_i7.QueuedActionModel>>);

  @override
  _i3.Future<void> seedSampleQueuedActions() =>
      (super.noSuchMethod(
            Invocation.method(#seedSampleQueuedActions, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
