apiVersion: batch/v1
kind: Job
metadata:
  name: db-migration
  namespace: toss-erp
  labels:
    app.kubernetes.io/name: db-migration
    app.kubernetes.io/instance: toss-erp
    app.kubernetes.io/component: migration
    app.kubernetes.io/part-of: toss-erp
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: db-migration
        app.kubernetes.io/instance: toss-erp
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: migration
        image: mcr.microsoft.com/dotnet/sdk:9.0-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting database migration process..."
          
          # Install Entity Framework CLI tools
          dotnet tool install --global dotnet-ef --version 9.0.0
          export PATH="$PATH:/root/.dotnet/tools"
          
          # Clone the repository (in real scenario, this would be from a volume or init container)
          apk add --no-cache git
          git clone https://github.com/toss-online-services/toss-erp.git /app
          cd /app
          
          # Run migrations for each service
          services="identity stock sales accounting crm"
          
          for service in $services; do
            echo "Processing migrations for $service..."
            
            case $service in
              "identity")
                service_path="src/Services/identity"
                context="IdentityDbContext"
                ;;
              "stock")
                service_path="src/Services/Stock/Stock.API"
                context="StockDbContext"
                ;;
              "sales")
                service_path="src/Services/sales"
                context="SalesDbContext"
                ;;
              "accounting")
                service_path="src/Services/accounting"
                context="AccountingDbContext"
                ;;
              "crm")
                service_path="src/Services/crm"
                context="CRMDbContext"
                ;;
            esac
            
            if [ -d "$service_path" ]; then
              cd "$service_path"
              
              echo "Restoring packages for $service..."
              dotnet restore
              
              echo "Running migrations for $service..."
              dotnet ef database update --context "$context" --verbose || echo "Migration failed for $service"
              
              cd /app
            else
              echo "Service $service not found at $service_path, skipping..."
            fi
          done
          
          echo "Database migration process completed."
        env:
        - name: ConnectionStrings__DefaultConnection
          valueFrom:
            secretKeyRef:
              name: toss-secrets
              key: database-connection-string
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
  backoffLimit: 3
  activeDeadlineSeconds: 1800  # 30 minutes timeout
