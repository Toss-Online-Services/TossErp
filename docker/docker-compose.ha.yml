version: '3.8'

services:
  # PostgreSQL Primary (Master)
  postgres-primary:
    image: postgres:16-alpine
    container_name: toss-postgres-primary
    environment:
      POSTGRES_DB: toss_erp
      POSTGRES_USER: toss_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-development_password}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-replication_password}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/postgres/primary:/docker-entrypoint-initdb.d
      - ./configs/postgres/primary.conf:/etc/postgresql/postgresql.conf
      - ./configs/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U toss_user -d toss_erp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=database"
      - "toss.component=primary"

  # PostgreSQL Replica (Read-only)
  postgres-replica:
    image: postgres:16-alpine
    container_name: toss-postgres-replica
    environment:
      POSTGRES_USER: toss_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-development_password}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-replication_password}
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./scripts/postgres/replica:/docker-entrypoint-initdb.d
      - ./configs/postgres/replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5433:5432"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U toss_user"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=database"
      - "toss.component=replica"

  # Redis Primary
  redis-primary:
    image: redis:7-alpine
    container_name: toss-redis-primary
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_primary_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=cache"
      - "toss.component=primary"

  # Redis Replica
  redis-replica:
    image: redis:7-alpine
    container_name: toss-redis-replica
    command: redis-server --replicaof redis-primary 6379 --replica-read-only yes
    volumes:
      - redis_replica_data:/data
    ports:
      - "6380:6379"
    depends_on:
      - redis-primary
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 3s
      retries: 3
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=cache"
      - "toss.component=replica"

  # Backup Service
  backup-service:
    image: postgres:16-alpine
    container_name: toss-backup-service
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_DB: toss_erp
      POSTGRES_USER: toss_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-development_password}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      S3_BUCKET: ${S3_BACKUP_BUCKET:-}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-}
    volumes:
      - backup_data:/backups
      - ./scripts/backup:/scripts
    command: ["/scripts/backup-scheduler.sh"]
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=backup"
      - "toss.component=scheduler"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: toss-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=monitoring"
      - "toss.component=metrics"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: toss-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=monitoring"
      - "toss.component=visualization"

  # Database Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: toss-pgbouncer
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: toss_user
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-development_password}
      DATABASES_DBNAME: toss_erp
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 25
    volumes:
      - ./configs/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
    ports:
      - "6432:5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - toss-network
    restart: unless-stopped
    labels:
      - "toss.role=database"
      - "toss.component=pooler"

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_primary_data:
    driver: local
  redis_replica_data:
    driver: local
  backup_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  toss-network:
    driver: bridge
    labels:
      - "toss.network=main"
