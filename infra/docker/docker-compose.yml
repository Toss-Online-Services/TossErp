version: "3.9"

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-toss}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-toss}
      POSTGRES_DB: ${POSTGRES_DB:-toss}
    ports:
      - "5432:5432"
    volumes:
      - toss_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build:
      context: ../../
      dockerfile: gateway/Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8080
      Services__Inventory__BaseUrl: http://inventory:8080
      Services__Sales__BaseUrl: http://sales:8080
      Services__Collaboration__BaseUrl: http://collaboration:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    ports:
      - "8080:8080"

  # Inventory service (reusing existing Stock.API)
  inventory:
    build:
      context: ../../
      dockerfile: src/Services/Stock/Stock.API/Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__Default: Host=postgres;Database=toss_inventory;Username=${POSTGRES_USER:-toss};Password=${POSTGRES_PASSWORD:-toss}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5001:8080"

  sales:
    build:
      context: ../../
      dockerfile: services/sales/Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8080
    depends_on:
      - postgres
    ports:
      - "5002:8080"

  collaboration:
    build:
      context: ../../
      dockerfile: services/collaboration/Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8080
    depends_on:
      - postgres
    ports:
      - "5003:8080"

  # Web (Nuxt) â€” dev serve mapped from host node if desired
  toss_web:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ../../TossErp.Web:/app
    command: sh -c "npm ci && npm run dev -- --port 3000 --host"
    environment:
      NUXT_PORT: 3000
      NUXT_HOST: 0.0.0.0
      API_BASE_URL: http://gateway:8080
    depends_on:
      - gateway
    ports:
      - "3000:3000"

volumes:
  toss_pg_data: {}


