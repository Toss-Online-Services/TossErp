apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: toss-platform
  namespace: argocd
  labels:
    app: toss-platform
    environment: production
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: toss-enterprise
  
  # Source configuration
  source:
    repoURL: https://github.com/toss-organization/toss-platform
    targetRevision: main
    path: infra/helm/toss-platform
    helm:
      valueFiles:
        - values.yaml
        - values-production.yaml
      parameters:
        - name: global.environment
          value: production
        - name: global.azure.tenantId
          value: $AZURE_TENANT_ID
        - name: global.azure.subscriptionId
          value: $AZURE_SUBSCRIPTION_ID
        - name: global.azure.resourceGroup
          value: toss-production-rg
  
  # Destination configuration
  destination:
    server: https://kubernetes.default.svc
    namespace: toss-platform
  
  # Sync policy
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  # Health checks
  revisionHistoryLimit: 10
  
  # Ignore differences
  ignoreDifferences:
    - group: apps
      kind: Deployment
      jsonPointers:
        - /spec/replicas
    - group: ""
      kind: Secret
      jsonPointers:
        - /data

---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: toss-enterprise
  namespace: argocd
  labels:
    project: toss-enterprise
spec:
  description: TOSS Enterprise Service-as-Software Platform
  
  # Source repositories
  sourceRepos:
    - 'https://github.com/toss-organization/toss-platform'
    - 'https://charts.bitnami.com/bitnami'
    - 'https://prometheus-community.github.io/helm-charts'
    - 'https://grafana.github.io/helm-charts'
    - 'https://jaegertracing.github.io/helm-charts'
    - 'https://istio-release.storage.googleapis.com/charts'
  
  # Destination clusters and namespaces
  destinations:
    - namespace: 'toss-*'
      server: https://kubernetes.default.svc
    - namespace: argocd
      server: https://kubernetes.default.svc
    - namespace: istio-system
      server: https://kubernetes.default.svc
    - namespace: monitoring
      server: https://kubernetes.default.svc
  
  # Cluster resource whitelist
  clusterResourceWhitelist:
    - group: ''
      kind: Namespace
    - group: rbac.authorization.k8s.io
      kind: ClusterRole
    - group: rbac.authorization.k8s.io
      kind: ClusterRoleBinding
    - group: apiextensions.k8s.io
      kind: CustomResourceDefinition
    - group: networking.k8s.io
      kind: NetworkPolicy
    - group: security.istio.io
      kind: '*'
    - group: networking.istio.io
      kind: '*'
  
  # Namespace resource whitelist
  namespaceResourceWhitelist:
    - group: ''
      kind: '*'
    - group: apps
      kind: '*'
    - group: extensions
      kind: '*'
    - group: networking.k8s.io
      kind: '*'
    - group: autoscaling
      kind: '*'
    - group: policy
      kind: '*'
    - group: batch
      kind: '*'
    - group: metrics.k8s.io
      kind: '*'
    - group: secrets-store.csi.x-k8s.io
      kind: '*'
  
  # Role bindings
  roles:
    - name: platform-admin
      description: Full access to TOSS platform
      policies:
        - p, proj:toss-enterprise:platform-admin, applications, *, toss-enterprise/*, allow
        - p, proj:toss-enterprise:platform-admin, repositories, *, *, allow
        - p, proj:toss-enterprise:platform-admin, certificates, *, *, allow
      groups:
        - toss-platform-admins
    
    - name: developer
      description: Developer access to TOSS platform
      policies:
        - p, proj:toss-enterprise:developer, applications, get, toss-enterprise/*, allow
        - p, proj:toss-enterprise:developer, applications, sync, toss-enterprise/*, allow
        - p, proj:toss-enterprise:developer, repositories, get, *, allow
      groups:
        - toss-developers
    
    - name: viewer
      description: Read-only access to TOSS platform
      policies:
        - p, proj:toss-enterprise:viewer, applications, get, toss-enterprise/*, allow
        - p, proj:toss-enterprise:viewer, repositories, get, *, allow
      groups:
        - toss-viewers

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: toss-ai-services
  namespace: argocd
  labels:
    app: toss-ai-services
    environment: production
    component: ai
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: toss-enterprise
  
  source:
    repoURL: https://github.com/toss-organization/toss-platform
    targetRevision: main
    path: infra/k8s
    directory:
      include: "ai-service.yaml"
  
  destination:
    server: https://kubernetes.default.svc
    namespace: toss-ai
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 1m

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: toss-monitoring
  namespace: argocd
  labels:
    app: toss-monitoring
    environment: production
    component: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: toss-enterprise
  
  source:
    repoURL: https://github.com/toss-organization/toss-platform
    targetRevision: main
    path: infra/k8s
    directory:
      include: "monitoring.yaml"
  
  destination:
    server: https://kubernetes.default.svc
    namespace: toss-monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 2m

---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: toss-microservices
  namespace: argocd
  labels:
    applicationset: toss-microservices
spec:
  generators:
  - list:
      elements:
      - service: stock
        namespace: toss-stock
        path: src/Services/Stock
      - service: inventory
        namespace: toss-inventory
        path: src/Services/Inventory
      - service: customer
        namespace: toss-customer
        path: src/Services/Customer
      - service: gateway
        namespace: toss-gateway
        path: src/Gateway
  
  template:
    metadata:
      name: 'toss-{{service}}'
      labels:
        service: '{{service}}'
        environment: production
      annotations:
        argocd.argoproj.io/sync-wave: "3"
    
    spec:
      project: toss-enterprise
      
      source:
        repoURL: https://github.com/toss-organization/toss-platform
        targetRevision: main
        path: '{{path}}/k8s'
      
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{namespace}}'
      
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: 3
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 1m

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications
    app.kubernetes.io/part-of: argocd
data:
  # Email configuration
  service.email.gmail: |
    username: $email-username
    password: $email-password
    host: smtp.gmail.com
    port: 587
    from: $email-username
  
  # Slack configuration
  service.slack: |
    token: $slack-token
  
  # Microsoft Teams configuration
  service.webhook.teams: |
    url: $teams-webhook-url
  
  # Notification templates
  template.app-deployed: |
    email:
      subject: Application {{.app.metadata.name}} deployed successfully
    message: |
      {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been deployed to {{.app.spec.destination.namespace}}.
      
      Sync Status: {{.app.status.sync.status}}
      Health Status: {{.app.status.health.status}}
      Repository: {{.app.spec.source.repoURL}}
      Revision: {{.app.status.sync.revision}}
  
  template.app-health-degraded: |
    email:
      subject: Application {{.app.metadata.name}} health degraded
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} health is degraded.
      
      Health Status: {{.app.status.health.status}}
      Health Message: {{.app.status.health.message}}
      Namespace: {{.app.spec.destination.namespace}}
  
  template.app-sync-failed: |
    email:
      subject: Application {{.app.metadata.name}} sync failed
    message: |
      {{if eq .serviceType "slack"}}:x:{{end}} Application {{.app.metadata.name}} sync failed.
      
      Sync Status: {{.app.status.sync.status}}
      Sync Message: {{.app.status.operationState.message}}
      Repository: {{.app.spec.source.repoURL}}
      Revision: {{.app.status.sync.revision}}
  
  # Triggers
  trigger.on-deployed: |
    - description: Application deployed
      send:
      - app-deployed
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
  
  trigger.on-health-degraded: |
    - description: Application health degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  
  trigger.on-sync-failed: |
    - description: Application sync failed
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  
  # Subscriptions
  subscriptions: |
    - recipients:
      - email:platform-team@toss.example.com
      - slack:platform-alerts
      triggers:
      - on-deployed
      - on-health-degraded
      - on-sync-failed
